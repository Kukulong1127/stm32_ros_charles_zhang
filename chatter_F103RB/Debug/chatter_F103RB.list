
chatter_F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004904  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08004a10  08004a10  00014a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c5c  08004c5c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004c5c  08004c5c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c5c  08004c5c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c64  08004c64  00014c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b98  20000078  08004ce0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c10  08004ce0  00020c10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ddb7  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000220f  00000000  00000000  0002de9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  000300b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006e1  00000000  00000000  000309a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177d2  00000000  00000000  00031089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b675  00000000  00000000  0004885b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087731  00000000  00000000  00053ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002744  00000000  00000000  000db604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000ddd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080049f8 	.word	0x080049f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080049f8 	.word	0x080049f8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f002 f8de 	bl	8002320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f80b 	bl	800017e <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8a8 	bl	80002bc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800016c:	f000 f880 	bl	8000270 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000170:	f000 f850 	bl	8000214 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 8000174:	f001 fa0c 	bl	8001590 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000178:	f001 fa1a 	bl	80015b0 <loop>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	; 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	; 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f004 fae4 	bl	800475a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b0:	2300      	movs	r3, #0
 80001b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f002 fea2 	bl	8002f08 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	bf14      	ite	ne
 80001ca:	2301      	movne	r3, #1
 80001cc:	2300      	moveq	r3, #0
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 80001d4:	f000 f8e0 	bl	8000398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001dc:	2302      	movs	r3, #2
 80001de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2102      	movs	r1, #2
 80001f2:	4618      	mov	r0, r3
 80001f4:	f003 f90a 	bl	800340c <HAL_RCC_ClockConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	bf14      	ite	ne
 80001fe:	2301      	movne	r3, #1
 8000200:	2300      	moveq	r3, #0
 8000202:	b2db      	uxtb	r3, r3
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000208:	f000 f8c6 	bl	8000398 <Error_Handler>
  }
}
 800020c:	bf00      	nop
 800020e:	3740      	adds	r7, #64	; 0x40
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800021a:	4a14      	ldr	r2, [pc, #80]	; (800026c <_ZL19MX_USART2_UART_Initv+0x58>)
 800021c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800021e:	4b12      	ldr	r3, [pc, #72]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000220:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000226:	4b10      	ldr	r3, [pc, #64]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000228:	2200      	movs	r2, #0
 800022a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800022e:	2200      	movs	r2, #0
 8000230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000232:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000234:	2200      	movs	r2, #0
 8000236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000238:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800023a:	220c      	movs	r2, #12
 800023c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800023e:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000240:	2200      	movs	r2, #0
 8000242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000246:	2200      	movs	r2, #0
 8000248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800024a:	4807      	ldr	r0, [pc, #28]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800024c:	f003 fa6c 	bl	8003728 <HAL_UART_Init>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	bf14      	ite	ne
 8000256:	2301      	movne	r3, #1
 8000258:	2300      	moveq	r3, #0
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000260:	f000 f89a 	bl	8000398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000094 	.word	0x20000094
 800026c:	40004400 	.word	0x40004400

08000270 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <_ZL11MX_DMA_Initv+0x48>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a0f      	ldr	r2, [pc, #60]	; (80002b8 <_ZL11MX_DMA_Initv+0x48>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6153      	str	r3, [r2, #20]
 8000282:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <_ZL11MX_DMA_Initv+0x48>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800028e:	2200      	movs	r2, #0
 8000290:	2100      	movs	r1, #0
 8000292:	2010      	movs	r0, #16
 8000294:	f002 f9a1 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000298:	2010      	movs	r0, #16
 800029a:	f002 f9ba 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800029e:	2200      	movs	r2, #0
 80002a0:	2100      	movs	r1, #0
 80002a2:	2011      	movs	r0, #17
 80002a4:	f002 f999 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80002a8:	2011      	movs	r0, #17
 80002aa:	f002 f9b2 	bl	8002612 <HAL_NVIC_EnableIRQ>

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000

080002bc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <_ZL12MX_GPIO_Initv+0xcc>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a2c      	ldr	r2, [pc, #176]	; (8000388 <_ZL12MX_GPIO_Initv+0xcc>)
 80002d6:	f043 0310 	orr.w	r3, r3, #16
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <_ZL12MX_GPIO_Initv+0xcc>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0310 	and.w	r3, r3, #16
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e8:	4b27      	ldr	r3, [pc, #156]	; (8000388 <_ZL12MX_GPIO_Initv+0xcc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a26      	ldr	r2, [pc, #152]	; (8000388 <_ZL12MX_GPIO_Initv+0xcc>)
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b24      	ldr	r3, [pc, #144]	; (8000388 <_ZL12MX_GPIO_Initv+0xcc>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0320 	and.w	r3, r3, #32
 80002fc:	60bb      	str	r3, [r7, #8]
 80002fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000300:	4b21      	ldr	r3, [pc, #132]	; (8000388 <_ZL12MX_GPIO_Initv+0xcc>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a20      	ldr	r2, [pc, #128]	; (8000388 <_ZL12MX_GPIO_Initv+0xcc>)
 8000306:	f043 0304 	orr.w	r3, r3, #4
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <_ZL12MX_GPIO_Initv+0xcc>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0304 	and.w	r3, r3, #4
 8000314:	607b      	str	r3, [r7, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <_ZL12MX_GPIO_Initv+0xcc>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <_ZL12MX_GPIO_Initv+0xcc>)
 800031e:	f043 0308 	orr.w	r3, r3, #8
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b18      	ldr	r3, [pc, #96]	; (8000388 <_ZL12MX_GPIO_Initv+0xcc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0308 	and.w	r3, r3, #8
 800032c:	603b      	str	r3, [r7, #0]
 800032e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2120      	movs	r1, #32
 8000334:	4815      	ldr	r0, [pc, #84]	; (800038c <_ZL12MX_GPIO_Initv+0xd0>)
 8000336:	f002 fdad 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800033a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800033e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <_ZL12MX_GPIO_Initv+0xd4>)
 8000342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	2300      	movs	r3, #0
 8000346:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000348:	f107 0310 	add.w	r3, r7, #16
 800034c:	4619      	mov	r1, r3
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <_ZL12MX_GPIO_Initv+0xd8>)
 8000350:	f002 fc1c 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000354:	2320      	movs	r3, #32
 8000356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	2301      	movs	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000360:	2302      	movs	r3, #2
 8000362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000364:	f107 0310 	add.w	r3, r7, #16
 8000368:	4619      	mov	r1, r3
 800036a:	4808      	ldr	r0, [pc, #32]	; (800038c <_ZL12MX_GPIO_Initv+0xd0>)
 800036c:	f002 fc0e 	bl	8002b8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000370:	2200      	movs	r2, #0
 8000372:	2100      	movs	r1, #0
 8000374:	2028      	movs	r0, #40	; 0x28
 8000376:	f002 f930 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800037a:	2028      	movs	r0, #40	; 0x28
 800037c:	f002 f949 	bl	8002612 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000380:	bf00      	nop
 8000382:	3720      	adds	r7, #32
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40021000 	.word	0x40021000
 800038c:	40010800 	.word	0x40010800
 8000390:	10110000 	.word	0x10110000
 8000394:	40011000 	.word	0x40011000

08000398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039c:	b672      	cpsid	i
}
 800039e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <Error_Handler+0x8>

080003a2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2200      	movs	r2, #0
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4618      	mov	r0, r3
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
	...

080003c4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <_ZN3ros3MsgC1Ev+0x1c>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	08004c20 	.word	0x08004c20

080003e4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
      data()
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff ffe8 	bl	80003c4 <_ZN3ros3MsgC1Ev>
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3304      	adds	r3, #4
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ffcf 	bl	80003a2 <_ZN3ros4TimeC1Ev>
    {
    }
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	08004c08 	.word	0x08004c08

08000414 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	6859      	ldr	r1, [r3, #4]
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	683a      	ldr	r2, [r7, #0]
 800042a:	4413      	add	r3, r2
 800042c:	b2ca      	uxtb	r2, r1
 800042e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	0a19      	lsrs	r1, r3, #8
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3301      	adds	r3, #1
 800043a:	683a      	ldr	r2, [r7, #0]
 800043c:	4413      	add	r3, r2
 800043e:	b2ca      	uxtb	r2, r1
 8000440:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	0c19      	lsrs	r1, r3, #16
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	3302      	adds	r3, #2
 800044c:	683a      	ldr	r2, [r7, #0]
 800044e:	4413      	add	r3, r2
 8000450:	b2ca      	uxtb	r2, r1
 8000452:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	0e19      	lsrs	r1, r3, #24
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	3303      	adds	r3, #3
 800045e:	683a      	ldr	r2, [r7, #0]
 8000460:	4413      	add	r3, r2
 8000462:	b2ca      	uxtb	r2, r1
 8000464:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	3304      	adds	r3, #4
 800046a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	6899      	ldr	r1, [r3, #8]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	683a      	ldr	r2, [r7, #0]
 8000474:	4413      	add	r3, r2
 8000476:	b2ca      	uxtb	r2, r1
 8000478:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	0a19      	lsrs	r1, r3, #8
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	3301      	adds	r3, #1
 8000484:	683a      	ldr	r2, [r7, #0]
 8000486:	4413      	add	r3, r2
 8000488:	b2ca      	uxtb	r2, r1
 800048a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	0c19      	lsrs	r1, r3, #16
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	3302      	adds	r3, #2
 8000496:	683a      	ldr	r2, [r7, #0]
 8000498:	4413      	add	r3, r2
 800049a:	b2ca      	uxtb	r2, r1
 800049c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	0e19      	lsrs	r1, r3, #24
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3303      	adds	r3, #3
 80004a8:	683a      	ldr	r2, [r7, #0]
 80004aa:	4413      	add	r3, r2
 80004ac:	b2ca      	uxtb	r2, r1
 80004ae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3304      	adds	r3, #4
 80004b4:	60fb      	str	r3, [r7, #12]
      return offset;
 80004b6:	68fb      	ldr	r3, [r7, #12]
    }
 80004b8:	4618      	mov	r0, r3
 80004ba:	3714      	adds	r7, #20
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80004c2:	b480      	push	{r7}
 80004c4:	b085      	sub	sp, #20
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	683a      	ldr	r2, [r7, #0]
 80004d4:	4413      	add	r3, r2
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	461a      	mov	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	685a      	ldr	r2, [r3, #4]
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	3301      	adds	r3, #1
 80004e6:	6839      	ldr	r1, [r7, #0]
 80004e8:	440b      	add	r3, r1
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	021b      	lsls	r3, r3, #8
 80004ee:	431a      	orrs	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	685a      	ldr	r2, [r3, #4]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3302      	adds	r3, #2
 80004fc:	6839      	ldr	r1, [r7, #0]
 80004fe:	440b      	add	r3, r1
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	041b      	lsls	r3, r3, #16
 8000504:	431a      	orrs	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	685a      	ldr	r2, [r3, #4]
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	3303      	adds	r3, #3
 8000512:	6839      	ldr	r1, [r7, #0]
 8000514:	440b      	add	r3, r1
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	061b      	lsls	r3, r3, #24
 800051a:	431a      	orrs	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	3304      	adds	r3, #4
 8000524:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	683a      	ldr	r2, [r7, #0]
 800052a:	4413      	add	r3, r2
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	461a      	mov	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	689a      	ldr	r2, [r3, #8]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3301      	adds	r3, #1
 800053c:	6839      	ldr	r1, [r7, #0]
 800053e:	440b      	add	r3, r1
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	431a      	orrs	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	689a      	ldr	r2, [r3, #8]
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	3302      	adds	r3, #2
 8000552:	6839      	ldr	r1, [r7, #0]
 8000554:	440b      	add	r3, r1
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	041b      	lsls	r3, r3, #16
 800055a:	431a      	orrs	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	689a      	ldr	r2, [r3, #8]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	3303      	adds	r3, #3
 8000568:	6839      	ldr	r1, [r7, #0]
 800056a:	440b      	add	r3, r1
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	431a      	orrs	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	3304      	adds	r3, #4
 800057a:	60fb      	str	r3, [r7, #12]
     return offset;
 800057c:	68fb      	ldr	r3, [r7, #12]
    }
 800057e:	4618      	mov	r0, r3
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	4b02      	ldr	r3, [pc, #8]	; (800059c <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	08004a10 	.word	0x08004a10

080005a0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	08004a20 	.word	0x08004a20

080005b8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fefe 	bl	80003c4 <_ZN3ros3MsgC1Ev>
 80005c8:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80005d8:	609a      	str	r2, [r3, #8]
      message_type(""),
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80005de:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a06      	ldr	r2, [pc, #24]	; (80005fc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80005e4:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
    {
    }
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	08004bf0 	.word	0x08004bf0
 80005fc:	08004a44 	.word	0x08004a44

08000600 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	8899      	ldrh	r1, [r3, #4]
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	4413      	add	r3, r2
 8000618:	b2ca      	uxtb	r2, r1
 800061a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	889b      	ldrh	r3, [r3, #4]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	b299      	uxth	r1, r3
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	3301      	adds	r3, #1
 8000628:	683a      	ldr	r2, [r7, #0]
 800062a:	4413      	add	r3, r2
 800062c:	b2ca      	uxtb	r2, r1
 800062e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	3302      	adds	r3, #2
 8000634:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fd86 	bl	800014c <strlen>
 8000640:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	4413      	add	r3, r2
 8000648:	69b9      	ldr	r1, [r7, #24]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 ffca 	bl	80015e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000650:	69fb      	ldr	r3, [r7, #28]
 8000652:	3304      	adds	r3, #4
 8000654:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	18d0      	adds	r0, r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	69ba      	ldr	r2, [r7, #24]
 8000662:	4619      	mov	r1, r3
 8000664:	f004 f8ae 	bl	80047c4 <memcpy>
      offset += length_topic_name;
 8000668:	69fa      	ldr	r2, [r7, #28]
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	4413      	add	r3, r2
 800066e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fd69 	bl	800014c <strlen>
 800067a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	4413      	add	r3, r2
 8000682:	6979      	ldr	r1, [r7, #20]
 8000684:	4618      	mov	r0, r3
 8000686:	f000 ffad 	bl	80015e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3304      	adds	r3, #4
 800068e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	18d0      	adds	r0, r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	697a      	ldr	r2, [r7, #20]
 800069c:	4619      	mov	r1, r3
 800069e:	f004 f891 	bl	80047c4 <memcpy>
      offset += length_message_type;
 80006a2:	69fa      	ldr	r2, [r7, #28]
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	4413      	add	r3, r2
 80006a8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fd4c 	bl	800014c <strlen>
 80006b4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	6939      	ldr	r1, [r7, #16]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 ff90 	bl	80015e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	3304      	adds	r3, #4
 80006c8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	18d0      	adds	r0, r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	693a      	ldr	r2, [r7, #16]
 80006d6:	4619      	mov	r1, r3
 80006d8:	f004 f874 	bl	80047c4 <memcpy>
      offset += length_md5sum;
 80006dc:	69fa      	ldr	r2, [r7, #28]
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	4413      	add	r3, r2
 80006e2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80006ea:	68f9      	ldr	r1, [r7, #12]
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	4413      	add	r3, r2
 80006f2:	b2ca      	uxtb	r2, r1
 80006f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	0a19      	lsrs	r1, r3, #8
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3301      	adds	r3, #1
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	4413      	add	r3, r2
 8000702:	b2ca      	uxtb	r2, r1
 8000704:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	0c19      	lsrs	r1, r3, #16
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3302      	adds	r3, #2
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	4413      	add	r3, r2
 8000712:	b2ca      	uxtb	r2, r1
 8000714:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	0e19      	lsrs	r1, r3, #24
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3303      	adds	r3, #3
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	4413      	add	r3, r2
 8000722:	b2ca      	uxtb	r2, r1
 8000724:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3304      	adds	r3, #4
 800072a:	61fb      	str	r3, [r7, #28]
      return offset;
 800072c:	69fb      	ldr	r3, [r7, #28]
    }
 800072e:	4618      	mov	r0, r3
 8000730:	3720      	adds	r7, #32
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000736:	b580      	push	{r7, lr}
 8000738:	b08a      	sub	sp, #40	; 0x28
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	683a      	ldr	r2, [r7, #0]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b29a      	uxth	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	889b      	ldrh	r3, [r3, #4]
 8000756:	b21a      	sxth	r2, r3
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	3301      	adds	r3, #1
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	440b      	add	r3, r1
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	b21b      	sxth	r3, r3
 8000766:	4313      	orrs	r3, r2
 8000768:	b21b      	sxth	r3, r3
 800076a:	b29a      	uxth	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	3302      	adds	r3, #2
 8000774:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	683a      	ldr	r2, [r7, #0]
 800077a:	441a      	add	r2, r3
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f000 ff4c 	bl	8001620 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	3304      	adds	r3, #4
 800078c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
 8000792:	e00b      	b.n	80007ac <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000798:	441a      	add	r2, r3
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079c:	3b01      	subs	r3, #1
 800079e:	6839      	ldr	r1, [r7, #0]
 80007a0:	440b      	add	r3, r1
 80007a2:	7812      	ldrb	r2, [r2, #0]
 80007a4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a8:	3301      	adds	r3, #1
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
 80007ac:	69ba      	ldr	r2, [r7, #24]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	4413      	add	r3, r2
 80007b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d3ed      	bcc.n	8000794 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	4413      	add	r3, r2
 80007be:	3b01      	subs	r3, #1
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	441a      	add	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80007d4:	69ba      	ldr	r2, [r7, #24]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	441a      	add	r2, r3
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 ff19 	bl	8001620 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	3304      	adds	r3, #4
 80007f2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	623b      	str	r3, [r7, #32]
 80007f8:	e00b      	b.n	8000812 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	6a3b      	ldr	r3, [r7, #32]
 80007fe:	441a      	add	r2, r3
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	3b01      	subs	r3, #1
 8000804:	6839      	ldr	r1, [r7, #0]
 8000806:	440b      	add	r3, r1
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	3301      	adds	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
 8000812:	69ba      	ldr	r2, [r7, #24]
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	4413      	add	r3, r2
 8000818:	6a3a      	ldr	r2, [r7, #32]
 800081a:	429a      	cmp	r2, r3
 800081c:	d3ed      	bcc.n	80007fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800081e:	69ba      	ldr	r2, [r7, #24]
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	4413      	add	r3, r2
 8000824:	3b01      	subs	r3, #1
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	4413      	add	r3, r2
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800082e:	69bb      	ldr	r3, [r7, #24]
 8000830:	3b01      	subs	r3, #1
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	441a      	add	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	4413      	add	r3, r2
 8000840:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	441a      	add	r2, r3
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fee6 	bl	8001620 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	3304      	adds	r3, #4
 8000858:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	61fb      	str	r3, [r7, #28]
 800085e:	e00b      	b.n	8000878 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	441a      	add	r2, r3
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3b01      	subs	r3, #1
 800086a:	6839      	ldr	r1, [r7, #0]
 800086c:	440b      	add	r3, r1
 800086e:	7812      	ldrb	r2, [r2, #0]
 8000870:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3301      	adds	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	429a      	cmp	r2, r3
 8000882:	d3ed      	bcc.n	8000860 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	4413      	add	r3, r2
 800088a:	3b01      	subs	r3, #1
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	4413      	add	r3, r2
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	3b01      	subs	r3, #1
 8000898:	683a      	ldr	r2, [r7, #0]
 800089a:	441a      	add	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	4413      	add	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	6839      	ldr	r1, [r7, #0]
 80008b2:	440a      	add	r2, r1
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	3301      	adds	r3, #1
 80008c0:	6839      	ldr	r1, [r7, #0]
 80008c2:	440b      	add	r3, r1
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	021b      	lsls	r3, r3, #8
 80008c8:	4313      	orrs	r3, r2
 80008ca:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80008cc:	68ba      	ldr	r2, [r7, #8]
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	3302      	adds	r3, #2
 80008d2:	6839      	ldr	r1, [r7, #0]
 80008d4:	440b      	add	r3, r1
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	041b      	lsls	r3, r3, #16
 80008da:	4313      	orrs	r3, r2
 80008dc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	3303      	adds	r3, #3
 80008e4:	6839      	ldr	r1, [r7, #0]
 80008e6:	440b      	add	r3, r1
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	061b      	lsls	r3, r3, #24
 80008ec:	4313      	orrs	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80008f0:	68ba      	ldr	r2, [r7, #8]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	3304      	adds	r3, #4
 80008fa:	61bb      	str	r3, [r7, #24]
     return offset;
 80008fc:	69bb      	ldr	r3, [r7, #24]
    }
 80008fe:	4618      	mov	r0, r3
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	4b02      	ldr	r3, [pc, #8]	; (800091c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8000912:	4618      	mov	r0, r3
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	08004a48 	.word	0x08004a48

08000920 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	4b02      	ldr	r3, [pc, #8]	; (8000934 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	08004a64 	.word	0x08004a64

08000938 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fd3e 	bl	80003c4 <_ZN3ros3MsgC1Ev>
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	601a      	str	r2, [r3, #0]
      level(0),
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	711a      	strb	r2, [r3, #4]
      msg("")
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a04      	ldr	r2, [pc, #16]	; (8000968 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000958:	609a      	str	r2, [r3, #8]
    {
    }
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	08004bd8 	.word	0x08004bd8
 8000968:	08004a44 	.word	0x08004a44

0800096c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	4413      	add	r3, r2
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	7912      	ldrb	r2, [r2, #4]
 8000984:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	3301      	adds	r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fbdb 	bl	800014c <strlen>
 8000996:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	4413      	add	r3, r2
 800099e:	68b9      	ldr	r1, [r7, #8]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fe1f 	bl	80015e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	3304      	adds	r3, #4
 80009aa:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	18d0      	adds	r0, r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f003 ff03 	bl	80047c4 <memcpy>
      offset += length_msg;
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4413      	add	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]
      return offset;
 80009c6:	68fb      	ldr	r3, [r7, #12]
    }
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	3301      	adds	r3, #1
 80009ee:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	441a      	add	r2, r3
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fe0f 	bl	8001620 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	3304      	adds	r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e00b      	b.n	8000a26 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8000a0e:	683a      	ldr	r2, [r7, #0]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	441a      	add	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	6839      	ldr	r1, [r7, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	7812      	ldrb	r2, [r2, #0]
 8000a1e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	3301      	adds	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d3ed      	bcc.n	8000a0e <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	441a      	add	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4413      	add	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
     return offset;
 8000a56:	693b      	ldr	r3, [r7, #16]
    }
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	4b02      	ldr	r3, [pc, #8]	; (8000a74 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	08004a88 	.word	0x08004a88

08000a78 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	4b02      	ldr	r3, [pc, #8]	; (8000a8c <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	08004a9c 	.word	0x08004a9c

08000a90 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fc92 	bl	80003c4 <_ZN3ros3MsgC1Ev>
 8000aa0:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f04f 0200 	mov.w	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	08004bc0 	.word	0x08004bc0

08000aec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6859      	ldr	r1, [r3, #4]
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	b2ca      	uxtb	r2, r1
 8000b06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	0a19      	lsrs	r1, r3, #8
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	3301      	adds	r3, #1
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	4413      	add	r3, r2
 8000b16:	b2ca      	uxtb	r2, r1
 8000b18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	0c19      	lsrs	r1, r3, #16
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	3302      	adds	r3, #2
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	b2ca      	uxtb	r2, r1
 8000b2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	0e19      	lsrs	r1, r3, #24
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	3303      	adds	r3, #3
 8000b36:	683a      	ldr	r2, [r7, #0]
 8000b38:	4413      	add	r3, r2
 8000b3a:	b2ca      	uxtb	r2, r1
 8000b3c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	3304      	adds	r3, #4
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
 8000b48:	e02a      	b.n	8000ba0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68da      	ldr	r2, [r3, #12]
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000b58:	6939      	ldr	r1, [r7, #16]
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	b2ca      	uxtb	r2, r1
 8000b62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	0a19      	lsrs	r1, r3, #8
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	b2ca      	uxtb	r2, r1
 8000b72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	0c19      	lsrs	r1, r3, #16
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	b2ca      	uxtb	r2, r1
 8000b82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	0e19      	lsrs	r1, r3, #24
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	3303      	adds	r3, #3
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	b2ca      	uxtb	r2, r1
 8000b92:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	3304      	adds	r3, #4
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	6a3a      	ldr	r2, [r7, #32]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d3cf      	bcc.n	8000b4a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6919      	ldr	r1, [r3, #16]
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b2ca      	uxtb	r2, r1
 8000bb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	0a19      	lsrs	r1, r3, #8
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b2ca      	uxtb	r2, r1
 8000bc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	0c19      	lsrs	r1, r3, #16
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	b2ca      	uxtb	r2, r1
 8000bda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	0e19      	lsrs	r1, r3, #24
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	3303      	adds	r3, #3
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	4413      	add	r3, r2
 8000bea:	b2ca      	uxtb	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	e02a      	b.n	8000c50 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	699a      	ldr	r2, [r3, #24]
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	4413      	add	r3, r2
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000c08:	68f9      	ldr	r1, [r7, #12]
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	b2ca      	uxtb	r2, r1
 8000c12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	0a19      	lsrs	r1, r3, #8
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	b2ca      	uxtb	r2, r1
 8000c22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	0c19      	lsrs	r1, r3, #16
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	b2ca      	uxtb	r2, r1
 8000c32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	0e19      	lsrs	r1, r3, #24
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	3303      	adds	r3, #3
 8000c3c:	683a      	ldr	r2, [r7, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b2ca      	uxtb	r2, r1
 8000c42:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	3304      	adds	r3, #4
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	61fb      	str	r3, [r7, #28]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	69fa      	ldr	r2, [r7, #28]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d3cf      	bcc.n	8000bfa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69d9      	ldr	r1, [r3, #28]
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	b2ca      	uxtb	r2, r1
 8000c66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	0a19      	lsrs	r1, r3, #8
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	3301      	adds	r3, #1
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	4413      	add	r3, r2
 8000c76:	b2ca      	uxtb	r2, r1
 8000c78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	0c19      	lsrs	r1, r3, #16
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	3302      	adds	r3, #2
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	b2ca      	uxtb	r2, r1
 8000c8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	0e19      	lsrs	r1, r3, #24
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	3303      	adds	r3, #3
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	4413      	add	r3, r2
 8000c9a:	b2ca      	uxtb	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
 8000ca8:	e027      	b.n	8000cfa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fa48 	bl	800014c <strlen>
 8000cbc:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	6979      	ldr	r1, [r7, #20]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fc8c 	bl	80015e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	3304      	adds	r3, #4
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	18d0      	adds	r0, r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f003 fd6c 	bl	80047c4 <memcpy>
      offset += length_stringsi;
 8000cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	61bb      	str	r3, [r7, #24]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d3d2      	bcc.n	8000caa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000d06:	4618      	mov	r0, r3
 8000d08:	3728      	adds	r7, #40	; 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b08e      	sub	sp, #56	; 0x38
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	4413      	add	r3, r2
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d28:	3301      	adds	r3, #1
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	6a3a      	ldr	r2, [r7, #32]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	041b      	lsls	r3, r3, #16
 8000d44:	6a3a      	ldr	r2, [r7, #32]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d4c:	3303      	adds	r3, #3
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	061b      	lsls	r3, r3, #24
 8000d56:	6a3a      	ldr	r2, [r7, #32]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5e:	3304      	adds	r3, #4
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	6a3a      	ldr	r2, [r7, #32]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d90a      	bls.n	8000d82 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4619      	mov	r1, r3
 8000d76:	4610      	mov	r0, r2
 8000d78:	f003 fcb8 	bl	80046ec <realloc>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a3a      	ldr	r2, [r7, #32]
 8000d86:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8000d8c:	e035      	b.n	8000dfa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d96:	6839      	ldr	r1, [r7, #0]
 8000d98:	440a      	add	r2, r1
 8000d9a:	7812      	ldrb	r2, [r2, #0]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da4:	3301      	adds	r3, #1
 8000da6:	6839      	ldr	r1, [r7, #0]
 8000da8:	440b      	add	r3, r1
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	4313      	orrs	r3, r2
 8000db0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db6:	3302      	adds	r3, #2
 8000db8:	6839      	ldr	r1, [r7, #0]
 8000dba:	440b      	add	r3, r1
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	041b      	lsls	r3, r3, #16
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc8:	3303      	adds	r3, #3
 8000dca:	6839      	ldr	r1, [r7, #0]
 8000dcc:	440b      	add	r3, r1
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	061b      	lsls	r3, r3, #24
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dde:	3304      	adds	r3, #4
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	3208      	adds	r2, #8
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df6:	3301      	adds	r3, #1
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d3c4      	bcc.n	8000d8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	4413      	add	r3, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e10:	3301      	adds	r3, #1
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	4413      	add	r3, r2
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	69fa      	ldr	r2, [r7, #28]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e22:	3302      	adds	r3, #2
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	041b      	lsls	r3, r3, #16
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e34:	3303      	adds	r3, #3
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	4413      	add	r3, r2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	061b      	lsls	r3, r3, #24
 8000e3e:	69fa      	ldr	r2, [r7, #28]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e46:	3304      	adds	r3, #4
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d90a      	bls.n	8000e6a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	699a      	ldr	r2, [r3, #24]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4610      	mov	r0, r2
 8000e60:	f003 fc44 	bl	80046ec <realloc>
 8000e64:	4602      	mov	r2, r0
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69fa      	ldr	r2, [r7, #28]
 8000e6e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e74:	e035      	b.n	8000ee2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e7e:	6839      	ldr	r1, [r7, #0]
 8000e80:	440a      	add	r2, r1
 8000e82:	7812      	ldrb	r2, [r2, #0]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	6839      	ldr	r1, [r7, #0]
 8000e90:	440b      	add	r3, r1
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	6839      	ldr	r1, [r7, #0]
 8000ea2:	440b      	add	r3, r1
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	041b      	lsls	r3, r3, #16
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb0:	3303      	adds	r3, #3
 8000eb2:	6839      	ldr	r1, [r7, #0]
 8000eb4:	440b      	add	r3, r1
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	061b      	lsls	r3, r3, #24
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	699a      	ldr	r2, [r3, #24]
 8000ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	3214      	adds	r2, #20
 8000ed8:	6812      	ldr	r2, [r2, #0]
 8000eda:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ede:	3301      	adds	r3, #1
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d3c4      	bcc.n	8000e76 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ef8:	3301      	adds	r3, #1
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	4413      	add	r3, r2
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	021b      	lsls	r3, r3, #8
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	041b      	lsls	r3, r3, #16
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f1c:	3303      	adds	r3, #3
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	4413      	add	r3, r2
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	061b      	lsls	r3, r3, #24
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2e:	3304      	adds	r3, #4
 8000f30:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d90a      	bls.n	8000f52 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4619      	mov	r1, r3
 8000f46:	4610      	mov	r0, r2
 8000f48:	f003 fbd0 	bl	80046ec <realloc>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f5c:	e03e      	b.n	8000fdc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	441a      	add	r2, r3
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fb58 	bl	8001620 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f72:	3304      	adds	r3, #4
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7a:	e00b      	b.n	8000f94 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	441a      	add	r2, r3
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	3b01      	subs	r3, #1
 8000f86:	6839      	ldr	r1, [r7, #0]
 8000f88:	440b      	add	r3, r1
 8000f8a:	7812      	ldrb	r2, [r2, #0]
 8000f8c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	3301      	adds	r3, #1
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
 8000f94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4413      	add	r3, r2
 8000f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d3ed      	bcc.n	8000f7c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8000fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8000fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	441a      	add	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8000fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	3220      	adds	r2, #32
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8000fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd8:	3301      	adds	r3, #1
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d3bb      	bcc.n	8000f5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8000fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3738      	adds	r7, #56	; 0x38
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	08004b5c 	.word	0x08004b5c

08001008 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	08004ac0 	.word	0x08004ac0

08001020 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68d8      	ldr	r0, [r3, #12]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6891      	ldr	r1, [r2, #8]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	4798      	blx	r3
 800106a:	4603      	mov	r3, r0
  };
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
  }
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80010a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
	...

080010b0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <_ZN13STM32HardwareC1Ev+0x34>)
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000094 	.word	0x20000094

080010e8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f804 	bl	80010fe <_ZN13STM32Hardware10reset_rbufEv>
    }
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3304      	adds	r3, #4
 800110e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001112:	4619      	mov	r1, r3
 8001114:	f002 fbc8 	bl	80038a8 <HAL_UART_Receive_DMA>
    }
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ffa8 	bl	800108a <_ZN13STM32Hardware10getRdmaIndEv>
 800113a:	4603      	mov	r3, r0
 800113c:	429c      	cmp	r4, r3
 800113e:	bf14      	ite	ne
 8001140:	2301      	movne	r3, #1
 8001142:	2300      	moveq	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d012      	beq.n	8001170 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001150:	1c59      	adds	r1, r3, #1
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	791b      	ldrb	r3, [r3, #4]
 800115e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001166:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001170:	68fb      	ldr	r3, [r7, #12]
    }
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	bd90      	pop	{r4, r7, pc}
	...

0800117c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b20      	cmp	r3, #32
 8001190:	d108      	bne.n	80011a4 <_ZN13STM32Hardware5flushEv+0x28>
 8001192:	4b33      	ldr	r3, [pc, #204]	; (8001260 <_ZN13STM32Hardware5flushEv+0xe4>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	f083 0301 	eor.w	r3, r3, #1
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <_ZN13STM32Hardware5flushEv+0x28>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <_ZN13STM32Hardware5flushEv+0x2a>
 80011a4:	2300      	movs	r3, #0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d055      	beq.n	8001256 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <_ZN13STM32Hardware5flushEv+0xe4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80011bc:	429a      	cmp	r2, r3
 80011be:	d047      	beq.n	8001250 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d217      	bcs.n	8001204 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80011da:	b29a      	uxth	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80011f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	89fa      	ldrh	r2, [r7, #14]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f002 fae3 	bl	80037c8 <HAL_UART_Transmit_DMA>
 8001202:	e01f      	b.n	8001244 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800120a:	b29b      	uxth	r3, r3
 800120c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001210:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800121c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	89fa      	ldrh	r2, [r7, #14]
 8001226:	4619      	mov	r1, r3
 8001228:	f002 face 	bl	80037c8 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800123c:	b29b      	uxth	r3, r3
 800123e:	461a      	mov	r2, r3
 8001240:	f002 fac2 	bl	80037c8 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <_ZN13STM32Hardware5flushEv+0xe4>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
      }
    }
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000164 	.word	0x20000164

08001264 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
      int n = length;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800127a:	bfa8      	it	ge
 800127c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001280:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001288:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	4293      	cmp	r3, r2
 8001290:	bf28      	it	cs
 8001292:	4613      	movcs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800129c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 fa8b 	bl	80047c4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	4413      	add	r3, r2
 80012b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d00b      	beq.n	80012e2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	18d1      	adds	r1, r2, r3
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	f003 fa71 	bl	80047c4 <memcpy>
      }

      flush();
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f7ff ff4a 	bl	800117c <_ZN13STM32Hardware5flushEv>
    }
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	f001 f86a 	bl	80023d0 <HAL_GetTick>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
      data("")
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f856 	bl	80003c4 <_ZN3ros3MsgC1Ev>
 8001318:	4a05      	ldr	r2, [pc, #20]	; (8001330 <_ZN8std_msgs6StringC1Ev+0x28>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001322:	605a      	str	r2, [r3, #4]
    {
    }
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	08004b94 	.word	0x08004b94
 8001334:	08004a44 	.word	0x08004a44

08001338 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4618      	mov	r0, r3
 800134c:	f7fe fefe 	bl	800014c <strlen>
 8001350:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	4413      	add	r3, r2
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f942 	bl	80015e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3304      	adds	r3, #4
 8001364:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	18d0      	adds	r0, r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	4619      	mov	r1, r3
 8001374:	f003 fa26 	bl	80047c4 <memcpy>
      offset += length_data;
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001380:	68fb      	ldr	r3, [r7, #12]
    }
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	441a      	add	r2, r3
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f93b 	bl	8001620 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	3304      	adds	r3, #4
 80013ae:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	e00b      	b.n	80013ce <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	441a      	add	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3b01      	subs	r3, #1
 80013c0:	6839      	ldr	r1, [r7, #0]
 80013c2:	440b      	add	r3, r1
 80013c4:	7812      	ldrb	r2, [r2, #0]
 80013c6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3301      	adds	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3ed      	bcc.n	80013b6 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	3b01      	subs	r3, #1
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	4413      	add	r3, r2
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	441a      	add	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
     return offset;
 80013fe:	693b      	ldr	r3, [r7, #16]
    }
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <_ZN8std_msgs6String7getTypeEv+0x14>)
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	08004ae4 	.word	0x08004ae4

08001420 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	4b02      	ldr	r3, [pc, #8]	; (8001434 <_ZN8std_msgs6String6getMD5Ev+0x14>)
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	08004af4 	.word	0x08004af4

08001438 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	08004bac 	.word	0x08004bac

08001458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ffe8 	bl	8001438 <_ZN3ros15NodeHandleBase_C1Ev>
 8001468:	4a36      	ldr	r2, [pc, #216]	; (8001544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3304      	adds	r3, #4
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fe1c 	bl	80010b0 <_ZN13STM32HardwareC1Ev>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800149e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 f958 	bl	800475a <memset>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80014b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 f94f 	bl	800475a <memset>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80014c2:	2264      	movs	r2, #100	; 0x64
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 f947 	bl	800475a <memset>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80014d2:	2264      	movs	r2, #100	; 0x64
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 f93f 	bl	800475a <memset>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff faac 	bl	8000a90 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	08004b80 	.word	0x08004b80

08001548 <HAL_UART_TxCpltCallback>:
ros::Publisher chatter("chatter", &str_msg);


char hello[] = "Hello world from F103RB!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <HAL_UART_TxCpltCallback+0x20>)
 8001552:	f000 f88a 	bl	800166a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001556:	4603      	mov	r3, r0
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fe0f 	bl	800117c <_ZN13STM32Hardware5flushEv>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000168 	.word	0x20000168

0800156c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_UART_RxCpltCallback+0x20>)
 8001576:	f000 f878 	bl	800166a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800157a:	4603      	mov	r3, r0
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fdbe 	bl	80010fe <_ZN13STM32Hardware10reset_rbufEv>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000168 	.word	0x20000168

08001590 <setup>:

void setup(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  nh.initNode();
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <setup+0x18>)
 8001596:	f000 f873 	bl	8001680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 800159a:	4904      	ldr	r1, [pc, #16]	; (80015ac <setup+0x1c>)
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <setup+0x18>)
 800159e:	f000 f88c 	bl	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000168 	.word	0x20000168
 80015ac:	20000aac 	.word	0x20000aac

080015b0 <loop>:

void loop(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0

  str_msg.data = hello;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <loop+0x24>)
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <loop+0x28>)
 80015b8:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 80015ba:	4906      	ldr	r1, [pc, #24]	; (80015d4 <loop+0x24>)
 80015bc:	4807      	ldr	r0, [pc, #28]	; (80015dc <loop+0x2c>)
 80015be:	f7ff fd45 	bl	800104c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <loop+0x30>)
 80015c4:	f000 f8a8 	bl	8001718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(1000);
 80015c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015cc:	f000 ff0a 	bl	80023e4 <HAL_Delay>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000aa4 	.word	0x20000aa4
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000aac 	.word	0x20000aac
 80015e0:	20000168 	.word	0x20000168

080015e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	e00c      	b.n	800160e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	fa22 f103 	lsr.w	r1, r2, r3
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	b2ca      	uxtb	r2, r1
 8001606:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3301      	adds	r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d9ef      	bls.n	80015f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	e010      	b.n	8001658 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6839      	ldr	r1, [r7, #0]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	440a      	add	r2, r1
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	4611      	mov	r1, r2
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	00d2      	lsls	r2, r2, #3
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3301      	adds	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d9eb      	bls.n	8001636 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3304      	adds	r3, #4
  }
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3304      	adds	r3, #4
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fd2b 	bl	80010e8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	e01d      	b.n	8001706 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d111      	bne.n	8001700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	60da      	str	r2, [r3, #12]
        return true;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e006      	b.n	800170e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3301      	adds	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b18      	cmp	r3, #24
 800170a:	ddde      	ble.n	80016ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 800170c:	2300      	movs	r3, #0
  }
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3304      	adds	r3, #4
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fde3 	bl	80012f0 <_ZN13STM32Hardware4timeEv>
 800172a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800173a:	4293      	cmp	r3, r2
 800173c:	d903      	bls.n	8001746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800174c:	2b00      	cmp	r3, #0
 800174e:	d009      	beq.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d903      	bls.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800176a:	2b00      	cmp	r3, #0
 800176c:	d014      	beq.n	8001798 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3304      	adds	r3, #4
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fdbc 	bl	80012f0 <_ZN13STM32Hardware4timeEv>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad2      	subs	r2, r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001784:	429a      	cmp	r2, r3
 8001786:	bf8c      	ite	hi
 8001788:	2301      	movhi	r3, #1
 800178a:	2300      	movls	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001792:	f06f 0301 	mvn.w	r3, #1
 8001796:	e194      	b.n	8001ac2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3304      	adds	r3, #4
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fcbf 	bl	8001120 <_ZN13STM32Hardware4readEv>
 80017a2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f2c0 8174 	blt.w	8001a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	441a      	add	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80017c2:	2b07      	cmp	r3, #7
 80017c4:	d11e      	bne.n	8001804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80017cc:	1c59      	adds	r1, r3, #1
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	b2d1      	uxtb	r1, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	460a      	mov	r2, r1
 80017de:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80017e8:	1e5a      	subs	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1b4      	bne.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2208      	movs	r2, #8
 80017fe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001802:	e7af      	b.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800180a:	2b00      	cmp	r3, #0
 800180c:	d128      	bne.n	8001860 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2bff      	cmp	r3, #255	; 0xff
 8001812:	d10d      	bne.n	8001830 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f103 0214 	add.w	r2, r3, #20
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800182e:	e799      	b.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3304      	adds	r3, #4
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fd5b 	bl	80012f0 <_ZN13STM32Hardware4timeEv>
 800183a:	4602      	mov	r2, r0
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	f241 3288 	movw	r2, #5000	; 0x1388
 8001844:	4293      	cmp	r3, r2
 8001846:	bf8c      	ite	hi
 8001848:	2301      	movhi	r3, #1
 800184a:	2300      	movls	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d088      	beq.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800185a:	f06f 0301 	mvn.w	r3, #1
 800185e:	e130      	b.n	8001ac2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001866:	2b01      	cmp	r3, #1
 8001868:	d118      	bne.n	800189c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2bfe      	cmp	r3, #254	; 0xfe
 800186e:	d107      	bne.n	8001880 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800187e:	e771      	b.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800188e:	2b00      	cmp	r3, #0
 8001890:	f47f af68 	bne.w	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f918 	bl	8001aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800189a:	e763      	b.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d113      	bne.n	80018ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80018cc:	e74a      	b.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d110      	bne.n	80018fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	441a      	add	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80018f8:	e734      	b.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001900:	2b04      	cmp	r3, #4
 8001902:	d116      	bne.n	8001932 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800190a:	425a      	negs	r2, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	bf58      	it	pl
 8001912:	4253      	negpl	r3, r2
 8001914:	2bff      	cmp	r3, #255	; 0xff
 8001916:	d107      	bne.n	8001928 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001926:	e71d      	b.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001930:	e718      	b.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001938:	2b05      	cmp	r3, #5
 800193a:	d10f      	bne.n	800195c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800195a:	e703      	b.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001962:	2b06      	cmp	r3, #6
 8001964:	d117      	bne.n	8001996 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	441a      	add	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2207      	movs	r2, #7
 800197c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001986:	2b00      	cmp	r3, #0
 8001988:	f47f aeec 	bne.w	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2208      	movs	r2, #8
 8001990:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001994:	e6e6      	b.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800199c:	2b08      	cmp	r3, #8
 800199e:	f47f aee1 	bne.w	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80019b0:	425a      	negs	r2, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	bf58      	it	pl
 80019b8:	4253      	negpl	r3, r2
 80019ba:	2bff      	cmp	r3, #255	; 0xff
 80019bc:	f47f aed2 	bne.w	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d110      	bne.n	80019ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f87d 	bl	8001aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f898 	bl	8001b06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e06a      	b.n	8001ac2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80019f2:	2b0a      	cmp	r3, #10
 80019f4:	d107      	bne.n	8001a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80019fc:	4619      	mov	r1, r3
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f960 	bl	8001cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001a04:	e6ae      	b.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001a0c:	2b06      	cmp	r3, #6
 8001a0e:	d10e      	bne.n	8001a2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f7ff f975 	bl	8000d0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001a2c:	e69a      	b.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001a34:	2b0b      	cmp	r3, #11
 8001a36:	d104      	bne.n	8001a42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001a40:	e690      	b.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001a48:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f43f ae84 	beq.w	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001a62:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001a6c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001a76:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4798      	blx	r3
    while (true)
 8001a92:	e667      	b.n	8001764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001a94:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00f      	beq.n	8001ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d906      	bls.n	8001ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f809 	bl	8001aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001ac0:	2300      	movs	r3, #0
  }
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fc84 	bl	80003e4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f107 020c 	add.w	r2, r7, #12
 8001ae6:	210a      	movs	r1, #10
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
    rt_time = hardware_.time();
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3304      	adds	r3, #4
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fbfd 	bl	80012f0 <_ZN13STM32Hardware4timeEv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001afe:	bf00      	nop
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001b06:	b590      	push	{r4, r7, lr}
 8001b08:	b08b      	sub	sp, #44	; 0x2c
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd50 	bl	80005b8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1c:	e062      	b.n	8001be4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d056      	beq.n	8001bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	6859      	ldr	r1, [r3, #4]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3308      	adds	r3, #8
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4608      	mov	r0, r1
 8001b7e:	4798      	blx	r3
 8001b80:	4603      	mov	r3, r0
 8001b82:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	6859      	ldr	r1, [r3, #4]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4608      	mov	r0, r1
 8001bac:	4798      	blx	r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681c      	ldr	r4, [r3, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fa51 	bl	8001074 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001bd2:	4601      	mov	r1, r0
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	461a      	mov	r2, r3
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	3301      	adds	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	2b18      	cmp	r3, #24
 8001be8:	dd99      	ble.n	8001b1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
 8001bee:	e05e      	b.n	8001cae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d053      	beq.n	8001ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c04:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c16:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c26:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c32:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3308      	adds	r3, #8
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4608      	mov	r0, r1
 8001c42:	4798      	blx	r3
 8001c44:	4603      	mov	r3, r0
 8001c46:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c58:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	330c      	adds	r3, #12
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4608      	mov	r0, r1
 8001c68:	4798      	blx	r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c72:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681c      	ldr	r4, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3304      	adds	r3, #4
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4608      	mov	r0, r1
 8001c9a:	4798      	blx	r3
 8001c9c:	4601      	mov	r1, r0
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	3301      	adds	r3, #1
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	2b18      	cmp	r3, #24
 8001cb2:	dd9d      	ble.n	8001bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8001cbc:	bf00      	nop
 8001cbe:	372c      	adds	r7, #44	; 0x2c
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}

08001cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001cce:	f107 0308 	add.w	r3, r7, #8
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fb86 	bl	80003e4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3304      	adds	r3, #4
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fb07 	bl	80012f0 <_ZN13STM32Hardware4timeEv>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	6839      	ldr	r1, [r7, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fbe4 	bl	80004c2 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	4915      	ldr	r1, [pc, #84]	; (8001d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001d00:	fba1 1303 	umull	r1, r3, r1, r3
 8001d04:	099b      	lsrs	r3, r3, #6
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001d0a:	6939      	ldr	r1, [r7, #16]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001d10:	fba3 0302 	umull	r0, r3, r3, r2
 8001d14:	099b      	lsrs	r3, r3, #6
 8001d16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d1a:	fb00 f303 	mul.w	r3, r0, r3
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	440b      	add	r3, r1
 8001d28:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	3304      	adds	r3, #4
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8a6 	bl	8001e84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fad7 	bl	80012f0 <_ZN13STM32Hardware4timeEv>
 8001d42:	4602      	mov	r2, r0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	10624dd3 	.word	0x10624dd3
 8001d58:	000f4240 	.word	0x000f4240

08001d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b63      	cmp	r3, #99	; 0x63
 8001d6c:	dd09      	ble.n	8001d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001d74:	f083 0301 	eor.w	r3, r3, #1
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e079      	b.n	8001e76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001d8e:	3207      	adds	r2, #7
 8001d90:	4611      	mov	r1, r2
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
 8001d96:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	22ff      	movs	r2, #255	; 0xff
 8001d9c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	22fe      	movs	r2, #254	; 0xfe
 8001da4:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001dce:	4413      	add	r3, r2
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	b21b      	sxth	r3, r3
 8001dea:	121b      	asrs	r3, r3, #8
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	61bb      	str	r3, [r7, #24]
 8001dfe:	e00c      	b.n	8001e1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	4413      	add	r3, r2
 8001e06:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	4413      	add	r3, r2
 8001e12:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	3301      	adds	r3, #1
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3306      	adds	r3, #6
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	dded      	ble.n	8001e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	3307      	adds	r3, #7
 8001e28:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	425a      	negs	r2, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	bf58      	it	pl
 8001e34:	4253      	negpl	r3, r2
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	1c59      	adds	r1, r3, #1
 8001e3c:	6179      	str	r1, [r7, #20]
 8001e3e:	43d2      	mvns	r2, r2
 8001e40:	b2d1      	uxtb	r1, r2
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4413      	add	r3, r2
 8001e46:	460a      	mov	r2, r1
 8001e48:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e52:	dc0a      	bgt.n	8001e6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1d18      	adds	r0, r3, #4
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7ff f9ff 	bl	8001264 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	e005      	b.n	8001e76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001e6a:	4905      	ldr	r1, [pc, #20]	; (8001e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 f849 	bl	8001f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001e76:	4618      	mov	r0, r3
 8001e78:	3720      	adds	r7, #32
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	08004b18 	.word	0x08004b18

08001e84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3304      	adds	r3, #4
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fa2c 	bl	80012f0 <_ZN13STM32Hardware4timeEv>
 8001e98:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4915      	ldr	r1, [pc, #84]	; (8001ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001ea2:	fba1 1303 	umull	r1, r3, r1, r3
 8001ea6:	099b      	lsrs	r3, r3, #6
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	1e5a      	subs	r2, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6859      	ldr	r1, [r3, #4]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001eba:	fba3 0302 	umull	r0, r3, r3, r2
 8001ebe:	099b      	lsrs	r3, r3, #6
 8001ec0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ec4:	fb00 f303 	mul.w	r3, r0, r3
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8001ecc:	fb02 f303 	mul.w	r3, r2, r3
 8001ed0:	1aca      	subs	r2, r1, r3
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8001ed4:	4413      	add	r3, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4610      	mov	r0, r2
 8001eec:	f000 f9c6 	bl	800227c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	10624dd3 	.word	0x10624dd3
 8001efc:	000f4240 	.word	0x000f4240
 8001f00:	3b9aca00 	.word	0x3b9aca00

08001f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	2103      	movs	r1, #3
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f804 	bl	8001f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fd00 	bl	8000938 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8001f38:	7afb      	ldrb	r3, [r7, #11]
 8001f3a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f107 0214 	add.w	r2, r7, #20
 8001f4a:	2107      	movs	r1, #7
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	4798      	blx	r3
  }
 8001f50:	bf00      	nop
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_Z41__static_initialization_and_destruction_0ii>:
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d110      	bne.n	8001f8a <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d10b      	bne.n	8001f8a <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8001f72:	4808      	ldr	r0, [pc, #32]	; (8001f94 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001f74:	f7ff fa70 	bl	8001458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8001f78:	4807      	ldr	r0, [pc, #28]	; (8001f98 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001f7a:	f7ff f9c5 	bl	8001308 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001f82:	4906      	ldr	r1, [pc, #24]	; (8001f9c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001f84:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001f86:	f7ff f84b 	bl	8001020 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000168 	.word	0x20000168
 8001f98:	20000aa4 	.word	0x20000aa4
 8001f9c:	08004b54 	.word	0x08004b54
 8001fa0:	20000aac 	.word	0x20000aac

08001fa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
    return configured_;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <_GLOBAL__sub_I_nh>:
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f7ff ffc7 	bl	8001f58 <_Z41__static_initialization_and_destruction_0ii>
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_MspInit+0x5c>)
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	4a14      	ldr	r2, [pc, #80]	; (8002028 <HAL_MspInit+0x5c>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6193      	str	r3, [r2, #24]
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_MspInit+0x5c>)
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <HAL_MspInit+0x5c>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a0e      	ldr	r2, [pc, #56]	; (8002028 <HAL_MspInit+0x5c>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	61d3      	str	r3, [r2, #28]
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <HAL_MspInit+0x5c>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_MspInit+0x60>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	4a04      	ldr	r2, [pc, #16]	; (800202c <HAL_MspInit+0x60>)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	40021000 	.word	0x40021000
 800202c:	40010000 	.word	0x40010000

08002030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a40      	ldr	r2, [pc, #256]	; (800214c <HAL_UART_MspInit+0x11c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d179      	bne.n	8002144 <HAL_UART_MspInit+0x114>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002050:	4b3f      	ldr	r3, [pc, #252]	; (8002150 <HAL_UART_MspInit+0x120>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	4a3e      	ldr	r2, [pc, #248]	; (8002150 <HAL_UART_MspInit+0x120>)
 8002056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205a:	61d3      	str	r3, [r2, #28]
 800205c:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <HAL_UART_MspInit+0x120>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	4b39      	ldr	r3, [pc, #228]	; (8002150 <HAL_UART_MspInit+0x120>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a38      	ldr	r2, [pc, #224]	; (8002150 <HAL_UART_MspInit+0x120>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b36      	ldr	r3, [pc, #216]	; (8002150 <HAL_UART_MspInit+0x120>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002080:	230c      	movs	r3, #12
 8002082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2302      	movs	r3, #2
 800208a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	4619      	mov	r1, r3
 8002092:	4830      	ldr	r0, [pc, #192]	; (8002154 <HAL_UART_MspInit+0x124>)
 8002094:	f000 fd7a 	bl	8002b8c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002098:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <HAL_UART_MspInit+0x128>)
 800209a:	4a30      	ldr	r2, [pc, #192]	; (800215c <HAL_UART_MspInit+0x12c>)
 800209c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800209e:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <HAL_UART_MspInit+0x128>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a4:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <HAL_UART_MspInit+0x128>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020aa:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <HAL_UART_MspInit+0x128>)
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020b0:	4b29      	ldr	r3, [pc, #164]	; (8002158 <HAL_UART_MspInit+0x128>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020b6:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_UART_MspInit+0x128>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80020bc:	4b26      	ldr	r3, [pc, #152]	; (8002158 <HAL_UART_MspInit+0x128>)
 80020be:	2220      	movs	r2, #32
 80020c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80020c2:	4b25      	ldr	r3, [pc, #148]	; (8002158 <HAL_UART_MspInit+0x128>)
 80020c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020ca:	4823      	ldr	r0, [pc, #140]	; (8002158 <HAL_UART_MspInit+0x128>)
 80020cc:	f000 fabc 	bl	8002648 <HAL_DMA_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_UART_MspInit+0xaa>
    {
      Error_Handler();
 80020d6:	f7fe f95f 	bl	8000398 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_UART_MspInit+0x128>)
 80020de:	63da      	str	r2, [r3, #60]	; 0x3c
 80020e0:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <HAL_UART_MspInit+0x128>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <HAL_UART_MspInit+0x130>)
 80020e8:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <HAL_UART_MspInit+0x134>)
 80020ea:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020ec:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <HAL_UART_MspInit+0x130>)
 80020ee:	2210      	movs	r2, #16
 80020f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f2:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <HAL_UART_MspInit+0x130>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_UART_MspInit+0x130>)
 80020fa:	2280      	movs	r2, #128	; 0x80
 80020fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020fe:	4b18      	ldr	r3, [pc, #96]	; (8002160 <HAL_UART_MspInit+0x130>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_UART_MspInit+0x130>)
 8002106:	2200      	movs	r2, #0
 8002108:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <HAL_UART_MspInit+0x130>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_UART_MspInit+0x130>)
 8002112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002116:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002118:	4811      	ldr	r0, [pc, #68]	; (8002160 <HAL_UART_MspInit+0x130>)
 800211a:	f000 fa95 	bl	8002648 <HAL_DMA_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8002124:	f7fe f938 	bl	8000398 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <HAL_UART_MspInit+0x130>)
 800212c:	639a      	str	r2, [r3, #56]	; 0x38
 800212e:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <HAL_UART_MspInit+0x130>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	2026      	movs	r0, #38	; 0x26
 800213a:	f000 fa4e 	bl	80025da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800213e:	2026      	movs	r0, #38	; 0x26
 8002140:	f000 fa67 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002144:	bf00      	nop
 8002146:	3720      	adds	r7, #32
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40004400 	.word	0x40004400
 8002150:	40021000 	.word	0x40021000
 8002154:	40010800 	.word	0x40010800
 8002158:	200000dc 	.word	0x200000dc
 800215c:	4002006c 	.word	0x4002006c
 8002160:	20000120 	.word	0x20000120
 8002164:	40020080 	.word	0x40020080

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800216c:	e7fe      	b.n	800216c <NMI_Handler+0x4>

0800216e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <MemManage_Handler+0x4>

0800217a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <BusFault_Handler+0x4>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <UsageFault_Handler+0x4>

08002186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ae:	f000 f8fd 	bl	80023ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <DMA1_Channel6_IRQHandler+0x10>)
 80021be:	f000 fbb1 	bl	8002924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200000dc 	.word	0x200000dc

080021cc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <DMA1_Channel7_IRQHandler+0x10>)
 80021d2:	f000 fba7 	bl	8002924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000120 	.word	0x20000120

080021e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <USART2_IRQHandler+0x10>)
 80021e6:	f001 fb85 	bl	80038f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000094 	.word	0x20000094

080021f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80021f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021fc:	f000 fe62 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800220c:	4a14      	ldr	r2, [pc, #80]	; (8002260 <_sbrk+0x5c>)
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <_sbrk+0x60>)
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <_sbrk+0x64>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <_sbrk+0x64>)
 8002222:	4a12      	ldr	r2, [pc, #72]	; (800226c <_sbrk+0x68>)
 8002224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <_sbrk+0x64>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	429a      	cmp	r2, r3
 8002232:	d207      	bcs.n	8002244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002234:	f002 fa9a 	bl	800476c <__errno>
 8002238:	4603      	mov	r3, r0
 800223a:	220c      	movs	r2, #12
 800223c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
 8002242:	e009      	b.n	8002258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <_sbrk+0x64>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	4a05      	ldr	r2, [pc, #20]	; (8002268 <_sbrk+0x64>)
 8002254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002256:	68fb      	ldr	r3, [r7, #12]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20005000 	.word	0x20005000
 8002264:	00000400 	.word	0x00000400
 8002268:	20000ac0 	.word	0x20000ac0
 800226c:	20000c10 	.word	0x20000c10

08002270 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0a5a      	lsrs	r2, r3, #9
 800228c:	490f      	ldr	r1, [pc, #60]	; (80022cc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800228e:	fba1 1202 	umull	r1, r2, r1, r2
 8002292:	09d2      	lsrs	r2, r2, #7
 8002294:	490e      	ldr	r1, [pc, #56]	; (80022d0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8002296:	fb01 f202 	mul.w	r2, r1, r2
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	0a5b      	lsrs	r3, r3, #9
 80022a4:	4a09      	ldr	r2, [pc, #36]	; (80022cc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	09db      	lsrs	r3, r3, #7
 80022ac:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	441a      	add	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	601a      	str	r2, [r3, #0]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	00044b83 	.word	0x00044b83
 80022d0:	3b9aca00 	.word	0x3b9aca00

080022d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d4:	f7ff ffcc 	bl	8002270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d8:	480b      	ldr	r0, [pc, #44]	; (8002308 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022da:	490c      	ldr	r1, [pc, #48]	; (800230c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022dc:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a09      	ldr	r2, [pc, #36]	; (8002314 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022f0:	4c09      	ldr	r4, [pc, #36]	; (8002318 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022fe:	f002 fa3b 	bl	8004778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002302:	f7fd ff2b 	bl	800015c <main>
  bx lr
 8002306:	4770      	bx	lr
  ldr r0, =_sdata
 8002308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800230c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002310:	08004c68 	.word	0x08004c68
  ldr r2, =_sbss
 8002314:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002318:	20000c10 	.word	0x20000c10

0800231c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800231c:	e7fe      	b.n	800231c <ADC1_2_IRQHandler>
	...

08002320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_Init+0x28>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a07      	ldr	r2, [pc, #28]	; (8002348 <HAL_Init+0x28>)
 800232a:	f043 0310 	orr.w	r3, r3, #16
 800232e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002330:	2003      	movs	r0, #3
 8002332:	f000 f947 	bl	80025c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002336:	2000      	movs	r0, #0
 8002338:	f000 f808 	bl	800234c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800233c:	f7ff fe46 	bl	8001fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40022000 	.word	0x40022000

0800234c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_InitTick+0x54>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_InitTick+0x58>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002362:	fbb3 f3f1 	udiv	r3, r3, r1
 8002366:	fbb2 f3f3 	udiv	r3, r2, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f95f 	bl	800262e <HAL_SYSTICK_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e00e      	b.n	8002398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b0f      	cmp	r3, #15
 800237e:	d80a      	bhi.n	8002396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002380:	2200      	movs	r2, #0
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f000 f927 	bl	80025da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800238c:	4a06      	ldr	r2, [pc, #24]	; (80023a8 <HAL_InitTick+0x5c>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	2000001c 	.word	0x2000001c
 80023a4:	20000024 	.word	0x20000024
 80023a8:	20000020 	.word	0x20000020

080023ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_IncTick+0x1c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_IncTick+0x20>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	4a03      	ldr	r2, [pc, #12]	; (80023cc <HAL_IncTick+0x20>)
 80023be:	6013      	str	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	20000024 	.word	0x20000024
 80023cc:	20000ac4 	.word	0x20000ac4

080023d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return uwTick;
 80023d4:	4b02      	ldr	r3, [pc, #8]	; (80023e0 <HAL_GetTick+0x10>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	20000ac4 	.word	0x20000ac4

080023e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ec:	f7ff fff0 	bl	80023d0 <HAL_GetTick>
 80023f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d005      	beq.n	800240a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_Delay+0x44>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800240a:	bf00      	nop
 800240c:	f7ff ffe0 	bl	80023d0 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	429a      	cmp	r2, r3
 800241a:	d8f7      	bhi.n	800240c <HAL_Delay+0x28>
  {
  }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000024 	.word	0x20000024

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4906      	ldr	r1, [pc, #24]	; (80024c4 <__NVIC_EnableIRQ+0x34>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
         );
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002590:	d301      	bcc.n	8002596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002592:	2301      	movs	r3, #1
 8002594:	e00f      	b.n	80025b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <SysTick_Config+0x40>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259e:	210f      	movs	r1, #15
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	f7ff ff90 	bl	80024c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <SysTick_Config+0x40>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ae:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <SysTick_Config+0x40>)
 80025b0:	2207      	movs	r2, #7
 80025b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	e000e010 	.word	0xe000e010

080025c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ff2d 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ec:	f7ff ff42 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f7ff ff90 	bl	800251c <NVIC_EncodePriority>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff5f 	bl	80024c8 <__NVIC_SetPriority>
}
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff35 	bl	8002490 <__NVIC_EnableIRQ>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff ffa2 	bl	8002580 <SysTick_Config>
 800263c:	4603      	mov	r3, r0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e043      	b.n	80026e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <HAL_DMA_Init+0xa8>)
 8002666:	4413      	add	r3, r2
 8002668:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <HAL_DMA_Init+0xac>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	009a      	lsls	r2, r3, #2
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_DMA_Init+0xb0>)
 800267a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002692:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002696:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	bffdfff8 	.word	0xbffdfff8
 80026f4:	cccccccd 	.word	0xcccccccd
 80026f8:	40020000 	.word	0x40020000

080026fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_DMA_Start_IT+0x20>
 8002718:	2302      	movs	r3, #2
 800271a:	e04b      	b.n	80027b4 <HAL_DMA_Start_IT+0xb8>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d13a      	bne.n	80027a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0201 	bic.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f9eb 	bl	8002b30 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 020e 	orr.w	r2, r2, #14
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e00f      	b.n	8002794 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0204 	bic.w	r2, r2, #4
 8002782:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 020a 	orr.w	r2, r2, #10
 8002792:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e005      	b.n	80027b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d008      	beq.n	80027e6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2204      	movs	r2, #4
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e020      	b.n	8002828 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 020e 	bic.w	r2, r2, #14
 80027f4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002826:	7bfb      	ldrb	r3, [r7, #15]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
	...

08002834 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d005      	beq.n	8002858 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2204      	movs	r2, #4
 8002850:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	e051      	b.n	80028fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 020e 	bic.w	r2, r2, #14
 8002866:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a22      	ldr	r2, [pc, #136]	; (8002908 <HAL_DMA_Abort_IT+0xd4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d029      	beq.n	80028d6 <HAL_DMA_Abort_IT+0xa2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a21      	ldr	r2, [pc, #132]	; (800290c <HAL_DMA_Abort_IT+0xd8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d022      	beq.n	80028d2 <HAL_DMA_Abort_IT+0x9e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <HAL_DMA_Abort_IT+0xdc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01a      	beq.n	80028cc <HAL_DMA_Abort_IT+0x98>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <HAL_DMA_Abort_IT+0xe0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d012      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x92>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <HAL_DMA_Abort_IT+0xe4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00a      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x8c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_DMA_Abort_IT+0xe8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d102      	bne.n	80028ba <HAL_DMA_Abort_IT+0x86>
 80028b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028b8:	e00e      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028be:	e00b      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028c4:	e008      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ca:	e005      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d0:	e002      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028d2:	2310      	movs	r3, #16
 80028d4:	e000      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028d6:	2301      	movs	r3, #1
 80028d8:	4a11      	ldr	r2, [pc, #68]	; (8002920 <HAL_DMA_Abort_IT+0xec>)
 80028da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
    } 
  }
  return status;
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40020008 	.word	0x40020008
 800290c:	4002001c 	.word	0x4002001c
 8002910:	40020030 	.word	0x40020030
 8002914:	40020044 	.word	0x40020044
 8002918:	40020058 	.word	0x40020058
 800291c:	4002006c 	.word	0x4002006c
 8002920:	40020000 	.word	0x40020000

08002924 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	2204      	movs	r2, #4
 8002942:	409a      	lsls	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d04f      	beq.n	80029ec <HAL_DMA_IRQHandler+0xc8>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d04a      	beq.n	80029ec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0204 	bic.w	r2, r2, #4
 8002972:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a66      	ldr	r2, [pc, #408]	; (8002b14 <HAL_DMA_IRQHandler+0x1f0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d029      	beq.n	80029d2 <HAL_DMA_IRQHandler+0xae>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a65      	ldr	r2, [pc, #404]	; (8002b18 <HAL_DMA_IRQHandler+0x1f4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d022      	beq.n	80029ce <HAL_DMA_IRQHandler+0xaa>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a63      	ldr	r2, [pc, #396]	; (8002b1c <HAL_DMA_IRQHandler+0x1f8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01a      	beq.n	80029c8 <HAL_DMA_IRQHandler+0xa4>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a62      	ldr	r2, [pc, #392]	; (8002b20 <HAL_DMA_IRQHandler+0x1fc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d012      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x9e>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a60      	ldr	r2, [pc, #384]	; (8002b24 <HAL_DMA_IRQHandler+0x200>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00a      	beq.n	80029bc <HAL_DMA_IRQHandler+0x98>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a5f      	ldr	r2, [pc, #380]	; (8002b28 <HAL_DMA_IRQHandler+0x204>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d102      	bne.n	80029b6 <HAL_DMA_IRQHandler+0x92>
 80029b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029b4:	e00e      	b.n	80029d4 <HAL_DMA_IRQHandler+0xb0>
 80029b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029ba:	e00b      	b.n	80029d4 <HAL_DMA_IRQHandler+0xb0>
 80029bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029c0:	e008      	b.n	80029d4 <HAL_DMA_IRQHandler+0xb0>
 80029c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029c6:	e005      	b.n	80029d4 <HAL_DMA_IRQHandler+0xb0>
 80029c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029cc:	e002      	b.n	80029d4 <HAL_DMA_IRQHandler+0xb0>
 80029ce:	2340      	movs	r3, #64	; 0x40
 80029d0:	e000      	b.n	80029d4 <HAL_DMA_IRQHandler+0xb0>
 80029d2:	2304      	movs	r3, #4
 80029d4:	4a55      	ldr	r2, [pc, #340]	; (8002b2c <HAL_DMA_IRQHandler+0x208>)
 80029d6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 8094 	beq.w	8002b0a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029ea:	e08e      	b.n	8002b0a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2202      	movs	r2, #2
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d056      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x186>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d051      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 020a 	bic.w	r2, r2, #10
 8002a22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a38      	ldr	r2, [pc, #224]	; (8002b14 <HAL_DMA_IRQHandler+0x1f0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d029      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x166>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a37      	ldr	r2, [pc, #220]	; (8002b18 <HAL_DMA_IRQHandler+0x1f4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d022      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x162>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a35      	ldr	r2, [pc, #212]	; (8002b1c <HAL_DMA_IRQHandler+0x1f8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01a      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x15c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_DMA_IRQHandler+0x1fc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d012      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x156>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a32      	ldr	r2, [pc, #200]	; (8002b24 <HAL_DMA_IRQHandler+0x200>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00a      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x150>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <HAL_DMA_IRQHandler+0x204>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d102      	bne.n	8002a6e <HAL_DMA_IRQHandler+0x14a>
 8002a68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a6c:	e00e      	b.n	8002a8c <HAL_DMA_IRQHandler+0x168>
 8002a6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a72:	e00b      	b.n	8002a8c <HAL_DMA_IRQHandler+0x168>
 8002a74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a78:	e008      	b.n	8002a8c <HAL_DMA_IRQHandler+0x168>
 8002a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a7e:	e005      	b.n	8002a8c <HAL_DMA_IRQHandler+0x168>
 8002a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a84:	e002      	b.n	8002a8c <HAL_DMA_IRQHandler+0x168>
 8002a86:	2320      	movs	r3, #32
 8002a88:	e000      	b.n	8002a8c <HAL_DMA_IRQHandler+0x168>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <HAL_DMA_IRQHandler+0x208>)
 8002a8e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d034      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002aa8:	e02f      	b.n	8002b0a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	2208      	movs	r2, #8
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d028      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x1e8>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d023      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 020e 	bic.w	r2, r2, #14
 8002ad2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002adc:	2101      	movs	r1, #1
 8002ade:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
    }
  }
  return;
 8002b0a:	bf00      	nop
 8002b0c:	bf00      	nop
}
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40020008 	.word	0x40020008
 8002b18:	4002001c 	.word	0x4002001c
 8002b1c:	40020030 	.word	0x40020030
 8002b20:	40020044 	.word	0x40020044
 8002b24:	40020058 	.word	0x40020058
 8002b28:	4002006c 	.word	0x4002006c
 8002b2c:	40020000 	.word	0x40020000

08002b30 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	2101      	movs	r1, #1
 8002b48:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d108      	bne.n	8002b70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b6e:	e007      	b.n	8002b80 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	60da      	str	r2, [r3, #12]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b08b      	sub	sp, #44	; 0x2c
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b96:	2300      	movs	r3, #0
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b9e:	e169      	b.n	8002e74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	f040 8158 	bne.w	8002e6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4a9a      	ldr	r2, [pc, #616]	; (8002e2c <HAL_GPIO_Init+0x2a0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d05e      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002bc8:	4a98      	ldr	r2, [pc, #608]	; (8002e2c <HAL_GPIO_Init+0x2a0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d875      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002bce:	4a98      	ldr	r2, [pc, #608]	; (8002e30 <HAL_GPIO_Init+0x2a4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d058      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002bd4:	4a96      	ldr	r2, [pc, #600]	; (8002e30 <HAL_GPIO_Init+0x2a4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d86f      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002bda:	4a96      	ldr	r2, [pc, #600]	; (8002e34 <HAL_GPIO_Init+0x2a8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d052      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002be0:	4a94      	ldr	r2, [pc, #592]	; (8002e34 <HAL_GPIO_Init+0x2a8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d869      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002be6:	4a94      	ldr	r2, [pc, #592]	; (8002e38 <HAL_GPIO_Init+0x2ac>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d04c      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002bec:	4a92      	ldr	r2, [pc, #584]	; (8002e38 <HAL_GPIO_Init+0x2ac>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d863      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002bf2:	4a92      	ldr	r2, [pc, #584]	; (8002e3c <HAL_GPIO_Init+0x2b0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d046      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002bf8:	4a90      	ldr	r2, [pc, #576]	; (8002e3c <HAL_GPIO_Init+0x2b0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d85d      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002bfe:	2b12      	cmp	r3, #18
 8002c00:	d82a      	bhi.n	8002c58 <HAL_GPIO_Init+0xcc>
 8002c02:	2b12      	cmp	r3, #18
 8002c04:	d859      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <HAL_GPIO_Init+0x80>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c87 	.word	0x08002c87
 8002c10:	08002c61 	.word	0x08002c61
 8002c14:	08002c73 	.word	0x08002c73
 8002c18:	08002cb5 	.word	0x08002cb5
 8002c1c:	08002cbb 	.word	0x08002cbb
 8002c20:	08002cbb 	.word	0x08002cbb
 8002c24:	08002cbb 	.word	0x08002cbb
 8002c28:	08002cbb 	.word	0x08002cbb
 8002c2c:	08002cbb 	.word	0x08002cbb
 8002c30:	08002cbb 	.word	0x08002cbb
 8002c34:	08002cbb 	.word	0x08002cbb
 8002c38:	08002cbb 	.word	0x08002cbb
 8002c3c:	08002cbb 	.word	0x08002cbb
 8002c40:	08002cbb 	.word	0x08002cbb
 8002c44:	08002cbb 	.word	0x08002cbb
 8002c48:	08002cbb 	.word	0x08002cbb
 8002c4c:	08002cbb 	.word	0x08002cbb
 8002c50:	08002c69 	.word	0x08002c69
 8002c54:	08002c7d 	.word	0x08002c7d
 8002c58:	4a79      	ldr	r2, [pc, #484]	; (8002e40 <HAL_GPIO_Init+0x2b4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c5e:	e02c      	b.n	8002cba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	623b      	str	r3, [r7, #32]
          break;
 8002c66:	e029      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	623b      	str	r3, [r7, #32]
          break;
 8002c70:	e024      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	3308      	adds	r3, #8
 8002c78:	623b      	str	r3, [r7, #32]
          break;
 8002c7a:	e01f      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	330c      	adds	r3, #12
 8002c82:	623b      	str	r3, [r7, #32]
          break;
 8002c84:	e01a      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	623b      	str	r3, [r7, #32]
          break;
 8002c92:	e013      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c9c:	2308      	movs	r3, #8
 8002c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	611a      	str	r2, [r3, #16]
          break;
 8002ca6:	e009      	b.n	8002cbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ca8:	2308      	movs	r3, #8
 8002caa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	615a      	str	r2, [r3, #20]
          break;
 8002cb2:	e003      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	623b      	str	r3, [r7, #32]
          break;
 8002cb8:	e000      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          break;
 8002cba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2bff      	cmp	r3, #255	; 0xff
 8002cc0:	d801      	bhi.n	8002cc6 <HAL_GPIO_Init+0x13a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	e001      	b.n	8002cca <HAL_GPIO_Init+0x13e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2bff      	cmp	r3, #255	; 0xff
 8002cd0:	d802      	bhi.n	8002cd8 <HAL_GPIO_Init+0x14c>
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	e002      	b.n	8002cde <HAL_GPIO_Init+0x152>
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	3b08      	subs	r3, #8
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	210f      	movs	r1, #15
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	401a      	ands	r2, r3
 8002cf0:	6a39      	ldr	r1, [r7, #32]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80b1 	beq.w	8002e6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d0c:	4b4d      	ldr	r3, [pc, #308]	; (8002e44 <HAL_GPIO_Init+0x2b8>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	4a4c      	ldr	r2, [pc, #304]	; (8002e44 <HAL_GPIO_Init+0x2b8>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6193      	str	r3, [r2, #24]
 8002d18:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_GPIO_Init+0x2b8>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d24:	4a48      	ldr	r2, [pc, #288]	; (8002e48 <HAL_GPIO_Init+0x2bc>)
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	089b      	lsrs	r3, r3, #2
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	220f      	movs	r2, #15
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a40      	ldr	r2, [pc, #256]	; (8002e4c <HAL_GPIO_Init+0x2c0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d013      	beq.n	8002d78 <HAL_GPIO_Init+0x1ec>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3f      	ldr	r2, [pc, #252]	; (8002e50 <HAL_GPIO_Init+0x2c4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00d      	beq.n	8002d74 <HAL_GPIO_Init+0x1e8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3e      	ldr	r2, [pc, #248]	; (8002e54 <HAL_GPIO_Init+0x2c8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d007      	beq.n	8002d70 <HAL_GPIO_Init+0x1e4>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3d      	ldr	r2, [pc, #244]	; (8002e58 <HAL_GPIO_Init+0x2cc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d101      	bne.n	8002d6c <HAL_GPIO_Init+0x1e0>
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e006      	b.n	8002d7a <HAL_GPIO_Init+0x1ee>
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	e004      	b.n	8002d7a <HAL_GPIO_Init+0x1ee>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e002      	b.n	8002d7a <HAL_GPIO_Init+0x1ee>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_GPIO_Init+0x1ee>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	f002 0203 	and.w	r2, r2, #3
 8002d80:	0092      	lsls	r2, r2, #2
 8002d82:	4093      	lsls	r3, r2
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d8a:	492f      	ldr	r1, [pc, #188]	; (8002e48 <HAL_GPIO_Init+0x2bc>)
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	3302      	adds	r3, #2
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002da4:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	492c      	ldr	r1, [pc, #176]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]
 8002db0:	e006      	b.n	8002dc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002db2:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	4928      	ldr	r1, [pc, #160]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d006      	beq.n	8002dda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dcc:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	4922      	ldr	r1, [pc, #136]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60cb      	str	r3, [r1, #12]
 8002dd8:	e006      	b.n	8002de8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dda:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	491e      	ldr	r1, [pc, #120]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d006      	beq.n	8002e02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4918      	ldr	r1, [pc, #96]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
 8002e00:	e006      	b.n	8002e10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e02:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	4914      	ldr	r1, [pc, #80]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d021      	beq.n	8002e60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	490e      	ldr	r1, [pc, #56]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
 8002e28:	e021      	b.n	8002e6e <HAL_GPIO_Init+0x2e2>
 8002e2a:	bf00      	nop
 8002e2c:	10320000 	.word	0x10320000
 8002e30:	10310000 	.word	0x10310000
 8002e34:	10220000 	.word	0x10220000
 8002e38:	10210000 	.word	0x10210000
 8002e3c:	10120000 	.word	0x10120000
 8002e40:	10110000 	.word	0x10110000
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40010000 	.word	0x40010000
 8002e4c:	40010800 	.word	0x40010800
 8002e50:	40010c00 	.word	0x40010c00
 8002e54:	40011000 	.word	0x40011000
 8002e58:	40011400 	.word	0x40011400
 8002e5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	4909      	ldr	r1, [pc, #36]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	3301      	adds	r3, #1
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f47f ae8e 	bne.w	8002ba0 <HAL_GPIO_Init+0x14>
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	372c      	adds	r7, #44	; 0x2c
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	40010400 	.word	0x40010400

08002e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ea4:	787b      	ldrb	r3, [r7, #1]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eaa:	887a      	ldrh	r2, [r7, #2]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002eb0:	e003      	b.n	8002eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	041a      	lsls	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	611a      	str	r2, [r3, #16]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d006      	beq.n	8002ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eda:	4a05      	ldr	r2, [pc, #20]	; (8002ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f806 	bl	8002ef4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40010400 	.word	0x40010400

08002ef4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e272      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 8087 	beq.w	8003036 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f28:	4b92      	ldr	r3, [pc, #584]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d00c      	beq.n	8002f4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f34:	4b8f      	ldr	r3, [pc, #572]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d112      	bne.n	8002f66 <HAL_RCC_OscConfig+0x5e>
 8002f40:	4b8c      	ldr	r3, [pc, #560]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4c:	d10b      	bne.n	8002f66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4e:	4b89      	ldr	r3, [pc, #548]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d06c      	beq.n	8003034 <HAL_RCC_OscConfig+0x12c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d168      	bne.n	8003034 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e24c      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6e:	d106      	bne.n	8002f7e <HAL_RCC_OscConfig+0x76>
 8002f70:	4b80      	ldr	r3, [pc, #512]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a7f      	ldr	r2, [pc, #508]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	e02e      	b.n	8002fdc <HAL_RCC_OscConfig+0xd4>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x98>
 8002f86:	4b7b      	ldr	r3, [pc, #492]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a7a      	ldr	r2, [pc, #488]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4b78      	ldr	r3, [pc, #480]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a77      	ldr	r2, [pc, #476]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e01d      	b.n	8002fdc <HAL_RCC_OscConfig+0xd4>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0xbc>
 8002faa:	4b72      	ldr	r3, [pc, #456]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a71      	ldr	r2, [pc, #452]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6e      	ldr	r2, [pc, #440]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e00b      	b.n	8002fdc <HAL_RCC_OscConfig+0xd4>
 8002fc4:	4b6b      	ldr	r3, [pc, #428]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a6a      	ldr	r2, [pc, #424]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4b68      	ldr	r3, [pc, #416]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a67      	ldr	r2, [pc, #412]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d013      	beq.n	800300c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7ff f9f4 	bl	80023d0 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fec:	f7ff f9f0 	bl	80023d0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e200      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffe:	4b5d      	ldr	r3, [pc, #372]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0xe4>
 800300a:	e014      	b.n	8003036 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7ff f9e0 	bl	80023d0 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003014:	f7ff f9dc 	bl	80023d0 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b64      	cmp	r3, #100	; 0x64
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e1ec      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003026:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x10c>
 8003032:	e000      	b.n	8003036 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d063      	beq.n	800310a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003042:	4b4c      	ldr	r3, [pc, #304]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800304e:	4b49      	ldr	r3, [pc, #292]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b08      	cmp	r3, #8
 8003058:	d11c      	bne.n	8003094 <HAL_RCC_OscConfig+0x18c>
 800305a:	4b46      	ldr	r3, [pc, #280]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d116      	bne.n	8003094 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003066:	4b43      	ldr	r3, [pc, #268]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_RCC_OscConfig+0x176>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d001      	beq.n	800307e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e1c0      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307e:	4b3d      	ldr	r3, [pc, #244]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4939      	ldr	r1, [pc, #228]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003092:	e03a      	b.n	800310a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800309c:	4b36      	ldr	r3, [pc, #216]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 800309e:	2201      	movs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a2:	f7ff f995 	bl	80023d0 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030aa:	f7ff f991 	bl	80023d0 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e1a1      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030bc:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c8:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4927      	ldr	r1, [pc, #156]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
 80030dc:	e015      	b.n	800310a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030de:	4b26      	ldr	r3, [pc, #152]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7ff f974 	bl	80023d0 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ec:	f7ff f970 	bl	80023d0 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e180      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d03a      	beq.n	800318c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d019      	beq.n	8003152 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311e:	4b17      	ldr	r3, [pc, #92]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003120:	2201      	movs	r2, #1
 8003122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003124:	f7ff f954 	bl	80023d0 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312c:	f7ff f950 	bl	80023d0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e160      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800314a:	2001      	movs	r0, #1
 800314c:	f000 face 	bl	80036ec <RCC_Delay>
 8003150:	e01c      	b.n	800318c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003152:	4b0a      	ldr	r3, [pc, #40]	; (800317c <HAL_RCC_OscConfig+0x274>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003158:	f7ff f93a 	bl	80023d0 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315e:	e00f      	b.n	8003180 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003160:	f7ff f936 	bl	80023d0 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d908      	bls.n	8003180 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e146      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
 8003178:	42420000 	.word	0x42420000
 800317c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003180:	4b92      	ldr	r3, [pc, #584]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1e9      	bne.n	8003160 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80a6 	beq.w	80032e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319e:	4b8b      	ldr	r3, [pc, #556]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10d      	bne.n	80031c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	4b88      	ldr	r3, [pc, #544]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	4a87      	ldr	r2, [pc, #540]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b4:	61d3      	str	r3, [r2, #28]
 80031b6:	4b85      	ldr	r3, [pc, #532]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c2:	2301      	movs	r3, #1
 80031c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c6:	4b82      	ldr	r3, [pc, #520]	; (80033d0 <HAL_RCC_OscConfig+0x4c8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d118      	bne.n	8003204 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031d2:	4b7f      	ldr	r3, [pc, #508]	; (80033d0 <HAL_RCC_OscConfig+0x4c8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a7e      	ldr	r2, [pc, #504]	; (80033d0 <HAL_RCC_OscConfig+0x4c8>)
 80031d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031de:	f7ff f8f7 	bl	80023d0 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e6:	f7ff f8f3 	bl	80023d0 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b64      	cmp	r3, #100	; 0x64
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e103      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f8:	4b75      	ldr	r3, [pc, #468]	; (80033d0 <HAL_RCC_OscConfig+0x4c8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d106      	bne.n	800321a <HAL_RCC_OscConfig+0x312>
 800320c:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	4a6e      	ldr	r2, [pc, #440]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6213      	str	r3, [r2, #32]
 8003218:	e02d      	b.n	8003276 <HAL_RCC_OscConfig+0x36e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10c      	bne.n	800323c <HAL_RCC_OscConfig+0x334>
 8003222:	4b6a      	ldr	r3, [pc, #424]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4a69      	ldr	r2, [pc, #420]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6213      	str	r3, [r2, #32]
 800322e:	4b67      	ldr	r3, [pc, #412]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	4a66      	ldr	r2, [pc, #408]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003234:	f023 0304 	bic.w	r3, r3, #4
 8003238:	6213      	str	r3, [r2, #32]
 800323a:	e01c      	b.n	8003276 <HAL_RCC_OscConfig+0x36e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b05      	cmp	r3, #5
 8003242:	d10c      	bne.n	800325e <HAL_RCC_OscConfig+0x356>
 8003244:	4b61      	ldr	r3, [pc, #388]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4a60      	ldr	r2, [pc, #384]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 800324a:	f043 0304 	orr.w	r3, r3, #4
 800324e:	6213      	str	r3, [r2, #32]
 8003250:	4b5e      	ldr	r3, [pc, #376]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4a5d      	ldr	r2, [pc, #372]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6213      	str	r3, [r2, #32]
 800325c:	e00b      	b.n	8003276 <HAL_RCC_OscConfig+0x36e>
 800325e:	4b5b      	ldr	r3, [pc, #364]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	4a5a      	ldr	r2, [pc, #360]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	6213      	str	r3, [r2, #32]
 800326a:	4b58      	ldr	r3, [pc, #352]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4a57      	ldr	r2, [pc, #348]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003270:	f023 0304 	bic.w	r3, r3, #4
 8003274:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d015      	beq.n	80032aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327e:	f7ff f8a7 	bl	80023d0 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003284:	e00a      	b.n	800329c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7ff f8a3 	bl	80023d0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f241 3288 	movw	r2, #5000	; 0x1388
 8003294:	4293      	cmp	r3, r2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0b1      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329c:	4b4b      	ldr	r3, [pc, #300]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ee      	beq.n	8003286 <HAL_RCC_OscConfig+0x37e>
 80032a8:	e014      	b.n	80032d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032aa:	f7ff f891 	bl	80023d0 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7ff f88d 	bl	80023d0 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e09b      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c8:	4b40      	ldr	r3, [pc, #256]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1ee      	bne.n	80032b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d105      	bne.n	80032e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032da:	4b3c      	ldr	r3, [pc, #240]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	4a3b      	ldr	r2, [pc, #236]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8087 	beq.w	80033fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f0:	4b36      	ldr	r3, [pc, #216]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d061      	beq.n	80033c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d146      	bne.n	8003392 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003304:	4b33      	ldr	r3, [pc, #204]	; (80033d4 <HAL_RCC_OscConfig+0x4cc>)
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330a:	f7ff f861 	bl	80023d0 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003312:	f7ff f85d 	bl	80023d0 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e06d      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003324:	4b29      	ldr	r3, [pc, #164]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1f0      	bne.n	8003312 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003338:	d108      	bne.n	800334c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	4921      	ldr	r1, [pc, #132]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800334c:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a19      	ldr	r1, [r3, #32]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	430b      	orrs	r3, r1
 800335e:	491b      	ldr	r1, [pc, #108]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003364:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_RCC_OscConfig+0x4cc>)
 8003366:	2201      	movs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7ff f831 	bl	80023d0 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003372:	f7ff f82d 	bl	80023d0 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e03d      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x46a>
 8003390:	e035      	b.n	80033fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003392:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <HAL_RCC_OscConfig+0x4cc>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7ff f81a 	bl	80023d0 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7ff f816 	bl	80023d0 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e026      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_RCC_OscConfig+0x4c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x498>
 80033be:	e01e      	b.n	80033fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e019      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40007000 	.word	0x40007000
 80033d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_OscConfig+0x500>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d106      	bne.n	80033fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000

0800340c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0d0      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003420:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d910      	bls.n	8003450 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b67      	ldr	r3, [pc, #412]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 0207 	bic.w	r2, r3, #7
 8003436:	4965      	ldr	r1, [pc, #404]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b63      	ldr	r3, [pc, #396]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0b8      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003468:	4b59      	ldr	r3, [pc, #356]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4a58      	ldr	r2, [pc, #352]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003472:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003480:	4b53      	ldr	r3, [pc, #332]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4a52      	ldr	r2, [pc, #328]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800348a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348c:	4b50      	ldr	r3, [pc, #320]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	494d      	ldr	r1, [pc, #308]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	4313      	orrs	r3, r2
 800349c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d040      	beq.n	800352c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	4b47      	ldr	r3, [pc, #284]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d115      	bne.n	80034ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e07f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ca:	4b41      	ldr	r3, [pc, #260]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e073      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034da:	4b3d      	ldr	r3, [pc, #244]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e06b      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ea:	4b39      	ldr	r3, [pc, #228]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f023 0203 	bic.w	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4936      	ldr	r1, [pc, #216]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034fc:	f7fe ff68 	bl	80023d0 <HAL_GetTick>
 8003500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	e00a      	b.n	800351a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003504:	f7fe ff64 	bl	80023d0 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e053      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 020c 	and.w	r2, r3, #12
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	429a      	cmp	r2, r3
 800352a:	d1eb      	bne.n	8003504 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800352c:	4b27      	ldr	r3, [pc, #156]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d210      	bcs.n	800355c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b24      	ldr	r3, [pc, #144]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 0207 	bic.w	r2, r3, #7
 8003542:	4922      	ldr	r1, [pc, #136]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e032      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003568:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4916      	ldr	r1, [pc, #88]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003586:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	490e      	ldr	r1, [pc, #56]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	4313      	orrs	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800359a:	f000 f821 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 800359e:	4602      	mov	r2, r0
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	490a      	ldr	r1, [pc, #40]	; (80035d4 <HAL_RCC_ClockConfig+0x1c8>)
 80035ac:	5ccb      	ldrb	r3, [r1, r3]
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <HAL_RCC_ClockConfig+0x1cc>)
 80035b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_RCC_ClockConfig+0x1d0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe fec6 	bl	800234c <HAL_InitTick>

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40022000 	.word	0x40022000
 80035d0:	40021000 	.word	0x40021000
 80035d4:	08004c30 	.word	0x08004c30
 80035d8:	2000001c 	.word	0x2000001c
 80035dc:	20000020 	.word	0x20000020

080035e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <HAL_RCC_GetSysClockFreq+0x94>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b04      	cmp	r3, #4
 8003608:	d002      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x30>
 800360a:	2b08      	cmp	r3, #8
 800360c:	d003      	beq.n	8003616 <HAL_RCC_GetSysClockFreq+0x36>
 800360e:	e027      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003610:	4b19      	ldr	r3, [pc, #100]	; (8003678 <HAL_RCC_GetSysClockFreq+0x98>)
 8003612:	613b      	str	r3, [r7, #16]
      break;
 8003614:	e027      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	0c9b      	lsrs	r3, r3, #18
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	4a17      	ldr	r2, [pc, #92]	; (800367c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003620:	5cd3      	ldrb	r3, [r2, r3]
 8003622:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d010      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_RCC_GetSysClockFreq+0x94>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	0c5b      	lsrs	r3, r3, #17
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	4a11      	ldr	r2, [pc, #68]	; (8003680 <HAL_RCC_GetSysClockFreq+0xa0>)
 800363a:	5cd3      	ldrb	r3, [r2, r3]
 800363c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <HAL_RCC_GetSysClockFreq+0x98>)
 8003642:	fb03 f202 	mul.w	r2, r3, r2
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	e004      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003654:	fb02 f303 	mul.w	r3, r2, r3
 8003658:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	613b      	str	r3, [r7, #16]
      break;
 800365e:	e002      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCC_GetSysClockFreq+0x98>)
 8003662:	613b      	str	r3, [r7, #16]
      break;
 8003664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003666:	693b      	ldr	r3, [r7, #16]
}
 8003668:	4618      	mov	r0, r3
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40021000 	.word	0x40021000
 8003678:	007a1200 	.word	0x007a1200
 800367c:	08004c48 	.word	0x08004c48
 8003680:	08004c58 	.word	0x08004c58
 8003684:	003d0900 	.word	0x003d0900

08003688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800368c:	4b02      	ldr	r3, [pc, #8]	; (8003698 <HAL_RCC_GetHCLKFreq+0x10>)
 800368e:	681b      	ldr	r3, [r3, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr
 8003698:	2000001c 	.word	0x2000001c

0800369c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036a0:	f7ff fff2 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4903      	ldr	r1, [pc, #12]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021000 	.word	0x40021000
 80036c0:	08004c40 	.word	0x08004c40

080036c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036c8:	f7ff ffde 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80036cc:	4602      	mov	r2, r0
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	0adb      	lsrs	r3, r3, #11
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	4903      	ldr	r1, [pc, #12]	; (80036e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036da:	5ccb      	ldrb	r3, [r1, r3]
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40021000 	.word	0x40021000
 80036e8:	08004c40 	.word	0x08004c40

080036ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <RCC_Delay+0x34>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <RCC_Delay+0x38>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	0a5b      	lsrs	r3, r3, #9
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	fb02 f303 	mul.w	r3, r2, r3
 8003706:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003708:	bf00      	nop
  }
  while (Delay --);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1e5a      	subs	r2, r3, #1
 800370e:	60fa      	str	r2, [r7, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f9      	bne.n	8003708 <RCC_Delay+0x1c>
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr
 8003720:	2000001c 	.word	0x2000001c
 8003724:	10624dd3 	.word	0x10624dd3

08003728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e042      	b.n	80037c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fe fc6e 	bl	8002030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2224      	movs	r2, #36	; 0x24
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800376a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 ff2f 	bl	80045d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08c      	sub	sp, #48	; 0x30
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	4613      	mov	r3, r2
 80037d4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b20      	cmp	r3, #32
 80037e0:	d156      	bne.n	8003890 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_UART_Transmit_DMA+0x26>
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e04f      	b.n	8003892 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	88fa      	ldrh	r2, [r7, #6]
 80037fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	88fa      	ldrh	r2, [r7, #6]
 8003802:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2221      	movs	r2, #33	; 0x21
 800380e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	4a21      	ldr	r2, [pc, #132]	; (800389c <HAL_UART_Transmit_DMA+0xd4>)
 8003818:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	4a20      	ldr	r2, [pc, #128]	; (80038a0 <HAL_UART_Transmit_DMA+0xd8>)
 8003820:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	4a1f      	ldr	r2, [pc, #124]	; (80038a4 <HAL_UART_Transmit_DMA+0xdc>)
 8003828:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	2200      	movs	r2, #0
 8003830:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003832:	f107 0308 	add.w	r3, r7, #8
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3304      	adds	r3, #4
 8003846:	461a      	mov	r2, r3
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	f7fe ff57 	bl	80026fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003856:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3314      	adds	r3, #20
 800385e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	617b      	str	r3, [r7, #20]
   return(result);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3314      	adds	r3, #20
 8003876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003878:	627a      	str	r2, [r7, #36]	; 0x24
 800387a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6a39      	ldr	r1, [r7, #32]
 800387e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	61fb      	str	r3, [r7, #28]
   return(result);
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e5      	bne.n	8003858 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	e000      	b.n	8003892 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003890:	2302      	movs	r3, #2
  }
}
 8003892:	4618      	mov	r0, r3
 8003894:	3730      	adds	r7, #48	; 0x30
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	08003e65 	.word	0x08003e65
 80038a0:	08003eff 	.word	0x08003eff
 80038a4:	08004083 	.word	0x08004083

080038a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d112      	bne.n	80038e8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_UART_Receive_DMA+0x26>
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e00b      	b.n	80038ea <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	461a      	mov	r2, r3
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fc1a 	bl	8004118 <UART_Start_Receive_DMA>
 80038e4:	4603      	mov	r3, r0
 80038e6:	e000      	b.n	80038ea <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b0ba      	sub	sp, #232	; 0xe8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800391a:	2300      	movs	r3, #0
 800391c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003920:	2300      	movs	r3, #0
 8003922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10f      	bne.n	800395a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800393a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_UART_IRQHandler+0x66>
 8003946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fd7e 	bl	8004454 <UART_Receive_IT>
      return;
 8003958:	e25b      	b.n	8003e12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800395a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80de 	beq.w	8003b20 <HAL_UART_IRQHandler+0x22c>
 8003964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d106      	bne.n	800397e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003974:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80d1 	beq.w	8003b20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_UART_IRQHandler+0xae>
 800398a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f043 0201 	orr.w	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_UART_IRQHandler+0xd2>
 80039ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	f043 0202 	orr.w	r2, r3, #2
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_UART_IRQHandler+0xf6>
 80039d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f043 0204 	orr.w	r2, r3, #4
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d011      	beq.n	8003a1a <HAL_UART_IRQHandler+0x126>
 80039f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d105      	bne.n	8003a0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	f043 0208 	orr.w	r2, r3, #8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 81f2 	beq.w	8003e08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_UART_IRQHandler+0x14e>
 8003a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fd09 	bl	8004454 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <HAL_UART_IRQHandler+0x17a>
 8003a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d04f      	beq.n	8003b0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fc13 	bl	800429a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d041      	beq.n	8003b06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3314      	adds	r3, #20
 8003a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3314      	adds	r3, #20
 8003aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003aae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1d9      	bne.n	8003a82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d013      	beq.n	8003afe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	4a7e      	ldr	r2, [pc, #504]	; (8003cd4 <HAL_UART_IRQHandler+0x3e0>)
 8003adc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe fea6 	bl	8002834 <HAL_DMA_Abort_IT>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003af8:	4610      	mov	r0, r2
 8003afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	e00e      	b.n	8003b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f99c 	bl	8003e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b04:	e00a      	b.n	8003b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f998 	bl	8003e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0c:	e006      	b.n	8003b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f994 	bl	8003e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b1a:	e175      	b.n	8003e08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	bf00      	nop
    return;
 8003b1e:	e173      	b.n	8003e08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	f040 814f 	bne.w	8003dc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8148 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8141 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80b6 	beq.w	8003cd8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8145 	beq.w	8003e0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	f080 813e 	bcs.w	8003e0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	f000 8088 	beq.w	8003cb4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bd0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1d9      	bne.n	8003ba4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3314      	adds	r3, #20
 8003bf6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3314      	adds	r3, #20
 8003c10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e1      	bne.n	8003bf0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3314      	adds	r3, #20
 8003c32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3314      	adds	r3, #20
 8003c4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e3      	bne.n	8003c2c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c84:	f023 0310 	bic.w	r3, r3, #16
 8003c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330c      	adds	r3, #12
 8003c92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c96:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c98:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e3      	bne.n	8003c72 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe fd84 	bl	80027bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	4619      	mov	r1, r3
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f8bf 	bl	8003e4e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cd0:	e09c      	b.n	8003e0c <HAL_UART_IRQHandler+0x518>
 8003cd2:	bf00      	nop
 8003cd4:	0800435f 	.word	0x0800435f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 808e 	beq.w	8003e10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8089 	beq.w	8003e10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	330c      	adds	r3, #12
 8003d04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d22:	647a      	str	r2, [r7, #68]	; 0x44
 8003d24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e3      	bne.n	8003cfe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3314      	adds	r3, #20
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	623b      	str	r3, [r7, #32]
   return(result);
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3314      	adds	r3, #20
 8003d56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d5a:	633a      	str	r2, [r7, #48]	; 0x30
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e3      	bne.n	8003d36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0310 	bic.w	r3, r3, #16
 8003d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003da0:	61fa      	str	r2, [r7, #28]
 8003da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	69b9      	ldr	r1, [r7, #24]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	617b      	str	r3, [r7, #20]
   return(result);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e3      	bne.n	8003d7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f844 	bl	8003e4e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dc6:	e023      	b.n	8003e10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d009      	beq.n	8003de8 <HAL_UART_IRQHandler+0x4f4>
 8003dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fad0 	bl	8004386 <UART_Transmit_IT>
    return;
 8003de6:	e014      	b.n	8003e12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00e      	beq.n	8003e12 <HAL_UART_IRQHandler+0x51e>
 8003df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fb0f 	bl	8004424 <UART_EndTransmit_IT>
    return;
 8003e06:	e004      	b.n	8003e12 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e08:	bf00      	nop
 8003e0a:	e002      	b.n	8003e12 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e0c:	bf00      	nop
 8003e0e:	e000      	b.n	8003e12 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e10:	bf00      	nop
  }
}
 8003e12:	37e8      	adds	r7, #232	; 0xe8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr

08003e4e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b090      	sub	sp, #64	; 0x40
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d137      	bne.n	8003ef0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e82:	2200      	movs	r2, #0
 8003e84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	623b      	str	r3, [r7, #32]
   return(result);
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3314      	adds	r3, #20
 8003ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ea6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e5      	bne.n	8003e86 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eda:	61fa      	str	r2, [r7, #28]
 8003edc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	69b9      	ldr	r1, [r7, #24]
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e5      	bne.n	8003eba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003eee:	e002      	b.n	8003ef6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003ef0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003ef2:	f7fd fb29 	bl	8001548 <HAL_UART_TxCpltCallback>
}
 8003ef6:	bf00      	nop
 8003ef8:	3740      	adds	r7, #64	; 0x40
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff ff83 	bl	8003e18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b09c      	sub	sp, #112	; 0x70
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d172      	bne.n	800401c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f38:	2200      	movs	r2, #0
 8003f3a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	330c      	adds	r3, #12
 8003f5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f64:	e841 2300 	strex	r3, r2, [r1]
 8003f68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e5      	bne.n	8003f3c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3314      	adds	r3, #20
 8003f76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	e853 3f00 	ldrex	r3, [r3]
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f82:	f023 0301 	bic.w	r3, r3, #1
 8003f86:	667b      	str	r3, [r7, #100]	; 0x64
 8003f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3314      	adds	r3, #20
 8003f8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f90:	647a      	str	r2, [r7, #68]	; 0x44
 8003f92:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f98:	e841 2300 	strex	r3, r2, [r1]
 8003f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e5      	bne.n	8003f70 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3314      	adds	r3, #20
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	623b      	str	r3, [r7, #32]
   return(result);
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fba:	663b      	str	r3, [r7, #96]	; 0x60
 8003fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3314      	adds	r3, #20
 8003fc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fc4:	633a      	str	r2, [r7, #48]	; 0x30
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e5      	bne.n	8003fa4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d119      	bne.n	800401c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0310 	bic.w	r3, r3, #16
 8003ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004008:	61fa      	str	r2, [r7, #28]
 800400a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	69b9      	ldr	r1, [r7, #24]
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	617b      	str	r3, [r7, #20]
   return(result);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e5      	bne.n	8003fe8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800401c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401e:	2200      	movs	r2, #0
 8004020:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	2b01      	cmp	r3, #1
 8004028:	d106      	bne.n	8004038 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800402a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800402e:	4619      	mov	r1, r3
 8004030:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004032:	f7ff ff0c 	bl	8003e4e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004036:	e002      	b.n	800403e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004038:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800403a:	f7fd fa97 	bl	800156c <HAL_UART_RxCpltCallback>
}
 800403e:	bf00      	nop
 8004040:	3770      	adds	r7, #112	; 0x70
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	2b01      	cmp	r3, #1
 8004060:	d108      	bne.n	8004074 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004066:	085b      	lsrs	r3, r3, #1
 8004068:	b29b      	uxth	r3, r3
 800406a:	4619      	mov	r1, r3
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f7ff feee 	bl	8003e4e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004072:	e002      	b.n	800407a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7ff fed8 	bl	8003e2a <HAL_UART_RxHalfCpltCallback>
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409e:	2b00      	cmp	r3, #0
 80040a0:	bf14      	ite	ne
 80040a2:	2301      	movne	r3, #1
 80040a4:	2300      	moveq	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b21      	cmp	r3, #33	; 0x21
 80040b4:	d108      	bne.n	80040c8 <UART_DMAError+0x46>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2200      	movs	r2, #0
 80040c0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80040c2:	68b8      	ldr	r0, [r7, #8]
 80040c4:	f000 f8c2 	bl	800424c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	bf14      	ite	ne
 80040d6:	2301      	movne	r3, #1
 80040d8:	2300      	moveq	r3, #0
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b22      	cmp	r3, #34	; 0x22
 80040e8:	d108      	bne.n	80040fc <UART_DMAError+0x7a>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2200      	movs	r2, #0
 80040f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80040f6:	68b8      	ldr	r0, [r7, #8]
 80040f8:	f000 f8cf 	bl	800429a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004100:	f043 0210 	orr.w	r2, r3, #16
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004108:	68b8      	ldr	r0, [r7, #8]
 800410a:	f7ff fe97 	bl	8003e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b098      	sub	sp, #96	; 0x60
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	88fa      	ldrh	r2, [r7, #6]
 8004130:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2222      	movs	r2, #34	; 0x22
 800413c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004144:	4a3e      	ldr	r2, [pc, #248]	; (8004240 <UART_Start_Receive_DMA+0x128>)
 8004146:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414c:	4a3d      	ldr	r2, [pc, #244]	; (8004244 <UART_Start_Receive_DMA+0x12c>)
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004154:	4a3c      	ldr	r2, [pc, #240]	; (8004248 <UART_Start_Receive_DMA+0x130>)
 8004156:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	2200      	movs	r2, #0
 800415e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004160:	f107 0308 	add.w	r3, r7, #8
 8004164:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3304      	adds	r3, #4
 8004170:	4619      	mov	r1, r3
 8004172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	88fb      	ldrh	r3, [r7, #6]
 8004178:	f7fe fac0 	bl	80026fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800417c:	2300      	movs	r3, #0
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d019      	beq.n	80041ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	330c      	adds	r3, #12
 80041b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80041bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80041c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80041c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e5      	bne.n	800419a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3314      	adds	r3, #20
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	657b      	str	r3, [r7, #84]	; 0x54
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3314      	adds	r3, #20
 80041ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80041f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e5      	bne.n	80041ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3314      	adds	r3, #20
 8004208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	617b      	str	r3, [r7, #20]
   return(result);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004218:	653b      	str	r3, [r7, #80]	; 0x50
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3314      	adds	r3, #20
 8004220:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004222:	627a      	str	r2, [r7, #36]	; 0x24
 8004224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6a39      	ldr	r1, [r7, #32]
 8004228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e5      	bne.n	8004202 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3760      	adds	r7, #96	; 0x60
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	08003f1b 	.word	0x08003f1b
 8004244:	08004047 	.word	0x08004047
 8004248:	08004083 	.word	0x08004083

0800424c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800424c:	b480      	push	{r7}
 800424e:	b089      	sub	sp, #36	; 0x24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	60bb      	str	r3, [r7, #8]
   return(result);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	330c      	adds	r3, #12
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	61ba      	str	r2, [r7, #24]
 8004276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6979      	ldr	r1, [r7, #20]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	613b      	str	r3, [r7, #16]
   return(result);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e5      	bne.n	8004254 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004290:	bf00      	nop
 8004292:	3724      	adds	r7, #36	; 0x24
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr

0800429a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800429a:	b480      	push	{r7}
 800429c:	b095      	sub	sp, #84	; 0x54
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	330c      	adds	r3, #12
 80042a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	330c      	adds	r3, #12
 80042c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042c2:	643a      	str	r2, [r7, #64]	; 0x40
 80042c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e5      	bne.n	80042a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3314      	adds	r3, #20
 80042dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3314      	adds	r3, #20
 80042f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e5      	bne.n	80042d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	2b01      	cmp	r3, #1
 8004310:	d119      	bne.n	8004346 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	330c      	adds	r3, #12
 8004318:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	60bb      	str	r3, [r7, #8]
   return(result);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f023 0310 	bic.w	r3, r3, #16
 8004328:	647b      	str	r3, [r7, #68]	; 0x44
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	330c      	adds	r3, #12
 8004330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004332:	61ba      	str	r2, [r7, #24]
 8004334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6979      	ldr	r1, [r7, #20]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	613b      	str	r3, [r7, #16]
   return(result);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e5      	bne.n	8004312 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004354:	bf00      	nop
 8004356:	3754      	adds	r7, #84	; 0x54
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr

0800435e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff fd5f 	bl	8003e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b21      	cmp	r3, #33	; 0x21
 8004398:	d13e      	bne.n	8004418 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a2:	d114      	bne.n	80043ce <UART_Transmit_IT+0x48>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d110      	bne.n	80043ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	1c9a      	adds	r2, r3, #2
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	621a      	str	r2, [r3, #32]
 80043cc:	e008      	b.n	80043e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	1c59      	adds	r1, r3, #1
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6211      	str	r1, [r2, #32]
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4619      	mov	r1, r3
 80043ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10f      	bne.n	8004414 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004402:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004412:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e000      	b.n	800441a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004418:	2302      	movs	r3, #2
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7fd f87f 	bl	8001548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08c      	sub	sp, #48	; 0x30
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b22      	cmp	r3, #34	; 0x22
 8004466:	f040 80ae 	bne.w	80045c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004472:	d117      	bne.n	80044a4 <UART_Receive_IT+0x50>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d113      	bne.n	80044a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800447c:	2300      	movs	r3, #0
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	b29b      	uxth	r3, r3
 800448e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004492:	b29a      	uxth	r2, r3
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	1c9a      	adds	r2, r3, #2
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	629a      	str	r2, [r3, #40]	; 0x28
 80044a2:	e026      	b.n	80044f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b6:	d007      	beq.n	80044c8 <UART_Receive_IT+0x74>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <UART_Receive_IT+0x82>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	e008      	b.n	80044e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	4619      	mov	r1, r3
 8004500:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004502:	2b00      	cmp	r3, #0
 8004504:	d15d      	bne.n	80045c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0220 	bic.w	r2, r2, #32
 8004514:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004524:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	2b01      	cmp	r3, #1
 800454a:	d135      	bne.n	80045b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	613b      	str	r3, [r7, #16]
   return(result);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f023 0310 	bic.w	r3, r3, #16
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004572:	623a      	str	r2, [r7, #32]
 8004574:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	69f9      	ldr	r1, [r7, #28]
 8004578:	6a3a      	ldr	r2, [r7, #32]
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e5      	bne.n	8004552 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b10      	cmp	r3, #16
 8004592:	d10a      	bne.n	80045aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045ae:	4619      	mov	r1, r3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff fc4c 	bl	8003e4e <HAL_UARTEx_RxEventCallback>
 80045b6:	e002      	b.n	80045be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7fc ffd7 	bl	800156c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e002      	b.n	80045c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	e000      	b.n	80045c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045c6:	2302      	movs	r3, #2
  }
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3730      	adds	r7, #48	; 0x30
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800460a:	f023 030c 	bic.w	r3, r3, #12
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	430b      	orrs	r3, r1
 8004616:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a2c      	ldr	r2, [pc, #176]	; (80046e4 <UART_SetConfig+0x114>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d103      	bne.n	8004640 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004638:	f7ff f844 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	e002      	b.n	8004646 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004640:	f7ff f82c 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8004644:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	009a      	lsls	r2, r3, #2
 8004650:	441a      	add	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	fbb2 f3f3 	udiv	r3, r2, r3
 800465c:	4a22      	ldr	r2, [pc, #136]	; (80046e8 <UART_SetConfig+0x118>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	0119      	lsls	r1, r3, #4
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	009a      	lsls	r2, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	fbb2 f2f3 	udiv	r2, r2, r3
 800467c:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <UART_SetConfig+0x118>)
 800467e:	fba3 0302 	umull	r0, r3, r3, r2
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2064      	movs	r0, #100	; 0x64
 8004686:	fb00 f303 	mul.w	r3, r0, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	3332      	adds	r3, #50	; 0x32
 8004690:	4a15      	ldr	r2, [pc, #84]	; (80046e8 <UART_SetConfig+0x118>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800469c:	4419      	add	r1, r3
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	009a      	lsls	r2, r3, #2
 80046a8:	441a      	add	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <UART_SetConfig+0x118>)
 80046b6:	fba3 0302 	umull	r0, r3, r3, r2
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	2064      	movs	r0, #100	; 0x64
 80046be:	fb00 f303 	mul.w	r3, r0, r3
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	3332      	adds	r3, #50	; 0x32
 80046c8:	4a07      	ldr	r2, [pc, #28]	; (80046e8 <UART_SetConfig+0x118>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	f003 020f 	and.w	r2, r3, #15
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	440a      	add	r2, r1
 80046da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40013800 	.word	0x40013800
 80046e8:	51eb851f 	.word	0x51eb851f

080046ec <realloc>:
 80046ec:	4b02      	ldr	r3, [pc, #8]	; (80046f8 <realloc+0xc>)
 80046ee:	460a      	mov	r2, r1
 80046f0:	4601      	mov	r1, r0
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	f000 b802 	b.w	80046fc <_realloc_r>
 80046f8:	20000074 	.word	0x20000074

080046fc <_realloc_r>:
 80046fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004700:	4680      	mov	r8, r0
 8004702:	4614      	mov	r4, r2
 8004704:	460e      	mov	r6, r1
 8004706:	b921      	cbnz	r1, 8004712 <_realloc_r+0x16>
 8004708:	4611      	mov	r1, r2
 800470a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800470e:	f000 b8cf 	b.w	80048b0 <_malloc_r>
 8004712:	b92a      	cbnz	r2, 8004720 <_realloc_r+0x24>
 8004714:	f000 f864 	bl	80047e0 <_free_r>
 8004718:	4625      	mov	r5, r4
 800471a:	4628      	mov	r0, r5
 800471c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004720:	f000 f952 	bl	80049c8 <_malloc_usable_size_r>
 8004724:	4284      	cmp	r4, r0
 8004726:	4607      	mov	r7, r0
 8004728:	d802      	bhi.n	8004730 <_realloc_r+0x34>
 800472a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800472e:	d812      	bhi.n	8004756 <_realloc_r+0x5a>
 8004730:	4621      	mov	r1, r4
 8004732:	4640      	mov	r0, r8
 8004734:	f000 f8bc 	bl	80048b0 <_malloc_r>
 8004738:	4605      	mov	r5, r0
 800473a:	2800      	cmp	r0, #0
 800473c:	d0ed      	beq.n	800471a <_realloc_r+0x1e>
 800473e:	42bc      	cmp	r4, r7
 8004740:	4622      	mov	r2, r4
 8004742:	4631      	mov	r1, r6
 8004744:	bf28      	it	cs
 8004746:	463a      	movcs	r2, r7
 8004748:	f000 f83c 	bl	80047c4 <memcpy>
 800474c:	4631      	mov	r1, r6
 800474e:	4640      	mov	r0, r8
 8004750:	f000 f846 	bl	80047e0 <_free_r>
 8004754:	e7e1      	b.n	800471a <_realloc_r+0x1e>
 8004756:	4635      	mov	r5, r6
 8004758:	e7df      	b.n	800471a <_realloc_r+0x1e>

0800475a <memset>:
 800475a:	4603      	mov	r3, r0
 800475c:	4402      	add	r2, r0
 800475e:	4293      	cmp	r3, r2
 8004760:	d100      	bne.n	8004764 <memset+0xa>
 8004762:	4770      	bx	lr
 8004764:	f803 1b01 	strb.w	r1, [r3], #1
 8004768:	e7f9      	b.n	800475e <memset+0x4>
	...

0800476c <__errno>:
 800476c:	4b01      	ldr	r3, [pc, #4]	; (8004774 <__errno+0x8>)
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000074 	.word	0x20000074

08004778 <__libc_init_array>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	2600      	movs	r6, #0
 800477c:	4d0c      	ldr	r5, [pc, #48]	; (80047b0 <__libc_init_array+0x38>)
 800477e:	4c0d      	ldr	r4, [pc, #52]	; (80047b4 <__libc_init_array+0x3c>)
 8004780:	1b64      	subs	r4, r4, r5
 8004782:	10a4      	asrs	r4, r4, #2
 8004784:	42a6      	cmp	r6, r4
 8004786:	d109      	bne.n	800479c <__libc_init_array+0x24>
 8004788:	f000 f936 	bl	80049f8 <_init>
 800478c:	2600      	movs	r6, #0
 800478e:	4d0a      	ldr	r5, [pc, #40]	; (80047b8 <__libc_init_array+0x40>)
 8004790:	4c0a      	ldr	r4, [pc, #40]	; (80047bc <__libc_init_array+0x44>)
 8004792:	1b64      	subs	r4, r4, r5
 8004794:	10a4      	asrs	r4, r4, #2
 8004796:	42a6      	cmp	r6, r4
 8004798:	d105      	bne.n	80047a6 <__libc_init_array+0x2e>
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a0:	4798      	blx	r3
 80047a2:	3601      	adds	r6, #1
 80047a4:	e7ee      	b.n	8004784 <__libc_init_array+0xc>
 80047a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047aa:	4798      	blx	r3
 80047ac:	3601      	adds	r6, #1
 80047ae:	e7f2      	b.n	8004796 <__libc_init_array+0x1e>
 80047b0:	08004c5c 	.word	0x08004c5c
 80047b4:	08004c5c 	.word	0x08004c5c
 80047b8:	08004c5c 	.word	0x08004c5c
 80047bc:	08004c64 	.word	0x08004c64

080047c0 <__retarget_lock_acquire_recursive>:
 80047c0:	4770      	bx	lr

080047c2 <__retarget_lock_release_recursive>:
 80047c2:	4770      	bx	lr

080047c4 <memcpy>:
 80047c4:	440a      	add	r2, r1
 80047c6:	4291      	cmp	r1, r2
 80047c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80047cc:	d100      	bne.n	80047d0 <memcpy+0xc>
 80047ce:	4770      	bx	lr
 80047d0:	b510      	push	{r4, lr}
 80047d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047d6:	4291      	cmp	r1, r2
 80047d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047dc:	d1f9      	bne.n	80047d2 <memcpy+0xe>
 80047de:	bd10      	pop	{r4, pc}

080047e0 <_free_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	4605      	mov	r5, r0
 80047e4:	2900      	cmp	r1, #0
 80047e6:	d040      	beq.n	800486a <_free_r+0x8a>
 80047e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047ec:	1f0c      	subs	r4, r1, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	bfb8      	it	lt
 80047f2:	18e4      	addlt	r4, r4, r3
 80047f4:	f000 f8dc 	bl	80049b0 <__malloc_lock>
 80047f8:	4a1c      	ldr	r2, [pc, #112]	; (800486c <_free_r+0x8c>)
 80047fa:	6813      	ldr	r3, [r2, #0]
 80047fc:	b933      	cbnz	r3, 800480c <_free_r+0x2c>
 80047fe:	6063      	str	r3, [r4, #4]
 8004800:	6014      	str	r4, [r2, #0]
 8004802:	4628      	mov	r0, r5
 8004804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004808:	f000 b8d8 	b.w	80049bc <__malloc_unlock>
 800480c:	42a3      	cmp	r3, r4
 800480e:	d908      	bls.n	8004822 <_free_r+0x42>
 8004810:	6820      	ldr	r0, [r4, #0]
 8004812:	1821      	adds	r1, r4, r0
 8004814:	428b      	cmp	r3, r1
 8004816:	bf01      	itttt	eq
 8004818:	6819      	ldreq	r1, [r3, #0]
 800481a:	685b      	ldreq	r3, [r3, #4]
 800481c:	1809      	addeq	r1, r1, r0
 800481e:	6021      	streq	r1, [r4, #0]
 8004820:	e7ed      	b.n	80047fe <_free_r+0x1e>
 8004822:	461a      	mov	r2, r3
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	b10b      	cbz	r3, 800482c <_free_r+0x4c>
 8004828:	42a3      	cmp	r3, r4
 800482a:	d9fa      	bls.n	8004822 <_free_r+0x42>
 800482c:	6811      	ldr	r1, [r2, #0]
 800482e:	1850      	adds	r0, r2, r1
 8004830:	42a0      	cmp	r0, r4
 8004832:	d10b      	bne.n	800484c <_free_r+0x6c>
 8004834:	6820      	ldr	r0, [r4, #0]
 8004836:	4401      	add	r1, r0
 8004838:	1850      	adds	r0, r2, r1
 800483a:	4283      	cmp	r3, r0
 800483c:	6011      	str	r1, [r2, #0]
 800483e:	d1e0      	bne.n	8004802 <_free_r+0x22>
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	4408      	add	r0, r1
 8004846:	6010      	str	r0, [r2, #0]
 8004848:	6053      	str	r3, [r2, #4]
 800484a:	e7da      	b.n	8004802 <_free_r+0x22>
 800484c:	d902      	bls.n	8004854 <_free_r+0x74>
 800484e:	230c      	movs	r3, #12
 8004850:	602b      	str	r3, [r5, #0]
 8004852:	e7d6      	b.n	8004802 <_free_r+0x22>
 8004854:	6820      	ldr	r0, [r4, #0]
 8004856:	1821      	adds	r1, r4, r0
 8004858:	428b      	cmp	r3, r1
 800485a:	bf01      	itttt	eq
 800485c:	6819      	ldreq	r1, [r3, #0]
 800485e:	685b      	ldreq	r3, [r3, #4]
 8004860:	1809      	addeq	r1, r1, r0
 8004862:	6021      	streq	r1, [r4, #0]
 8004864:	6063      	str	r3, [r4, #4]
 8004866:	6054      	str	r4, [r2, #4]
 8004868:	e7cb      	b.n	8004802 <_free_r+0x22>
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	20000c08 	.word	0x20000c08

08004870 <sbrk_aligned>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	4e0e      	ldr	r6, [pc, #56]	; (80048ac <sbrk_aligned+0x3c>)
 8004874:	460c      	mov	r4, r1
 8004876:	6831      	ldr	r1, [r6, #0]
 8004878:	4605      	mov	r5, r0
 800487a:	b911      	cbnz	r1, 8004882 <sbrk_aligned+0x12>
 800487c:	f000 f8ac 	bl	80049d8 <_sbrk_r>
 8004880:	6030      	str	r0, [r6, #0]
 8004882:	4621      	mov	r1, r4
 8004884:	4628      	mov	r0, r5
 8004886:	f000 f8a7 	bl	80049d8 <_sbrk_r>
 800488a:	1c43      	adds	r3, r0, #1
 800488c:	d00a      	beq.n	80048a4 <sbrk_aligned+0x34>
 800488e:	1cc4      	adds	r4, r0, #3
 8004890:	f024 0403 	bic.w	r4, r4, #3
 8004894:	42a0      	cmp	r0, r4
 8004896:	d007      	beq.n	80048a8 <sbrk_aligned+0x38>
 8004898:	1a21      	subs	r1, r4, r0
 800489a:	4628      	mov	r0, r5
 800489c:	f000 f89c 	bl	80049d8 <_sbrk_r>
 80048a0:	3001      	adds	r0, #1
 80048a2:	d101      	bne.n	80048a8 <sbrk_aligned+0x38>
 80048a4:	f04f 34ff 	mov.w	r4, #4294967295
 80048a8:	4620      	mov	r0, r4
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	20000c0c 	.word	0x20000c0c

080048b0 <_malloc_r>:
 80048b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048b4:	1ccd      	adds	r5, r1, #3
 80048b6:	f025 0503 	bic.w	r5, r5, #3
 80048ba:	3508      	adds	r5, #8
 80048bc:	2d0c      	cmp	r5, #12
 80048be:	bf38      	it	cc
 80048c0:	250c      	movcc	r5, #12
 80048c2:	2d00      	cmp	r5, #0
 80048c4:	4607      	mov	r7, r0
 80048c6:	db01      	blt.n	80048cc <_malloc_r+0x1c>
 80048c8:	42a9      	cmp	r1, r5
 80048ca:	d905      	bls.n	80048d8 <_malloc_r+0x28>
 80048cc:	230c      	movs	r3, #12
 80048ce:	2600      	movs	r6, #0
 80048d0:	603b      	str	r3, [r7, #0]
 80048d2:	4630      	mov	r0, r6
 80048d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049ac <_malloc_r+0xfc>
 80048dc:	f000 f868 	bl	80049b0 <__malloc_lock>
 80048e0:	f8d8 3000 	ldr.w	r3, [r8]
 80048e4:	461c      	mov	r4, r3
 80048e6:	bb5c      	cbnz	r4, 8004940 <_malloc_r+0x90>
 80048e8:	4629      	mov	r1, r5
 80048ea:	4638      	mov	r0, r7
 80048ec:	f7ff ffc0 	bl	8004870 <sbrk_aligned>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	4604      	mov	r4, r0
 80048f4:	d155      	bne.n	80049a2 <_malloc_r+0xf2>
 80048f6:	f8d8 4000 	ldr.w	r4, [r8]
 80048fa:	4626      	mov	r6, r4
 80048fc:	2e00      	cmp	r6, #0
 80048fe:	d145      	bne.n	800498c <_malloc_r+0xdc>
 8004900:	2c00      	cmp	r4, #0
 8004902:	d048      	beq.n	8004996 <_malloc_r+0xe6>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	4631      	mov	r1, r6
 8004908:	4638      	mov	r0, r7
 800490a:	eb04 0903 	add.w	r9, r4, r3
 800490e:	f000 f863 	bl	80049d8 <_sbrk_r>
 8004912:	4581      	cmp	r9, r0
 8004914:	d13f      	bne.n	8004996 <_malloc_r+0xe6>
 8004916:	6821      	ldr	r1, [r4, #0]
 8004918:	4638      	mov	r0, r7
 800491a:	1a6d      	subs	r5, r5, r1
 800491c:	4629      	mov	r1, r5
 800491e:	f7ff ffa7 	bl	8004870 <sbrk_aligned>
 8004922:	3001      	adds	r0, #1
 8004924:	d037      	beq.n	8004996 <_malloc_r+0xe6>
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	442b      	add	r3, r5
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	f8d8 3000 	ldr.w	r3, [r8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d038      	beq.n	80049a6 <_malloc_r+0xf6>
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	42a2      	cmp	r2, r4
 8004938:	d12b      	bne.n	8004992 <_malloc_r+0xe2>
 800493a:	2200      	movs	r2, #0
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	e00f      	b.n	8004960 <_malloc_r+0xb0>
 8004940:	6822      	ldr	r2, [r4, #0]
 8004942:	1b52      	subs	r2, r2, r5
 8004944:	d41f      	bmi.n	8004986 <_malloc_r+0xd6>
 8004946:	2a0b      	cmp	r2, #11
 8004948:	d917      	bls.n	800497a <_malloc_r+0xca>
 800494a:	1961      	adds	r1, r4, r5
 800494c:	42a3      	cmp	r3, r4
 800494e:	6025      	str	r5, [r4, #0]
 8004950:	bf18      	it	ne
 8004952:	6059      	strne	r1, [r3, #4]
 8004954:	6863      	ldr	r3, [r4, #4]
 8004956:	bf08      	it	eq
 8004958:	f8c8 1000 	streq.w	r1, [r8]
 800495c:	5162      	str	r2, [r4, r5]
 800495e:	604b      	str	r3, [r1, #4]
 8004960:	4638      	mov	r0, r7
 8004962:	f104 060b 	add.w	r6, r4, #11
 8004966:	f000 f829 	bl	80049bc <__malloc_unlock>
 800496a:	f026 0607 	bic.w	r6, r6, #7
 800496e:	1d23      	adds	r3, r4, #4
 8004970:	1af2      	subs	r2, r6, r3
 8004972:	d0ae      	beq.n	80048d2 <_malloc_r+0x22>
 8004974:	1b9b      	subs	r3, r3, r6
 8004976:	50a3      	str	r3, [r4, r2]
 8004978:	e7ab      	b.n	80048d2 <_malloc_r+0x22>
 800497a:	42a3      	cmp	r3, r4
 800497c:	6862      	ldr	r2, [r4, #4]
 800497e:	d1dd      	bne.n	800493c <_malloc_r+0x8c>
 8004980:	f8c8 2000 	str.w	r2, [r8]
 8004984:	e7ec      	b.n	8004960 <_malloc_r+0xb0>
 8004986:	4623      	mov	r3, r4
 8004988:	6864      	ldr	r4, [r4, #4]
 800498a:	e7ac      	b.n	80048e6 <_malloc_r+0x36>
 800498c:	4634      	mov	r4, r6
 800498e:	6876      	ldr	r6, [r6, #4]
 8004990:	e7b4      	b.n	80048fc <_malloc_r+0x4c>
 8004992:	4613      	mov	r3, r2
 8004994:	e7cc      	b.n	8004930 <_malloc_r+0x80>
 8004996:	230c      	movs	r3, #12
 8004998:	4638      	mov	r0, r7
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	f000 f80e 	bl	80049bc <__malloc_unlock>
 80049a0:	e797      	b.n	80048d2 <_malloc_r+0x22>
 80049a2:	6025      	str	r5, [r4, #0]
 80049a4:	e7dc      	b.n	8004960 <_malloc_r+0xb0>
 80049a6:	605b      	str	r3, [r3, #4]
 80049a8:	deff      	udf	#255	; 0xff
 80049aa:	bf00      	nop
 80049ac:	20000c08 	.word	0x20000c08

080049b0 <__malloc_lock>:
 80049b0:	4801      	ldr	r0, [pc, #4]	; (80049b8 <__malloc_lock+0x8>)
 80049b2:	f7ff bf05 	b.w	80047c0 <__retarget_lock_acquire_recursive>
 80049b6:	bf00      	nop
 80049b8:	20000c04 	.word	0x20000c04

080049bc <__malloc_unlock>:
 80049bc:	4801      	ldr	r0, [pc, #4]	; (80049c4 <__malloc_unlock+0x8>)
 80049be:	f7ff bf00 	b.w	80047c2 <__retarget_lock_release_recursive>
 80049c2:	bf00      	nop
 80049c4:	20000c04 	.word	0x20000c04

080049c8 <_malloc_usable_size_r>:
 80049c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049cc:	1f18      	subs	r0, r3, #4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bfbc      	itt	lt
 80049d2:	580b      	ldrlt	r3, [r1, r0]
 80049d4:	18c0      	addlt	r0, r0, r3
 80049d6:	4770      	bx	lr

080049d8 <_sbrk_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	2300      	movs	r3, #0
 80049dc:	4d05      	ldr	r5, [pc, #20]	; (80049f4 <_sbrk_r+0x1c>)
 80049de:	4604      	mov	r4, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	602b      	str	r3, [r5, #0]
 80049e4:	f7fd fc0e 	bl	8002204 <_sbrk>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_sbrk_r+0x1a>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_sbrk_r+0x1a>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	20000c00 	.word	0x20000c00

080049f8 <_init>:
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	bf00      	nop
 80049fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fe:	bc08      	pop	{r3}
 8004a00:	469e      	mov	lr, r3
 8004a02:	4770      	bx	lr

08004a04 <_fini>:
 8004a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a06:	bf00      	nop
 8004a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0a:	bc08      	pop	{r3}
 8004a0c:	469e      	mov	lr, r3
 8004a0e:	4770      	bx	lr

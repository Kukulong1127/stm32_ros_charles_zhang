
LED_F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  080049d8  080049d8  000149d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c58  08004c58  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c58  08004c58  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c58  08004c58  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c60  08004c60  00014c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b98  2000005c  08004cc0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bf4  08004cc0  00020bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e332  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002223  00000000  00000000  0002e3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  00030620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f9  00000000  00000000  00030f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177e4  00000000  00000000  00031631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b691  00000000  00000000  00048e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087be3  00000000  00000000  000544a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027e8  00000000  00000000  000dc08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000de874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080049c0 	.word	0x080049c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080049c0 	.word	0x080049c0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f002 f8e4 	bl	800232c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f80b 	bl	800017e <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8a8 	bl	80002bc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800016c:	f000 f880 	bl	8000270 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000170:	f000 f850 	bl	8000214 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  setup();
 8000174:	f001 f9be 	bl	80014f4 <setup>
//	       // Wait for the button to be released to avoid multiple toggles
//	       while(HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_PIN) == GPIO_PIN_RESET) {
//	         // Optionally, add a small delay here as well
//	       }
//	     }
	  loop();
 8000178:	f001 f9cc 	bl	8001514 <loop>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	; 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	; 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f004 fac8 	bl	8004722 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b0:	2300      	movs	r3, #0
 80001b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f002 fe86 	bl	8002ed0 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	bf14      	ite	ne
 80001ca:	2301      	movne	r3, #1
 80001cc:	2300      	moveq	r3, #0
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 80001d4:	f000 f8d6 	bl	8000384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001dc:	2302      	movs	r3, #2
 80001de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2102      	movs	r1, #2
 80001f2:	4618      	mov	r0, r3
 80001f4:	f003 f8ee 	bl	80033d4 <HAL_RCC_ClockConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	bf14      	ite	ne
 80001fe:	2301      	movne	r3, #1
 8000200:	2300      	moveq	r3, #0
 8000202:	b2db      	uxtb	r3, r3
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000208:	f000 f8bc 	bl	8000384 <Error_Handler>
  }
}
 800020c:	bf00      	nop
 800020e:	3740      	adds	r7, #64	; 0x40
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800021a:	4a14      	ldr	r2, [pc, #80]	; (800026c <_ZL19MX_USART2_UART_Initv+0x58>)
 800021c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800021e:	4b12      	ldr	r3, [pc, #72]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000220:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000226:	4b10      	ldr	r3, [pc, #64]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000228:	2200      	movs	r2, #0
 800022a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800022e:	2200      	movs	r2, #0
 8000230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000232:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000234:	2200      	movs	r2, #0
 8000236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000238:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800023a:	220c      	movs	r2, #12
 800023c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800023e:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000240:	2200      	movs	r2, #0
 8000242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000246:	2200      	movs	r2, #0
 8000248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800024a:	4807      	ldr	r0, [pc, #28]	; (8000268 <_ZL19MX_USART2_UART_Initv+0x54>)
 800024c:	f003 fa50 	bl	80036f0 <HAL_UART_Init>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	bf14      	ite	ne
 8000256:	2301      	movne	r3, #1
 8000258:	2300      	moveq	r3, #0
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000260:	f000 f890 	bl	8000384 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000078 	.word	0x20000078
 800026c:	40004400 	.word	0x40004400

08000270 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <_ZL11MX_DMA_Initv+0x48>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a0f      	ldr	r2, [pc, #60]	; (80002b8 <_ZL11MX_DMA_Initv+0x48>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6153      	str	r3, [r2, #20]
 8000282:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <_ZL11MX_DMA_Initv+0x48>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800028e:	2200      	movs	r2, #0
 8000290:	2100      	movs	r1, #0
 8000292:	2010      	movs	r0, #16
 8000294:	f002 f9a7 	bl	80025e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000298:	2010      	movs	r0, #16
 800029a:	f002 f9c0 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800029e:	2200      	movs	r2, #0
 80002a0:	2100      	movs	r1, #0
 80002a2:	2011      	movs	r0, #17
 80002a4:	f002 f99f 	bl	80025e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80002a8:	2011      	movs	r0, #17
 80002aa:	f002 f9b8 	bl	800261e <HAL_NVIC_EnableIRQ>

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000

080002bc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d0:	4b29      	ldr	r3, [pc, #164]	; (8000378 <_ZL12MX_GPIO_Initv+0xbc>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a28      	ldr	r2, [pc, #160]	; (8000378 <_ZL12MX_GPIO_Initv+0xbc>)
 80002d6:	f043 0310 	orr.w	r3, r3, #16
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b26      	ldr	r3, [pc, #152]	; (8000378 <_ZL12MX_GPIO_Initv+0xbc>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0310 	and.w	r3, r3, #16
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e8:	4b23      	ldr	r3, [pc, #140]	; (8000378 <_ZL12MX_GPIO_Initv+0xbc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a22      	ldr	r2, [pc, #136]	; (8000378 <_ZL12MX_GPIO_Initv+0xbc>)
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b20      	ldr	r3, [pc, #128]	; (8000378 <_ZL12MX_GPIO_Initv+0xbc>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0320 	and.w	r3, r3, #32
 80002fc:	60bb      	str	r3, [r7, #8]
 80002fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000300:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <_ZL12MX_GPIO_Initv+0xbc>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a1c      	ldr	r2, [pc, #112]	; (8000378 <_ZL12MX_GPIO_Initv+0xbc>)
 8000306:	f043 0304 	orr.w	r3, r3, #4
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <_ZL12MX_GPIO_Initv+0xbc>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0304 	and.w	r3, r3, #4
 8000314:	607b      	str	r3, [r7, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000318:	4b17      	ldr	r3, [pc, #92]	; (8000378 <_ZL12MX_GPIO_Initv+0xbc>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a16      	ldr	r2, [pc, #88]	; (8000378 <_ZL12MX_GPIO_Initv+0xbc>)
 800031e:	f043 0308 	orr.w	r3, r3, #8
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <_ZL12MX_GPIO_Initv+0xbc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0308 	and.w	r3, r3, #8
 800032c:	603b      	str	r3, [r7, #0]
 800032e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2120      	movs	r1, #32
 8000334:	4811      	ldr	r0, [pc, #68]	; (800037c <_ZL12MX_GPIO_Initv+0xc0>)
 8000336:	f002 fdb3 	bl	8002ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800033a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800033e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	2300      	movs	r3, #0
 8000346:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000348:	f107 0310 	add.w	r3, r7, #16
 800034c:	4619      	mov	r1, r3
 800034e:	480c      	ldr	r0, [pc, #48]	; (8000380 <_ZL12MX_GPIO_Initv+0xc4>)
 8000350:	f002 fc22 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000354:	2320      	movs	r3, #32
 8000356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	2301      	movs	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000360:	2302      	movs	r3, #2
 8000362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000364:	f107 0310 	add.w	r3, r7, #16
 8000368:	4619      	mov	r1, r3
 800036a:	4804      	ldr	r0, [pc, #16]	; (800037c <_ZL12MX_GPIO_Initv+0xc0>)
 800036c:	f002 fc14 	bl	8002b98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000370:	bf00      	nop
 8000372:	3720      	adds	r7, #32
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	40010800 	.word	0x40010800
 8000380:	40011000 	.word	0x40011000

08000384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000388:	b672      	cpsid	i
}
 800038a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800038c:	e7fe      	b.n	800038c <Error_Handler+0x8>

0800038e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800038e:	b480      	push	{r7}
 8000390:	b083      	sub	sp, #12
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2200      	movs	r2, #0
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4618      	mov	r0, r3
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr
	...

080003b0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <_ZN3ros3MsgC1Ev+0x1c>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	08004c1c 	.word	0x08004c1c

080003d0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
      data()
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ffe8 	bl	80003b0 <_ZN3ros3MsgC1Ev>
 80003e0:	4a06      	ldr	r2, [pc, #24]	; (80003fc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	3304      	adds	r3, #4
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ffcf 	bl	800038e <_ZN3ros4TimeC1Ev>
    {
    }
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4618      	mov	r0, r3
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	08004c04 	.word	0x08004c04

08000400 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	6859      	ldr	r1, [r3, #4]
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	683a      	ldr	r2, [r7, #0]
 8000416:	4413      	add	r3, r2
 8000418:	b2ca      	uxtb	r2, r1
 800041a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	0a19      	lsrs	r1, r3, #8
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	3301      	adds	r3, #1
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	4413      	add	r3, r2
 800042a:	b2ca      	uxtb	r2, r1
 800042c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	0c19      	lsrs	r1, r3, #16
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3302      	adds	r3, #2
 8000438:	683a      	ldr	r2, [r7, #0]
 800043a:	4413      	add	r3, r2
 800043c:	b2ca      	uxtb	r2, r1
 800043e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	0e19      	lsrs	r1, r3, #24
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	3303      	adds	r3, #3
 800044a:	683a      	ldr	r2, [r7, #0]
 800044c:	4413      	add	r3, r2
 800044e:	b2ca      	uxtb	r2, r1
 8000450:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	3304      	adds	r3, #4
 8000456:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	6899      	ldr	r1, [r3, #8]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	683a      	ldr	r2, [r7, #0]
 8000460:	4413      	add	r3, r2
 8000462:	b2ca      	uxtb	r2, r1
 8000464:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	0a19      	lsrs	r1, r3, #8
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3301      	adds	r3, #1
 8000470:	683a      	ldr	r2, [r7, #0]
 8000472:	4413      	add	r3, r2
 8000474:	b2ca      	uxtb	r2, r1
 8000476:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	0c19      	lsrs	r1, r3, #16
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	3302      	adds	r3, #2
 8000482:	683a      	ldr	r2, [r7, #0]
 8000484:	4413      	add	r3, r2
 8000486:	b2ca      	uxtb	r2, r1
 8000488:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	0e19      	lsrs	r1, r3, #24
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	3303      	adds	r3, #3
 8000494:	683a      	ldr	r2, [r7, #0]
 8000496:	4413      	add	r3, r2
 8000498:	b2ca      	uxtb	r2, r1
 800049a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	3304      	adds	r3, #4
 80004a0:	60fb      	str	r3, [r7, #12]
      return offset;
 80004a2:	68fb      	ldr	r3, [r7, #12]
    }
 80004a4:	4618      	mov	r0, r3
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80004ae:	b480      	push	{r7}
 80004b0:	b085      	sub	sp, #20
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
 80004b6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	683a      	ldr	r2, [r7, #0]
 80004c0:	4413      	add	r3, r2
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	685a      	ldr	r2, [r3, #4]
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	3301      	adds	r3, #1
 80004d2:	6839      	ldr	r1, [r7, #0]
 80004d4:	440b      	add	r3, r1
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	021b      	lsls	r3, r3, #8
 80004da:	431a      	orrs	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	685a      	ldr	r2, [r3, #4]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	3302      	adds	r3, #2
 80004e8:	6839      	ldr	r1, [r7, #0]
 80004ea:	440b      	add	r3, r1
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	041b      	lsls	r3, r3, #16
 80004f0:	431a      	orrs	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	685a      	ldr	r2, [r3, #4]
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	3303      	adds	r3, #3
 80004fe:	6839      	ldr	r1, [r7, #0]
 8000500:	440b      	add	r3, r1
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	061b      	lsls	r3, r3, #24
 8000506:	431a      	orrs	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3304      	adds	r3, #4
 8000510:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	4413      	add	r3, r2
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	461a      	mov	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689a      	ldr	r2, [r3, #8]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	3301      	adds	r3, #1
 8000528:	6839      	ldr	r1, [r7, #0]
 800052a:	440b      	add	r3, r1
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	021b      	lsls	r3, r3, #8
 8000530:	431a      	orrs	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	689a      	ldr	r2, [r3, #8]
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	3302      	adds	r3, #2
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	440b      	add	r3, r1
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	041b      	lsls	r3, r3, #16
 8000546:	431a      	orrs	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	689a      	ldr	r2, [r3, #8]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	3303      	adds	r3, #3
 8000554:	6839      	ldr	r1, [r7, #0]
 8000556:	440b      	add	r3, r1
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	061b      	lsls	r3, r3, #24
 800055c:	431a      	orrs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	3304      	adds	r3, #4
 8000566:	60fb      	str	r3, [r7, #12]
     return offset;
 8000568:	68fb      	ldr	r3, [r7, #12]
    }
 800056a:	4618      	mov	r0, r3
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	4b02      	ldr	r3, [pc, #8]	; (8000588 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 800057e:	4618      	mov	r0, r3
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	080049d8 	.word	0x080049d8

0800058c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	4b02      	ldr	r3, [pc, #8]	; (80005a0 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	080049e8 	.word	0x080049e8

080005a4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fefe 	bl	80003b0 <_ZN3ros3MsgC1Ev>
 80005b4:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80005c4:	609a      	str	r2, [r3, #8]
      message_type(""),
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80005ca:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80005d0:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
    {
    }
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	08004bec 	.word	0x08004bec
 80005e8:	08004a0c 	.word	0x08004a0c

080005ec <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	8899      	ldrh	r1, [r3, #4]
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	4413      	add	r3, r2
 8000604:	b2ca      	uxtb	r2, r1
 8000606:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	889b      	ldrh	r3, [r3, #4]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	b299      	uxth	r1, r3
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	3301      	adds	r3, #1
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	4413      	add	r3, r2
 8000618:	b2ca      	uxtb	r2, r1
 800061a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	3302      	adds	r3, #2
 8000620:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fd90 	bl	800014c <strlen>
 800062c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	4413      	add	r3, r2
 8000634:	69b9      	ldr	r1, [r7, #24]
 8000636:	4618      	mov	r0, r3
 8000638:	f000 ff7a 	bl	8001530 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	3304      	adds	r3, #4
 8000640:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	18d0      	adds	r0, r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	69ba      	ldr	r2, [r7, #24]
 800064e:	4619      	mov	r1, r3
 8000650:	f004 f89c 	bl	800478c <memcpy>
      offset += length_topic_name;
 8000654:	69fa      	ldr	r2, [r7, #28]
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	4413      	add	r3, r2
 800065a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fd73 	bl	800014c <strlen>
 8000666:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	4413      	add	r3, r2
 800066e:	6979      	ldr	r1, [r7, #20]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 ff5d 	bl	8001530 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3304      	adds	r3, #4
 800067a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	18d0      	adds	r0, r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	4619      	mov	r1, r3
 800068a:	f004 f87f 	bl	800478c <memcpy>
      offset += length_message_type;
 800068e:	69fa      	ldr	r2, [r7, #28]
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	4413      	add	r3, r2
 8000694:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	691b      	ldr	r3, [r3, #16]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fd56 	bl	800014c <strlen>
 80006a0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	6939      	ldr	r1, [r7, #16]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 ff40 	bl	8001530 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	3304      	adds	r3, #4
 80006b4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	18d0      	adds	r0, r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	691b      	ldr	r3, [r3, #16]
 80006c0:	693a      	ldr	r2, [r7, #16]
 80006c2:	4619      	mov	r1, r3
 80006c4:	f004 f862 	bl	800478c <memcpy>
      offset += length_md5sum;
 80006c8:	69fa      	ldr	r2, [r7, #28]
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	4413      	add	r3, r2
 80006ce:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80006d6:	68f9      	ldr	r1, [r7, #12]
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	4413      	add	r3, r2
 80006de:	b2ca      	uxtb	r2, r1
 80006e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	0a19      	lsrs	r1, r3, #8
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3301      	adds	r3, #1
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	4413      	add	r3, r2
 80006ee:	b2ca      	uxtb	r2, r1
 80006f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	0c19      	lsrs	r1, r3, #16
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3302      	adds	r3, #2
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	4413      	add	r3, r2
 80006fe:	b2ca      	uxtb	r2, r1
 8000700:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	0e19      	lsrs	r1, r3, #24
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3303      	adds	r3, #3
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	4413      	add	r3, r2
 800070e:	b2ca      	uxtb	r2, r1
 8000710:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3304      	adds	r3, #4
 8000716:	61fb      	str	r3, [r7, #28]
      return offset;
 8000718:	69fb      	ldr	r3, [r7, #28]
    }
 800071a:	4618      	mov	r0, r3
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000722:	b580      	push	{r7, lr}
 8000724:	b08a      	sub	sp, #40	; 0x28
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	4413      	add	r3, r2
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b29a      	uxth	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	889b      	ldrh	r3, [r3, #4]
 8000742:	b21a      	sxth	r2, r3
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	3301      	adds	r3, #1
 8000748:	6839      	ldr	r1, [r7, #0]
 800074a:	440b      	add	r3, r1
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21b      	sxth	r3, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	3302      	adds	r3, #2
 8000760:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	441a      	add	r2, r3
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4611      	mov	r1, r2
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fefc 	bl	800156c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	3304      	adds	r3, #4
 8000778:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
 800077e:	e00b      	b.n	8000798 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000784:	441a      	add	r2, r3
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000788:	3b01      	subs	r3, #1
 800078a:	6839      	ldr	r1, [r7, #0]
 800078c:	440b      	add	r3, r1
 800078e:	7812      	ldrb	r2, [r2, #0]
 8000790:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000794:	3301      	adds	r3, #1
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
 8000798:	69ba      	ldr	r2, [r7, #24]
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	4413      	add	r3, r2
 800079e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d3ed      	bcc.n	8000780 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	4413      	add	r3, r2
 80007aa:	3b01      	subs	r3, #1
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	441a      	add	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80007c0:	69ba      	ldr	r2, [r7, #24]
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	4413      	add	r3, r2
 80007c6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	441a      	add	r2, r3
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fec9 	bl	800156c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	3304      	adds	r3, #4
 80007de:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	623b      	str	r3, [r7, #32]
 80007e4:	e00b      	b.n	80007fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	441a      	add	r2, r3
 80007ec:	6a3b      	ldr	r3, [r7, #32]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	6839      	ldr	r1, [r7, #0]
 80007f2:	440b      	add	r3, r1
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80007f8:	6a3b      	ldr	r3, [r7, #32]
 80007fa:	3301      	adds	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
 80007fe:	69ba      	ldr	r2, [r7, #24]
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	4413      	add	r3, r2
 8000804:	6a3a      	ldr	r2, [r7, #32]
 8000806:	429a      	cmp	r2, r3
 8000808:	d3ed      	bcc.n	80007e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800080a:	69ba      	ldr	r2, [r7, #24]
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	4413      	add	r3, r2
 8000810:	3b01      	subs	r3, #1
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	4413      	add	r3, r2
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	3b01      	subs	r3, #1
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	441a      	add	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	4413      	add	r3, r2
 800082c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800082e:	69bb      	ldr	r3, [r7, #24]
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	441a      	add	r2, r3
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fe96 	bl	800156c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	3304      	adds	r3, #4
 8000844:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000846:	69bb      	ldr	r3, [r7, #24]
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	e00b      	b.n	8000864 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 800084c:	683a      	ldr	r2, [r7, #0]
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	441a      	add	r2, r3
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3b01      	subs	r3, #1
 8000856:	6839      	ldr	r1, [r7, #0]
 8000858:	440b      	add	r3, r1
 800085a:	7812      	ldrb	r2, [r2, #0]
 800085c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3301      	adds	r3, #1
 8000862:	61fb      	str	r3, [r7, #28]
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4413      	add	r3, r2
 800086a:	69fa      	ldr	r2, [r7, #28]
 800086c:	429a      	cmp	r2, r3
 800086e:	d3ed      	bcc.n	800084c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	4413      	add	r3, r2
 8000876:	3b01      	subs	r3, #1
 8000878:	683a      	ldr	r2, [r7, #0]
 800087a:	4413      	add	r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	3b01      	subs	r3, #1
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	441a      	add	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	4413      	add	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	6839      	ldr	r1, [r7, #0]
 800089e:	440a      	add	r2, r1
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	3301      	adds	r3, #1
 80008ac:	6839      	ldr	r1, [r7, #0]
 80008ae:	440b      	add	r3, r1
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	4313      	orrs	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	3302      	adds	r3, #2
 80008be:	6839      	ldr	r1, [r7, #0]
 80008c0:	440b      	add	r3, r1
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	041b      	lsls	r3, r3, #16
 80008c6:	4313      	orrs	r3, r2
 80008c8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	3303      	adds	r3, #3
 80008d0:	6839      	ldr	r1, [r7, #0]
 80008d2:	440b      	add	r3, r1
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	061b      	lsls	r3, r3, #24
 80008d8:	4313      	orrs	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80008dc:	68ba      	ldr	r2, [r7, #8]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	3304      	adds	r3, #4
 80008e6:	61bb      	str	r3, [r7, #24]
     return offset;
 80008e8:	69bb      	ldr	r3, [r7, #24]
    }
 80008ea:	4618      	mov	r0, r3
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80008fe:	4618      	mov	r0, r3
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	08004a10 	.word	0x08004a10

0800090c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	4b02      	ldr	r3, [pc, #8]	; (8000920 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	08004a2c 	.word	0x08004a2c

08000924 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fd3e 	bl	80003b0 <_ZN3ros3MsgC1Ev>
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	601a      	str	r2, [r3, #0]
      level(0),
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	711a      	strb	r2, [r3, #4]
      msg("")
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000944:	609a      	str	r2, [r3, #8]
    {
    }
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	08004bd4 	.word	0x08004bd4
 8000954:	08004a0c 	.word	0x08004a0c

08000958 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	4413      	add	r3, r2
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	7912      	ldrb	r2, [r2, #4]
 8000970:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3301      	adds	r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fbe5 	bl	800014c <strlen>
 8000982:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	4413      	add	r3, r2
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fdcf 	bl	8001530 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3304      	adds	r3, #4
 8000996:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	18d0      	adds	r0, r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f003 fef1 	bl	800478c <memcpy>
      offset += length_msg;
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4413      	add	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
      return offset;
 80009b2:	68fb      	ldr	r3, [r7, #12]
    }
 80009b4:	4618      	mov	r0, r3
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	3301      	adds	r3, #1
 80009da:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	441a      	add	r2, r3
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 fdbf 	bl	800156c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	3304      	adds	r3, #4
 80009f2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	e00b      	b.n	8000a12 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80009fa:	683a      	ldr	r2, [r7, #0]
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	441a      	add	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	6839      	ldr	r1, [r7, #0]
 8000a06:	440b      	add	r3, r1
 8000a08:	7812      	ldrb	r2, [r2, #0]
 8000a0a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d3ed      	bcc.n	80009fa <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	3b01      	subs	r3, #1
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	4413      	add	r3, r2
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	441a      	add	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
     return offset;
 8000a42:	693b      	ldr	r3, [r7, #16]
    }
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	08004a50 	.word	0x08004a50

08000a64 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	4b02      	ldr	r3, [pc, #8]	; (8000a78 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	08004a64 	.word	0x08004a64

08000a7c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fc92 	bl	80003b0 <_ZN3ros3MsgC1Ev>
 8000a8c:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f04f 0200 	mov.w	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	08004bbc 	.word	0x08004bbc

08000ad8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6859      	ldr	r1, [r3, #4]
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	b2ca      	uxtb	r2, r1
 8000af2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	0a19      	lsrs	r1, r3, #8
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	3301      	adds	r3, #1
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	4413      	add	r3, r2
 8000b02:	b2ca      	uxtb	r2, r1
 8000b04:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	0c19      	lsrs	r1, r3, #16
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	3302      	adds	r3, #2
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	b2ca      	uxtb	r2, r1
 8000b16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	0e19      	lsrs	r1, r3, #24
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	3303      	adds	r3, #3
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	4413      	add	r3, r2
 8000b26:	b2ca      	uxtb	r2, r1
 8000b28:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
 8000b34:	e02a      	b.n	8000b8c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000b44:	6939      	ldr	r1, [r7, #16]
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b2ca      	uxtb	r2, r1
 8000b4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	0a19      	lsrs	r1, r3, #8
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	3301      	adds	r3, #1
 8000b58:	683a      	ldr	r2, [r7, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	b2ca      	uxtb	r2, r1
 8000b5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	0c19      	lsrs	r1, r3, #16
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	3302      	adds	r3, #2
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b2ca      	uxtb	r2, r1
 8000b6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	0e19      	lsrs	r1, r3, #24
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	3303      	adds	r3, #3
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b2ca      	uxtb	r2, r1
 8000b7e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	3304      	adds	r3, #4
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000b86:	6a3b      	ldr	r3, [r7, #32]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	6a3a      	ldr	r2, [r7, #32]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d3cf      	bcc.n	8000b36 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6919      	ldr	r1, [r3, #16]
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	b2ca      	uxtb	r2, r1
 8000ba2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	0a19      	lsrs	r1, r3, #8
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	3301      	adds	r3, #1
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b2ca      	uxtb	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	0c19      	lsrs	r1, r3, #16
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	b2ca      	uxtb	r2, r1
 8000bc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	0e19      	lsrs	r1, r3, #24
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	3303      	adds	r3, #3
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	b2ca      	uxtb	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	3304      	adds	r3, #4
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	e02a      	b.n	8000c3c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	699a      	ldr	r2, [r3, #24]
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000bf4:	68f9      	ldr	r1, [r7, #12]
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b2ca      	uxtb	r2, r1
 8000bfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	0a19      	lsrs	r1, r3, #8
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c06:	3301      	adds	r3, #1
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	b2ca      	uxtb	r2, r1
 8000c0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	0c19      	lsrs	r1, r3, #16
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	3302      	adds	r3, #2
 8000c18:	683a      	ldr	r2, [r7, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b2ca      	uxtb	r2, r1
 8000c1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	0e19      	lsrs	r1, r3, #24
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	3303      	adds	r3, #3
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	b2ca      	uxtb	r2, r1
 8000c2e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	3304      	adds	r3, #4
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	61fb      	str	r3, [r7, #28]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	69fa      	ldr	r2, [r7, #28]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d3cf      	bcc.n	8000be6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69d9      	ldr	r1, [r3, #28]
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	b2ca      	uxtb	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	0a19      	lsrs	r1, r3, #8
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	4413      	add	r3, r2
 8000c62:	b2ca      	uxtb	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	0c19      	lsrs	r1, r3, #16
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	3302      	adds	r3, #2
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	b2ca      	uxtb	r2, r1
 8000c76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	0e19      	lsrs	r1, r3, #24
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	3303      	adds	r3, #3
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	4413      	add	r3, r2
 8000c86:	b2ca      	uxtb	r2, r1
 8000c88:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000c90:	2300      	movs	r3, #0
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	e027      	b.n	8000ce6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fa52 	bl	800014c <strlen>
 8000ca8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	6979      	ldr	r1, [r7, #20]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fc3c 	bl	8001530 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	3304      	adds	r3, #4
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	18d0      	adds	r0, r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f003 fd5a 	bl	800478c <memcpy>
      offset += length_stringsi;
 8000cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	4413      	add	r3, r2
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	61bb      	str	r3, [r7, #24]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d3d2      	bcc.n	8000c96 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b08e      	sub	sp, #56	; 0x38
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d14:	3301      	adds	r3, #1
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	6a3a      	ldr	r2, [r7, #32]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d26:	3302      	adds	r3, #2
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	041b      	lsls	r3, r3, #16
 8000d30:	6a3a      	ldr	r2, [r7, #32]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d38:	3303      	adds	r3, #3
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	061b      	lsls	r3, r3, #24
 8000d42:	6a3a      	ldr	r2, [r7, #32]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	6a3a      	ldr	r2, [r7, #32]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d90a      	bls.n	8000d6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4619      	mov	r1, r3
 8000d62:	4610      	mov	r0, r2
 8000d64:	f003 fca6 	bl	80046b4 <realloc>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a3a      	ldr	r2, [r7, #32]
 8000d72:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000d74:	2300      	movs	r3, #0
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
 8000d78:	e035      	b.n	8000de6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d82:	6839      	ldr	r1, [r7, #0]
 8000d84:	440a      	add	r2, r1
 8000d86:	7812      	ldrb	r2, [r2, #0]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d90:	3301      	adds	r3, #1
 8000d92:	6839      	ldr	r1, [r7, #0]
 8000d94:	440b      	add	r3, r1
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da2:	3302      	adds	r3, #2
 8000da4:	6839      	ldr	r1, [r7, #0]
 8000da6:	440b      	add	r3, r1
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	041b      	lsls	r3, r3, #16
 8000dac:	4313      	orrs	r3, r2
 8000dae:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db4:	3303      	adds	r3, #3
 8000db6:	6839      	ldr	r1, [r7, #0]
 8000db8:	440b      	add	r3, r1
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	061b      	lsls	r3, r3, #24
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dca:	3304      	adds	r3, #4
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	3208      	adds	r2, #8
 8000ddc:	6812      	ldr	r2, [r2, #0]
 8000dde:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de2:	3301      	adds	r3, #1
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d3c4      	bcc.n	8000d7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	4413      	add	r3, r2
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0e:	3302      	adds	r3, #2
 8000e10:	683a      	ldr	r2, [r7, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	041b      	lsls	r3, r3, #16
 8000e18:	69fa      	ldr	r2, [r7, #28]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e20:	3303      	adds	r3, #3
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	4413      	add	r3, r2
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	061b      	lsls	r3, r3, #24
 8000e2a:	69fa      	ldr	r2, [r7, #28]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e32:	3304      	adds	r3, #4
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d90a      	bls.n	8000e56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	699a      	ldr	r2, [r3, #24]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	f003 fc32 	bl	80046b4 <realloc>
 8000e50:	4602      	mov	r2, r0
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69fa      	ldr	r2, [r7, #28]
 8000e5a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e60:	e035      	b.n	8000ece <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e6a:	6839      	ldr	r1, [r7, #0]
 8000e6c:	440a      	add	r2, r1
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e78:	3301      	adds	r3, #1
 8000e7a:	6839      	ldr	r1, [r7, #0]
 8000e7c:	440b      	add	r3, r1
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	6839      	ldr	r1, [r7, #0]
 8000e8e:	440b      	add	r3, r1
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	041b      	lsls	r3, r3, #16
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9c:	3303      	adds	r3, #3
 8000e9e:	6839      	ldr	r1, [r7, #0]
 8000ea0:	440b      	add	r3, r1
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	061b      	lsls	r3, r3, #24
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699a      	ldr	r2, [r3, #24]
 8000eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	3214      	adds	r2, #20
 8000ec4:	6812      	ldr	r2, [r2, #0]
 8000ec6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eca:	3301      	adds	r3, #1
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d3c4      	bcc.n	8000e62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	4413      	add	r3, r2
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	041b      	lsls	r3, r3, #16
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f08:	3303      	adds	r3, #3
 8000f0a:	683a      	ldr	r2, [r7, #0]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	061b      	lsls	r3, r3, #24
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d90a      	bls.n	8000f3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4619      	mov	r1, r3
 8000f32:	4610      	mov	r0, r2
 8000f34:	f003 fbbe 	bl	80046b4 <realloc>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000f44:	2300      	movs	r3, #0
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f48:	e03e      	b.n	8000fc8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	441a      	add	r2, r3
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fb08 	bl	800156c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f5e:	3304      	adds	r3, #4
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
 8000f66:	e00b      	b.n	8000f80 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	441a      	add	r2, r3
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	3b01      	subs	r3, #1
 8000f72:	6839      	ldr	r1, [r7, #0]
 8000f74:	440b      	add	r3, r1
 8000f76:	7812      	ldrb	r2, [r2, #0]
 8000f78:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4413      	add	r3, r2
 8000f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d3ed      	bcc.n	8000f68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8000f8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	3b01      	subs	r3, #1
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8000f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	441a      	add	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8000fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	3220      	adds	r2, #32
 8000fbe:	6812      	ldr	r2, [r2, #0]
 8000fc0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8000fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d3bb      	bcc.n	8000f4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3738      	adds	r7, #56	; 0x38
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	08004b28 	.word	0x08004b28

08000ff4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	08004a88 	.word	0x08004a88

0800100c <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
  }
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
	...

08001048 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <_ZN13STM32HardwareC1Ev+0x34>)
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000078 	.word	0x20000078

08001080 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f804 	bl	8001096 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3304      	adds	r3, #4
 80010a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010aa:	4619      	mov	r1, r3
 80010ac:	f002 fbe0 	bl	8003870 <HAL_UART_Receive_DMA>
    }
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
      int c = -1;
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ffa8 	bl	8001022 <_ZN13STM32Hardware10getRdmaIndEv>
 80010d2:	4603      	mov	r3, r0
 80010d4:	429c      	cmp	r4, r3
 80010d6:	bf14      	ite	ne
 80010d8:	2301      	movne	r3, #1
 80010da:	2300      	moveq	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d012      	beq.n	8001108 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80010e8:	1c59      	adds	r1, r3, #1
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	791b      	ldrb	r3, [r3, #4]
 80010f6:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80010fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001108:	68fb      	ldr	r3, [r7, #12]
    }
 800110a:	4618      	mov	r0, r3
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bd90      	pop	{r4, r7, pc}
	...

08001114 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b20      	cmp	r3, #32
 8001128:	d108      	bne.n	800113c <_ZN13STM32Hardware5flushEv+0x28>
 800112a:	4b33      	ldr	r3, [pc, #204]	; (80011f8 <_ZN13STM32Hardware5flushEv+0xe4>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <_ZN13STM32Hardware5flushEv+0x28>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <_ZN13STM32Hardware5flushEv+0x2a>
 800113c:	2300      	movs	r3, #0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d055      	beq.n	80011ee <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <_ZN13STM32Hardware5flushEv+0xe4>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001154:	429a      	cmp	r2, r3
 8001156:	d047      	beq.n	80011e8 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001168:	429a      	cmp	r2, r3
 800116a:	d217      	bcs.n	800119c <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800117a:	b29b      	uxth	r3, r3
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800118a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	89fa      	ldrh	r2, [r7, #14]
 8001194:	4619      	mov	r1, r3
 8001196:	f002 fafb 	bl	8003790 <HAL_UART_Transmit_DMA>
 800119a:	e01f      	b.n	80011dc <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80011a8:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6818      	ldr	r0, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80011b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	89fa      	ldrh	r2, [r7, #14]
 80011be:	4619      	mov	r1, r3
 80011c0:	f002 fae6 	bl	8003790 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f503 7102 	add.w	r1, r3, #520	; 0x208
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	f002 fada 	bl	8003790 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <_ZN13STM32Hardware5flushEv+0xe4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
      }
    }
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000148 	.word	0x20000148

080011fc <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
      int n = length;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001212:	bfa8      	it	ge
 8001214:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001218:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001220:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	4293      	cmp	r3, r2
 8001228:	bf28      	it	cs
 800122a:	4613      	movcs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001234:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68b9      	ldr	r1, [r7, #8]
 8001240:	4618      	mov	r0, r3
 8001242:	f003 faa3 	bl	800478c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	4413      	add	r3, r2
 8001250:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	429a      	cmp	r2, r3
 8001260:	d00b      	beq.n	800127a <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	18d1      	adds	r1, r2, r3
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	461a      	mov	r2, r3
 8001276:	f003 fa89 	bl	800478c <memcpy>
      }

      flush();
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f7ff ff4a 	bl	8001114 <_ZN13STM32Hardware5flushEv>
    }
 8001280:	bf00      	nop
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	f001 f8a4 	bl	80023dc <HAL_GetTick>
 8001294:	4603      	mov	r3, r0
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
      data(0)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f880 	bl	80003b0 <_ZN3ros3MsgC1Ev>
 80012b0:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <_ZN8std_msgs4BoolC1Ev+0x28>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	711a      	strb	r2, [r3, #4]
    {
    }
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	08004b78 	.word	0x08004b78

080012cc <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	791b      	ldrb	r3, [r3, #4]
 80012de:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	4413      	add	r3, r2
 80012e6:	7a3a      	ldrb	r2, [r7, #8]
 80012e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
      return offset;
 80012f0:	68fb      	ldr	r3, [r7, #12]
    }
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800130e:	7a3a      	ldrb	r2, [r7, #8]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	440b      	add	r3, r1
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4313      	orrs	r3, r2
 800131a:	b2db      	uxtb	r3, r3
 800131c:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 800131e:	7a3a      	ldrb	r2, [r7, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3301      	adds	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
     return offset;
 800132a:	68fb      	ldr	r3, [r7, #12]
    }
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
	...

08001338 <_ZN8std_msgs4Bool7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Bool"; };
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	4b02      	ldr	r3, [pc, #8]	; (800134c <_ZN8std_msgs4Bool7getTypeEv+0x14>)
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	08004aac 	.word	0x08004aac

08001350 <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	4b02      	ldr	r3, [pc, #8]	; (8001364 <_ZN8std_msgs4Bool6getMD5Ev+0x14>)
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	08004abc 	.word	0x08004abc

08001368 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	08004ba8 	.word	0x08004ba8

08001388 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ffe8 	bl	8001368 <_ZN3ros15NodeHandleBase_C1Ev>
 8001398:	4a36      	ldr	r2, [pc, #216]	; (8001474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3304      	adds	r3, #4
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fe50 	bl	8001048 <_ZN13STM32HardwareC1Ev>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80013ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 f9a4 	bl	8004722 <memset>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80013e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 f99b 	bl	8004722 <memset>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80013f2:	2264      	movs	r2, #100	; 0x64
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 f993 	bl	8004722 <memset>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8001402:	2264      	movs	r2, #100	; 0x64
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f003 f98b 	bl	8004722 <memset>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fb0a 	bl	8000a7c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	08004b64 	.word	0x08004b64

08001478 <_Z18ledControlCallbackRKN8std_msgs4BoolE>:

#define LED2_PIN GPIO_PIN_5
#define LED2_GPIO_PORT GPIOA

// Define a callback function for the subscriber
void ledControlCallback(const std_msgs::Bool& led_state) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    if (led_state.data) {
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	791b      	ldrb	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <_Z18ledControlCallbackRKN8std_msgs4BoolE+0x1c>
        // Code to turn the LED ON
        HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_SET); // Replace GPIOx and GPIO_PIN_y with actual LED pin
 8001488:	2201      	movs	r2, #1
 800148a:	2120      	movs	r1, #32
 800148c:	4806      	ldr	r0, [pc, #24]	; (80014a8 <_Z18ledControlCallbackRKN8std_msgs4BoolE+0x30>)
 800148e:	f001 fd07 	bl	8002ea0 <HAL_GPIO_WritePin>
    } else {
        // Code to turn the LED OFF
        HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET); // Replace GPIOx and GPIO_PIN_y with actual LED pin
    }
}
 8001492:	e004      	b.n	800149e <_Z18ledControlCallbackRKN8std_msgs4BoolE+0x26>
        HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET); // Replace GPIOx and GPIO_PIN_y with actual LED pin
 8001494:	2200      	movs	r2, #0
 8001496:	2120      	movs	r1, #32
 8001498:	4803      	ldr	r0, [pc, #12]	; (80014a8 <_Z18ledControlCallbackRKN8std_msgs4BoolE+0x30>)
 800149a:	f001 fd01 	bl	8002ea0 <HAL_GPIO_WritePin>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40010800 	.word	0x40010800

080014ac <HAL_UART_TxCpltCallback>:

// Initialize the subscriber with the topic name and the callback function
ros::Subscriber<std_msgs::Bool> sub("led_control", &ledControlCallback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_UART_TxCpltCallback+0x20>)
 80014b6:	f000 f8b3 	bl	8001620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fe29 	bl	8001114 <_ZN13STM32Hardware5flushEv>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000014c 	.word	0x2000014c

080014d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <HAL_UART_RxCpltCallback+0x20>)
 80014da:	f000 f8a1 	bl	8001620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80014de:	4603      	mov	r3, r0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fdd8 	bl	8001096 <_ZN13STM32Hardware10reset_rbufEv>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000014c 	.word	0x2000014c

080014f4 <setup>:

void setup(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  nh.initNode();
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <setup+0x18>)
 80014fa:	f000 f89c 	bl	8001636 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  // Register the subscriber
  nh.subscribe(sub);
 80014fe:	4904      	ldr	r1, [pc, #16]	; (8001510 <setup+0x1c>)
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <setup+0x18>)
 8001502:	f000 f8b5 	bl	8001670 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000014c 	.word	0x2000014c
 8001510:	20000a88 	.word	0x20000a88

08001514 <loop>:

void loop(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  nh.spinOnce(); // This will call the ledControlCallback when a message is received
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <loop+0x18>)
 800151a:	f000 f8d3 	bl	80016c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(1000);
 800151e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001522:	f000 ff65 	bl	80023f0 <HAL_Delay>
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000014c 	.word	0x2000014c

08001530 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e00c      	b.n	800155a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	fa22 f103 	lsr.w	r1, r2, r3
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	b2ca      	uxtb	r2, r1
 8001552:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3301      	adds	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2b03      	cmp	r3, #3
 800155e:	d9ef      	bls.n	8001540 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	e010      	b.n	80015a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	440a      	add	r2, r1
 800158c:	7812      	ldrb	r2, [r2, #0]
 800158e:	4611      	mov	r1, r2
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	00d2      	lsls	r2, r2, #3
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3301      	adds	r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d9eb      	bls.n	8001582 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80015aa:	bf00      	nop
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
	...

080015b8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	08004b90 	.word	0x08004b90

080015d8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ffe5 	bl	80015b8 <_ZN3ros11Subscriber_C1Ev>
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	330c      	adds	r3, #12
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fe51 	bl	80012a0 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	609a      	str	r2, [r3, #8]
  };
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	08004b4c 	.word	0x08004b4c

08001620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3304      	adds	r3, #4
  }
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3304      	adds	r3, #4
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fd1c 	bl	8001080 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	e018      	b.n	80016b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10d      	bne.n	80016ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001698:	6839      	ldr	r1, [r7, #0]
 800169a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	605a      	str	r2, [r3, #4]
        return true;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e006      	b.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3301      	adds	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2b18      	cmp	r3, #24
 80016b6:	dde3      	ble.n	8001680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80016b8:	2300      	movs	r3, #0
  }
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3304      	adds	r3, #4
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fdd9 	bl	8001288 <_ZN13STM32Hardware4timeEv>
 80016d6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d903      	bls.n	80016f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	d903      	bls.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001716:	2b00      	cmp	r3, #0
 8001718:	d014      	beq.n	8001744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3304      	adds	r3, #4
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fdb2 	bl	8001288 <_ZN13STM32Hardware4timeEv>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad2      	subs	r2, r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001730:	429a      	cmp	r2, r3
 8001732:	bf8c      	ite	hi
 8001734:	2301      	movhi	r3, #1
 8001736:	2300      	movls	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800173e:	f06f 0301 	mvn.w	r3, #1
 8001742:	e194      	b.n	8001a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3304      	adds	r3, #4
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fcb5 	bl	80010b8 <_ZN13STM32Hardware4readEv>
 800174e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f2c0 8174 	blt.w	8001a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	441a      	add	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800176e:	2b07      	cmp	r3, #7
 8001770:	d11e      	bne.n	80017b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001778:	1c59      	adds	r1, r3, #1
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	b2d1      	uxtb	r1, r2
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	460a      	mov	r2, r1
 800178a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1b4      	bne.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2208      	movs	r2, #8
 80017aa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80017ae:	e7af      	b.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d128      	bne.n	800180c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2bff      	cmp	r3, #255	; 0xff
 80017be:	d10d      	bne.n	80017dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f103 0214 	add.w	r2, r3, #20
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80017da:	e799      	b.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3304      	adds	r3, #4
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fd51 	bl	8001288 <_ZN13STM32Hardware4timeEv>
 80017e6:	4602      	mov	r2, r0
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	bf8c      	ite	hi
 80017f4:	2301      	movhi	r3, #1
 80017f6:	2300      	movls	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d088      	beq.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001806:	f06f 0301 	mvn.w	r3, #1
 800180a:	e130      	b.n	8001a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001812:	2b01      	cmp	r3, #1
 8001814:	d118      	bne.n	8001848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2bfe      	cmp	r3, #254	; 0xfe
 800181a:	d107      	bne.n	800182c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800182a:	e771      	b.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800183a:	2b00      	cmp	r3, #0
 800183c:	f47f af68 	bne.w	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f918 	bl	8001a76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001846:	e763      	b.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800184e:	2b02      	cmp	r3, #2
 8001850:	d113      	bne.n	800187a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001878:	e74a      	b.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001880:	2b03      	cmp	r3, #3
 8001882:	d110      	bne.n	80018a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	441a      	add	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80018a4:	e734      	b.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d116      	bne.n	80018de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80018b6:	425a      	negs	r2, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	bf58      	it	pl
 80018be:	4253      	negpl	r3, r2
 80018c0:	2bff      	cmp	r3, #255	; 0xff
 80018c2:	d107      	bne.n	80018d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80018d2:	e71d      	b.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80018dc:	e718      	b.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d10f      	bne.n	8001908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001906:	e703      	b.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800190e:	2b06      	cmp	r3, #6
 8001910:	d117      	bne.n	8001942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	441a      	add	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2207      	movs	r2, #7
 8001928:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001932:	2b00      	cmp	r3, #0
 8001934:	f47f aeec 	bne.w	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2208      	movs	r2, #8
 800193c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001940:	e6e6      	b.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001948:	2b08      	cmp	r3, #8
 800194a:	f47f aee1 	bne.w	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800195c:	425a      	negs	r2, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	bf58      	it	pl
 8001964:	4253      	negpl	r3, r2
 8001966:	2bff      	cmp	r3, #255	; 0xff
 8001968:	f47f aed2 	bne.w	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001972:	2b00      	cmp	r3, #0
 8001974:	d110      	bne.n	8001998 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f87d 	bl	8001a76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f898 	bl	8001ab2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e06a      	b.n	8001a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800199e:	2b0a      	cmp	r3, #10
 80019a0:	d107      	bne.n	80019b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80019a8:	4619      	mov	r1, r3
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f960 	bl	8001c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80019b0:	e6ae      	b.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80019b8:	2b06      	cmp	r3, #6
 80019ba:	d10e      	bne.n	80019da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80019c8:	4619      	mov	r1, r3
 80019ca:	4610      	mov	r0, r2
 80019cc:	f7ff f995 	bl	8000cfa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80019d8:	e69a      	b.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80019e0:	2b0b      	cmp	r3, #11
 80019e2:	d104      	bne.n	80019ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80019ec:	e690      	b.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80019f4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f202 2222 	addw	r2, r2, #546	; 0x222
 80019fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f43f ae84 	beq.w	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001a0e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001a18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001a22:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4798      	blx	r3
    while (true)
 8001a3e:	e667      	b.n	8001710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001a40:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00f      	beq.n	8001a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d906      	bls.n	8001a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f809 	bl	8001a76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001a6c:	2300      	movs	r3, #0
  }
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fca4 	bl	80003d0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f107 020c 	add.w	r2, r7, #12
 8001a92:	210a      	movs	r1, #10
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	4798      	blx	r3
    rt_time = hardware_.time();
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fbf3 	bl	8001288 <_ZN13STM32Hardware4timeEv>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001ab2:	b590      	push	{r4, r7, lr}
 8001ab4:	b08b      	sub	sp, #44	; 0x2c
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd70 	bl	80005a4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac8:	e062      	b.n	8001b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d056      	beq.n	8001b8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	6859      	ldr	r1, [r3, #4]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	3308      	adds	r3, #8
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4798      	blx	r3
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	330c      	adds	r3, #12
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4608      	mov	r0, r1
 8001b58:	4798      	blx	r3
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b62:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681c      	ldr	r4, [r3, #0]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fa47 	bl	800100c <_ZN3ros9Publisher15getEndpointTypeEv>
 8001b7e:	4601      	mov	r1, r0
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	461a      	mov	r2, r3
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	2b18      	cmp	r3, #24
 8001b94:	dd99      	ble.n	8001aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9a:	e05e      	b.n	8001c5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d053      	beq.n	8001c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bde:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	3308      	adds	r3, #8
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4608      	mov	r0, r1
 8001bee:	4798      	blx	r3
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c04:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	330c      	adds	r3, #12
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4608      	mov	r0, r1
 8001c14:	4798      	blx	r3
 8001c16:	4603      	mov	r3, r0
 8001c18:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c1e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681c      	ldr	r4, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c36:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3304      	adds	r3, #4
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4608      	mov	r0, r1
 8001c46:	4798      	blx	r3
 8001c48:	4601      	mov	r1, r0
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	3301      	adds	r3, #1
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	2b18      	cmp	r3, #24
 8001c5e:	dd9d      	ble.n	8001b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8001c68:	bf00      	nop
 8001c6a:	372c      	adds	r7, #44	; 0x2c
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd90      	pop	{r4, r7, pc}

08001c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fba6 	bl	80003d0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3304      	adds	r3, #4
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fafd 	bl	8001288 <_ZN13STM32Hardware4timeEv>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc04 	bl	80004ae <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	4915      	ldr	r1, [pc, #84]	; (8001d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001cac:	fba1 1303 	umull	r1, r3, r1, r3
 8001cb0:	099b      	lsrs	r3, r3, #6
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001cb6:	6939      	ldr	r1, [r7, #16]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001cbc:	fba3 0302 	umull	r0, r3, r3, r2
 8001cc0:	099b      	lsrs	r3, r3, #6
 8001cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cc6:	fb00 f303 	mul.w	r3, r0, r3
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	3304      	adds	r3, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8a6 	bl	8001e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff facd 	bl	8001288 <_ZN13STM32Hardware4timeEv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	10624dd3 	.word	0x10624dd3
 8001d04:	000f4240 	.word	0x000f4240

08001d08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b63      	cmp	r3, #99	; 0x63
 8001d18:	dd09      	ble.n	8001d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001d20:	f083 0301 	eor.w	r3, r3, #1
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e079      	b.n	8001e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001d3a:	3207      	adds	r2, #7
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
 8001d42:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	22ff      	movs	r2, #255	; 0xff
 8001d48:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	22fe      	movs	r2, #254	; 0xfe
 8001d50:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	121b      	asrs	r3, r3, #8
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001da6:	2305      	movs	r3, #5
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	e00c      	b.n	8001dc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	4413      	add	r3, r2
 8001db2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3306      	adds	r3, #6
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dded      	ble.n	8001dac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3307      	adds	r3, #7
 8001dd4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	425a      	negs	r2, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	bf58      	it	pl
 8001de0:	4253      	negpl	r3, r2
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	1c59      	adds	r1, r3, #1
 8001de8:	6179      	str	r1, [r7, #20]
 8001dea:	43d2      	mvns	r2, r2
 8001dec:	b2d1      	uxtb	r1, r2
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	460a      	mov	r2, r1
 8001df4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfe:	dc0a      	bgt.n	8001e16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1d18      	adds	r0, r3, #4
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7ff f9f5 	bl	80011fc <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	e005      	b.n	8001e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001e16:	4905      	ldr	r1, [pc, #20]	; (8001e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f849 	bl	8001eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001e22:	4618      	mov	r0, r3
 8001e24:	3720      	adds	r7, #32
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	08004ae0 	.word	0x08004ae0

08001e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fa22 	bl	8001288 <_ZN13STM32Hardware4timeEv>
 8001e44:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4915      	ldr	r1, [pc, #84]	; (8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001e4e:	fba1 1303 	umull	r1, r3, r1, r3
 8001e52:	099b      	lsrs	r3, r3, #6
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	1e5a      	subs	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6859      	ldr	r1, [r3, #4]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001e66:	fba3 0302 	umull	r0, r3, r3, r2
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e70:	fb00 f303 	mul.w	r3, r0, r3
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	1aca      	subs	r2, r1, r3
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8001e80:	4413      	add	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001e94:	4619      	mov	r1, r3
 8001e96:	4610      	mov	r0, r2
 8001e98:	f000 f9f6 	bl	8002288 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	10624dd3 	.word	0x10624dd3
 8001ea8:	000f4240 	.word	0x000f4240
 8001eac:	3b9aca00 	.word	0x3b9aca00

08001eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	2103      	movs	r1, #3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f804 	bl	8001ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fd20 	bl	8000924 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f107 0214 	add.w	r2, r7, #20
 8001ef6:	2107      	movs	r1, #7
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	4798      	blx	r3
  }
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_Z41__static_initialization_and_destruction_0ii>:
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d10d      	bne.n	8001f30 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d108      	bne.n	8001f30 <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 8001f1e:	4806      	ldr	r0, [pc, #24]	; (8001f38 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001f20:	f7ff fa32 	bl	8001388 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::Bool> sub("led_control", &ledControlCallback);
 8001f24:	2301      	movs	r3, #1
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001f28:	4905      	ldr	r1, [pc, #20]	; (8001f40 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001f2a:	4806      	ldr	r0, [pc, #24]	; (8001f44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001f2c:	f7ff fb54 	bl	80015d8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	2000014c 	.word	0x2000014c
 8001f3c:	08001479 	.word	0x08001479
 8001f40:	08004b1c 	.word	0x08004b1c
 8001f44:	20000a88 	.word	0x20000a88

08001f48 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	330c      	adds	r3, #12
 8001f56:	6839      	ldr	r1, [r7, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff f9cf 	bl	80012fc <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	320c      	adds	r2, #12
 8001f66:	4610      	mov	r0, r2
 8001f68:	4798      	blx	r3
  }
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
  }
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	330c      	adds	r3, #12
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff f9cf 	bl	8001338 <_ZN8std_msgs4Bool7getTypeEv>
 8001f9a:	4603      	mov	r3, r0
  }
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	330c      	adds	r3, #12
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff f9cd 	bl	8001350 <_ZN8std_msgs4Bool6getMD5Ev>
 8001fb6:	4603      	mov	r3, r0
  }
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
    return configured_;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <_GLOBAL__sub_I_nh>:
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f7ff ff8f 	bl	8001f04 <_Z41__static_initialization_and_destruction_0ii>
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_MspInit+0x5c>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	4a14      	ldr	r2, [pc, #80]	; (8002044 <HAL_MspInit+0x5c>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6193      	str	r3, [r2, #24]
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_MspInit+0x5c>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <HAL_MspInit+0x5c>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <HAL_MspInit+0x5c>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <HAL_MspInit+0x5c>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_MspInit+0x60>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <HAL_MspInit+0x60>)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	40021000 	.word	0x40021000
 8002048:	40010000 	.word	0x40010000

0800204c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a40      	ldr	r2, [pc, #256]	; (8002168 <HAL_UART_MspInit+0x11c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d179      	bne.n	8002160 <HAL_UART_MspInit+0x114>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800206c:	4b3f      	ldr	r3, [pc, #252]	; (800216c <HAL_UART_MspInit+0x120>)
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	4a3e      	ldr	r2, [pc, #248]	; (800216c <HAL_UART_MspInit+0x120>)
 8002072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002076:	61d3      	str	r3, [r2, #28]
 8002078:	4b3c      	ldr	r3, [pc, #240]	; (800216c <HAL_UART_MspInit+0x120>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_UART_MspInit+0x120>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a38      	ldr	r2, [pc, #224]	; (800216c <HAL_UART_MspInit+0x120>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b36      	ldr	r3, [pc, #216]	; (800216c <HAL_UART_MspInit+0x120>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800209c:	230c      	movs	r3, #12
 800209e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2302      	movs	r3, #2
 80020a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	4619      	mov	r1, r3
 80020ae:	4830      	ldr	r0, [pc, #192]	; (8002170 <HAL_UART_MspInit+0x124>)
 80020b0:	f000 fd72 	bl	8002b98 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80020b4:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020b6:	4a30      	ldr	r2, [pc, #192]	; (8002178 <HAL_UART_MspInit+0x12c>)
 80020b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020ba:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020bc:	2200      	movs	r2, #0
 80020be:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c0:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020cc:	4b29      	ldr	r3, [pc, #164]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80020d8:	4b26      	ldr	r3, [pc, #152]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020e6:	4823      	ldr	r0, [pc, #140]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020e8:	f000 fab4 	bl	8002654 <HAL_DMA_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_UART_MspInit+0xaa>
    {
      Error_Handler();
 80020f2:	f7fe f947 	bl	8000384 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80020fc:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_UART_MspInit+0x128>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <HAL_UART_MspInit+0x130>)
 8002104:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_UART_MspInit+0x134>)
 8002106:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002108:	4b1c      	ldr	r3, [pc, #112]	; (800217c <HAL_UART_MspInit+0x130>)
 800210a:	2210      	movs	r2, #16
 800210c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800210e:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_UART_MspInit+0x130>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002114:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_UART_MspInit+0x130>)
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_UART_MspInit+0x130>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <HAL_UART_MspInit+0x130>)
 8002122:	2200      	movs	r2, #0
 8002124:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_UART_MspInit+0x130>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_UART_MspInit+0x130>)
 800212e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002132:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002134:	4811      	ldr	r0, [pc, #68]	; (800217c <HAL_UART_MspInit+0x130>)
 8002136:	f000 fa8d 	bl	8002654 <HAL_DMA_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8002140:	f7fe f920 	bl	8000384 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a0d      	ldr	r2, [pc, #52]	; (800217c <HAL_UART_MspInit+0x130>)
 8002148:	639a      	str	r2, [r3, #56]	; 0x38
 800214a:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_UART_MspInit+0x130>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002150:	2200      	movs	r2, #0
 8002152:	2100      	movs	r1, #0
 8002154:	2026      	movs	r0, #38	; 0x26
 8002156:	f000 fa46 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800215a:	2026      	movs	r0, #38	; 0x26
 800215c:	f000 fa5f 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002160:	bf00      	nop
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40004400 	.word	0x40004400
 800216c:	40021000 	.word	0x40021000
 8002170:	40010800 	.word	0x40010800
 8002174:	200000c0 	.word	0x200000c0
 8002178:	4002006c 	.word	0x4002006c
 800217c:	20000104 	.word	0x20000104
 8002180:	40020080 	.word	0x40020080

08002184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <NMI_Handler+0x4>

0800218a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <HardFault_Handler+0x4>

08002190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <MemManage_Handler+0x4>

08002196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ca:	f000 f8f5 	bl	80023b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <DMA1_Channel6_IRQHandler+0x10>)
 80021da:	f000 fba9 	bl	8002930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200000c0 	.word	0x200000c0

080021e8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <DMA1_Channel7_IRQHandler+0x10>)
 80021ee:	f000 fb9f 	bl	8002930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000104 	.word	0x20000104

080021fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <USART2_IRQHandler+0x10>)
 8002202:	f001 fb5b 	bl	80038bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000078 	.word	0x20000078

08002210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <_sbrk+0x5c>)
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <_sbrk+0x60>)
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002224:	4b13      	ldr	r3, [pc, #76]	; (8002274 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <_sbrk+0x64>)
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <_sbrk+0x68>)
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	429a      	cmp	r2, r3
 800223e:	d207      	bcs.n	8002250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002240:	f002 fa78 	bl	8004734 <__errno>
 8002244:	4603      	mov	r3, r0
 8002246:	220c      	movs	r2, #12
 8002248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
 800224e:	e009      	b.n	8002264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <_sbrk+0x64>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <_sbrk+0x64>)
 8002260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002262:	68fb      	ldr	r3, [r7, #12]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20005000 	.word	0x20005000
 8002270:	00000400 	.word	0x00000400
 8002274:	20000aa4 	.word	0x20000aa4
 8002278:	20000bf8 	.word	0x20000bf8

0800227c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0a5a      	lsrs	r2, r3, #9
 8002298:	490f      	ldr	r1, [pc, #60]	; (80022d8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800229a:	fba1 1202 	umull	r1, r2, r1, r2
 800229e:	09d2      	lsrs	r2, r2, #7
 80022a0:	490e      	ldr	r1, [pc, #56]	; (80022dc <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80022a2:	fb01 f202 	mul.w	r2, r1, r2
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0a5b      	lsrs	r3, r3, #9
 80022b0:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	09db      	lsrs	r3, r3, #7
 80022b8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	441a      	add	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	601a      	str	r2, [r3, #0]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	00044b83 	.word	0x00044b83
 80022dc:	3b9aca00 	.word	0x3b9aca00

080022e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022e0:	f7ff ffcc 	bl	800227c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e4:	480b      	ldr	r0, [pc, #44]	; (8002314 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022e6:	490c      	ldr	r1, [pc, #48]	; (8002318 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022e8:	4a0c      	ldr	r2, [pc, #48]	; (800231c <LoopFillZerobss+0x16>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ec:	e002      	b.n	80022f4 <LoopCopyDataInit>

080022ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f2:	3304      	adds	r3, #4

080022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f8:	d3f9      	bcc.n	80022ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fa:	4a09      	ldr	r2, [pc, #36]	; (8002320 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022fc:	4c09      	ldr	r4, [pc, #36]	; (8002324 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002300:	e001      	b.n	8002306 <LoopFillZerobss>

08002302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002304:	3204      	adds	r2, #4

08002306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002308:	d3fb      	bcc.n	8002302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800230a:	f002 fa19 	bl	8004740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800230e:	f7fd ff25 	bl	800015c <main>
  bx lr
 8002312:	4770      	bx	lr
  ldr r0, =_sdata
 8002314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002318:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800231c:	08004c64 	.word	0x08004c64
  ldr r2, =_sbss
 8002320:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002324:	20000bf4 	.word	0x20000bf4

08002328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002328:	e7fe      	b.n	8002328 <ADC1_2_IRQHandler>
	...

0800232c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <HAL_Init+0x28>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a07      	ldr	r2, [pc, #28]	; (8002354 <HAL_Init+0x28>)
 8002336:	f043 0310 	orr.w	r3, r3, #16
 800233a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233c:	2003      	movs	r0, #3
 800233e:	f000 f947 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002342:	2000      	movs	r0, #0
 8002344:	f000 f808 	bl	8002358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002348:	f7ff fe4e 	bl	8001fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40022000 	.word	0x40022000

08002358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_InitTick+0x54>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_InitTick+0x58>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4619      	mov	r1, r3
 800236a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800236e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002372:	fbb2 f3f3 	udiv	r3, r2, r3
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f95f 	bl	800263a <HAL_SYSTICK_Config>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e00e      	b.n	80023a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b0f      	cmp	r3, #15
 800238a:	d80a      	bhi.n	80023a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800238c:	2200      	movs	r2, #0
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f000 f927 	bl	80025e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002398:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <HAL_InitTick+0x5c>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e000      	b.n	80023a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000000 	.word	0x20000000
 80023b0:	20000008 	.word	0x20000008
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_IncTick+0x1c>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_IncTick+0x20>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	4a03      	ldr	r2, [pc, #12]	; (80023d8 <HAL_IncTick+0x20>)
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	20000008 	.word	0x20000008
 80023d8:	20000aa8 	.word	0x20000aa8

080023dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return uwTick;
 80023e0:	4b02      	ldr	r3, [pc, #8]	; (80023ec <HAL_GetTick+0x10>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	20000aa8 	.word	0x20000aa8

080023f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff fff0 	bl	80023dc <HAL_GetTick>
 80023fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d005      	beq.n	8002416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_Delay+0x44>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002416:	bf00      	nop
 8002418:	f7ff ffe0 	bl	80023dc <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	429a      	cmp	r2, r3
 8002426:	d8f7      	bhi.n	8002418 <HAL_Delay+0x28>
  {
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000008 	.word	0x20000008

08002438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002454:	4013      	ands	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <__NVIC_GetPriorityGrouping+0x18>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 0307 	and.w	r3, r3, #7
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	db0b      	blt.n	80024c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	4906      	ldr	r1, [pc, #24]	; (80024d0 <__NVIC_EnableIRQ+0x34>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2001      	movs	r0, #1
 80024be:	fa00 f202 	lsl.w	r2, r0, r2
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	e000e100 	.word	0xe000e100

080024d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	db0a      	blt.n	80024fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	490c      	ldr	r1, [pc, #48]	; (8002520 <__NVIC_SetPriority+0x4c>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024fc:	e00a      	b.n	8002514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4908      	ldr	r1, [pc, #32]	; (8002524 <__NVIC_SetPriority+0x50>)
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	3b04      	subs	r3, #4
 800250c:	0112      	lsls	r2, r2, #4
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	440b      	add	r3, r1
 8002512:	761a      	strb	r2, [r3, #24]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000e100 	.word	0xe000e100
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f1c3 0307 	rsb	r3, r3, #7
 8002542:	2b04      	cmp	r3, #4
 8002544:	bf28      	it	cs
 8002546:	2304      	movcs	r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3304      	adds	r3, #4
 800254e:	2b06      	cmp	r3, #6
 8002550:	d902      	bls.n	8002558 <NVIC_EncodePriority+0x30>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3b03      	subs	r3, #3
 8002556:	e000      	b.n	800255a <NVIC_EncodePriority+0x32>
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	f04f 32ff 	mov.w	r2, #4294967295
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	401a      	ands	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002570:	f04f 31ff 	mov.w	r1, #4294967295
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	43d9      	mvns	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	4313      	orrs	r3, r2
         );
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	; 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800259c:	d301      	bcc.n	80025a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259e:	2301      	movs	r3, #1
 80025a0:	e00f      	b.n	80025c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <SysTick_Config+0x40>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025aa:	210f      	movs	r1, #15
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295
 80025b0:	f7ff ff90 	bl	80024d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <SysTick_Config+0x40>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <SysTick_Config+0x40>)
 80025bc:	2207      	movs	r2, #7
 80025be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	e000e010 	.word	0xe000e010

080025d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ff2d 	bl	8002438 <__NVIC_SetPriorityGrouping>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f8:	f7ff ff42 	bl	8002480 <__NVIC_GetPriorityGrouping>
 80025fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7ff ff90 	bl	8002528 <NVIC_EncodePriority>
 8002608:	4602      	mov	r2, r0
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff5f 	bl	80024d4 <__NVIC_SetPriority>
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff35 	bl	800249c <__NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffa2 	bl	800258c <SysTick_Config>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e043      	b.n	80026f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_DMA_Init+0xa8>)
 8002672:	4413      	add	r3, r2
 8002674:	4a22      	ldr	r2, [pc, #136]	; (8002700 <HAL_DMA_Init+0xac>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	009a      	lsls	r2, r3, #2
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <HAL_DMA_Init+0xb0>)
 8002686:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800269e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	bffdfff8 	.word	0xbffdfff8
 8002700:	cccccccd 	.word	0xcccccccd
 8002704:	40020000 	.word	0x40020000

08002708 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_DMA_Start_IT+0x20>
 8002724:	2302      	movs	r3, #2
 8002726:	e04b      	b.n	80027c0 <HAL_DMA_Start_IT+0xb8>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d13a      	bne.n	80027b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f9eb 	bl	8002b3c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	2b00      	cmp	r3, #0
 800276c:	d008      	beq.n	8002780 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 020e 	orr.w	r2, r2, #14
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e00f      	b.n	80027a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0204 	bic.w	r2, r2, #4
 800278e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 020a 	orr.w	r2, r2, #10
 800279e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e005      	b.n	80027be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027ba:	2302      	movs	r3, #2
 80027bc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027be:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d008      	beq.n	80027f2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2204      	movs	r2, #4
 80027e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e020      	b.n	8002834 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 020e 	bic.w	r2, r2, #14
 8002800:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	2101      	movs	r1, #1
 800281c:	fa01 f202 	lsl.w	r2, r1, r2
 8002820:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002832:	7bfb      	ldrb	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
	...

08002840 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d005      	beq.n	8002864 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2204      	movs	r2, #4
 800285c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	e051      	b.n	8002908 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 020e 	bic.w	r2, r2, #14
 8002872:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a22      	ldr	r2, [pc, #136]	; (8002914 <HAL_DMA_Abort_IT+0xd4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d029      	beq.n	80028e2 <HAL_DMA_Abort_IT+0xa2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a21      	ldr	r2, [pc, #132]	; (8002918 <HAL_DMA_Abort_IT+0xd8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d022      	beq.n	80028de <HAL_DMA_Abort_IT+0x9e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1f      	ldr	r2, [pc, #124]	; (800291c <HAL_DMA_Abort_IT+0xdc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01a      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x98>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1e      	ldr	r2, [pc, #120]	; (8002920 <HAL_DMA_Abort_IT+0xe0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d012      	beq.n	80028d2 <HAL_DMA_Abort_IT+0x92>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <HAL_DMA_Abort_IT+0xe4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00a      	beq.n	80028cc <HAL_DMA_Abort_IT+0x8c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <HAL_DMA_Abort_IT+0xe8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d102      	bne.n	80028c6 <HAL_DMA_Abort_IT+0x86>
 80028c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028c4:	e00e      	b.n	80028e4 <HAL_DMA_Abort_IT+0xa4>
 80028c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ca:	e00b      	b.n	80028e4 <HAL_DMA_Abort_IT+0xa4>
 80028cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028d0:	e008      	b.n	80028e4 <HAL_DMA_Abort_IT+0xa4>
 80028d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d6:	e005      	b.n	80028e4 <HAL_DMA_Abort_IT+0xa4>
 80028d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028dc:	e002      	b.n	80028e4 <HAL_DMA_Abort_IT+0xa4>
 80028de:	2310      	movs	r3, #16
 80028e0:	e000      	b.n	80028e4 <HAL_DMA_Abort_IT+0xa4>
 80028e2:	2301      	movs	r3, #1
 80028e4:	4a11      	ldr	r2, [pc, #68]	; (800292c <HAL_DMA_Abort_IT+0xec>)
 80028e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	4798      	blx	r3
    } 
  }
  return status;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40020008 	.word	0x40020008
 8002918:	4002001c 	.word	0x4002001c
 800291c:	40020030 	.word	0x40020030
 8002920:	40020044 	.word	0x40020044
 8002924:	40020058 	.word	0x40020058
 8002928:	4002006c 	.word	0x4002006c
 800292c:	40020000 	.word	0x40020000

08002930 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	2204      	movs	r2, #4
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d04f      	beq.n	80029f8 <HAL_DMA_IRQHandler+0xc8>
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d04a      	beq.n	80029f8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0204 	bic.w	r2, r2, #4
 800297e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a66      	ldr	r2, [pc, #408]	; (8002b20 <HAL_DMA_IRQHandler+0x1f0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d029      	beq.n	80029de <HAL_DMA_IRQHandler+0xae>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a65      	ldr	r2, [pc, #404]	; (8002b24 <HAL_DMA_IRQHandler+0x1f4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d022      	beq.n	80029da <HAL_DMA_IRQHandler+0xaa>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a63      	ldr	r2, [pc, #396]	; (8002b28 <HAL_DMA_IRQHandler+0x1f8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01a      	beq.n	80029d4 <HAL_DMA_IRQHandler+0xa4>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a62      	ldr	r2, [pc, #392]	; (8002b2c <HAL_DMA_IRQHandler+0x1fc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d012      	beq.n	80029ce <HAL_DMA_IRQHandler+0x9e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a60      	ldr	r2, [pc, #384]	; (8002b30 <HAL_DMA_IRQHandler+0x200>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00a      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x98>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a5f      	ldr	r2, [pc, #380]	; (8002b34 <HAL_DMA_IRQHandler+0x204>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d102      	bne.n	80029c2 <HAL_DMA_IRQHandler+0x92>
 80029bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029c0:	e00e      	b.n	80029e0 <HAL_DMA_IRQHandler+0xb0>
 80029c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029c6:	e00b      	b.n	80029e0 <HAL_DMA_IRQHandler+0xb0>
 80029c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029cc:	e008      	b.n	80029e0 <HAL_DMA_IRQHandler+0xb0>
 80029ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029d2:	e005      	b.n	80029e0 <HAL_DMA_IRQHandler+0xb0>
 80029d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d8:	e002      	b.n	80029e0 <HAL_DMA_IRQHandler+0xb0>
 80029da:	2340      	movs	r3, #64	; 0x40
 80029dc:	e000      	b.n	80029e0 <HAL_DMA_IRQHandler+0xb0>
 80029de:	2304      	movs	r3, #4
 80029e0:	4a55      	ldr	r2, [pc, #340]	; (8002b38 <HAL_DMA_IRQHandler+0x208>)
 80029e2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8094 	beq.w	8002b16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029f6:	e08e      	b.n	8002b16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	2202      	movs	r2, #2
 80029fe:	409a      	lsls	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d056      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x186>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d051      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10b      	bne.n	8002a38 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 020a 	bic.w	r2, r2, #10
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a38      	ldr	r2, [pc, #224]	; (8002b20 <HAL_DMA_IRQHandler+0x1f0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d029      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x166>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a37      	ldr	r2, [pc, #220]	; (8002b24 <HAL_DMA_IRQHandler+0x1f4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d022      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x162>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a35      	ldr	r2, [pc, #212]	; (8002b28 <HAL_DMA_IRQHandler+0x1f8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01a      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x15c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a34      	ldr	r2, [pc, #208]	; (8002b2c <HAL_DMA_IRQHandler+0x1fc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d012      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x156>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a32      	ldr	r2, [pc, #200]	; (8002b30 <HAL_DMA_IRQHandler+0x200>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00a      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x150>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a31      	ldr	r2, [pc, #196]	; (8002b34 <HAL_DMA_IRQHandler+0x204>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d102      	bne.n	8002a7a <HAL_DMA_IRQHandler+0x14a>
 8002a74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a78:	e00e      	b.n	8002a98 <HAL_DMA_IRQHandler+0x168>
 8002a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7e:	e00b      	b.n	8002a98 <HAL_DMA_IRQHandler+0x168>
 8002a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a84:	e008      	b.n	8002a98 <HAL_DMA_IRQHandler+0x168>
 8002a86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a8a:	e005      	b.n	8002a98 <HAL_DMA_IRQHandler+0x168>
 8002a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a90:	e002      	b.n	8002a98 <HAL_DMA_IRQHandler+0x168>
 8002a92:	2320      	movs	r3, #32
 8002a94:	e000      	b.n	8002a98 <HAL_DMA_IRQHandler+0x168>
 8002a96:	2302      	movs	r3, #2
 8002a98:	4a27      	ldr	r2, [pc, #156]	; (8002b38 <HAL_DMA_IRQHandler+0x208>)
 8002a9a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d034      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ab4:	e02f      	b.n	8002b16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2208      	movs	r2, #8
 8002abc:	409a      	lsls	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d028      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x1e8>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d023      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 020e 	bic.w	r2, r2, #14
 8002ade:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae8:	2101      	movs	r1, #1
 8002aea:	fa01 f202 	lsl.w	r2, r1, r2
 8002aee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
    }
  }
  return;
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
}
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40020008 	.word	0x40020008
 8002b24:	4002001c 	.word	0x4002001c
 8002b28:	40020030 	.word	0x40020030
 8002b2c:	40020044 	.word	0x40020044
 8002b30:	40020058 	.word	0x40020058
 8002b34:	4002006c 	.word	0x4002006c
 8002b38:	40020000 	.word	0x40020000

08002b3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f202 	lsl.w	r2, r1, r2
 8002b58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d108      	bne.n	8002b7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b7a:	e007      	b.n	8002b8c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b08b      	sub	sp, #44	; 0x2c
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002baa:	e169      	b.n	8002e80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bac:	2201      	movs	r2, #1
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	f040 8158 	bne.w	8002e7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4a9a      	ldr	r2, [pc, #616]	; (8002e38 <HAL_GPIO_Init+0x2a0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d05e      	beq.n	8002c92 <HAL_GPIO_Init+0xfa>
 8002bd4:	4a98      	ldr	r2, [pc, #608]	; (8002e38 <HAL_GPIO_Init+0x2a0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d875      	bhi.n	8002cc6 <HAL_GPIO_Init+0x12e>
 8002bda:	4a98      	ldr	r2, [pc, #608]	; (8002e3c <HAL_GPIO_Init+0x2a4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d058      	beq.n	8002c92 <HAL_GPIO_Init+0xfa>
 8002be0:	4a96      	ldr	r2, [pc, #600]	; (8002e3c <HAL_GPIO_Init+0x2a4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d86f      	bhi.n	8002cc6 <HAL_GPIO_Init+0x12e>
 8002be6:	4a96      	ldr	r2, [pc, #600]	; (8002e40 <HAL_GPIO_Init+0x2a8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d052      	beq.n	8002c92 <HAL_GPIO_Init+0xfa>
 8002bec:	4a94      	ldr	r2, [pc, #592]	; (8002e40 <HAL_GPIO_Init+0x2a8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d869      	bhi.n	8002cc6 <HAL_GPIO_Init+0x12e>
 8002bf2:	4a94      	ldr	r2, [pc, #592]	; (8002e44 <HAL_GPIO_Init+0x2ac>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d04c      	beq.n	8002c92 <HAL_GPIO_Init+0xfa>
 8002bf8:	4a92      	ldr	r2, [pc, #584]	; (8002e44 <HAL_GPIO_Init+0x2ac>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d863      	bhi.n	8002cc6 <HAL_GPIO_Init+0x12e>
 8002bfe:	4a92      	ldr	r2, [pc, #584]	; (8002e48 <HAL_GPIO_Init+0x2b0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d046      	beq.n	8002c92 <HAL_GPIO_Init+0xfa>
 8002c04:	4a90      	ldr	r2, [pc, #576]	; (8002e48 <HAL_GPIO_Init+0x2b0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d85d      	bhi.n	8002cc6 <HAL_GPIO_Init+0x12e>
 8002c0a:	2b12      	cmp	r3, #18
 8002c0c:	d82a      	bhi.n	8002c64 <HAL_GPIO_Init+0xcc>
 8002c0e:	2b12      	cmp	r3, #18
 8002c10:	d859      	bhi.n	8002cc6 <HAL_GPIO_Init+0x12e>
 8002c12:	a201      	add	r2, pc, #4	; (adr r2, 8002c18 <HAL_GPIO_Init+0x80>)
 8002c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c18:	08002c93 	.word	0x08002c93
 8002c1c:	08002c6d 	.word	0x08002c6d
 8002c20:	08002c7f 	.word	0x08002c7f
 8002c24:	08002cc1 	.word	0x08002cc1
 8002c28:	08002cc7 	.word	0x08002cc7
 8002c2c:	08002cc7 	.word	0x08002cc7
 8002c30:	08002cc7 	.word	0x08002cc7
 8002c34:	08002cc7 	.word	0x08002cc7
 8002c38:	08002cc7 	.word	0x08002cc7
 8002c3c:	08002cc7 	.word	0x08002cc7
 8002c40:	08002cc7 	.word	0x08002cc7
 8002c44:	08002cc7 	.word	0x08002cc7
 8002c48:	08002cc7 	.word	0x08002cc7
 8002c4c:	08002cc7 	.word	0x08002cc7
 8002c50:	08002cc7 	.word	0x08002cc7
 8002c54:	08002cc7 	.word	0x08002cc7
 8002c58:	08002cc7 	.word	0x08002cc7
 8002c5c:	08002c75 	.word	0x08002c75
 8002c60:	08002c89 	.word	0x08002c89
 8002c64:	4a79      	ldr	r2, [pc, #484]	; (8002e4c <HAL_GPIO_Init+0x2b4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c6a:	e02c      	b.n	8002cc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	623b      	str	r3, [r7, #32]
          break;
 8002c72:	e029      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	623b      	str	r3, [r7, #32]
          break;
 8002c7c:	e024      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	3308      	adds	r3, #8
 8002c84:	623b      	str	r3, [r7, #32]
          break;
 8002c86:	e01f      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	330c      	adds	r3, #12
 8002c8e:	623b      	str	r3, [r7, #32]
          break;
 8002c90:	e01a      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	623b      	str	r3, [r7, #32]
          break;
 8002c9e:	e013      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ca8:	2308      	movs	r3, #8
 8002caa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	611a      	str	r2, [r3, #16]
          break;
 8002cb2:	e009      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	615a      	str	r2, [r3, #20]
          break;
 8002cbe:	e003      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	623b      	str	r3, [r7, #32]
          break;
 8002cc4:	e000      	b.n	8002cc8 <HAL_GPIO_Init+0x130>
          break;
 8002cc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2bff      	cmp	r3, #255	; 0xff
 8002ccc:	d801      	bhi.n	8002cd2 <HAL_GPIO_Init+0x13a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	e001      	b.n	8002cd6 <HAL_GPIO_Init+0x13e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2bff      	cmp	r3, #255	; 0xff
 8002cdc:	d802      	bhi.n	8002ce4 <HAL_GPIO_Init+0x14c>
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	e002      	b.n	8002cea <HAL_GPIO_Init+0x152>
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	3b08      	subs	r3, #8
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	210f      	movs	r1, #15
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	6a39      	ldr	r1, [r7, #32]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	fa01 f303 	lsl.w	r3, r1, r3
 8002d04:	431a      	orrs	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80b1 	beq.w	8002e7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d18:	4b4d      	ldr	r3, [pc, #308]	; (8002e50 <HAL_GPIO_Init+0x2b8>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	4a4c      	ldr	r2, [pc, #304]	; (8002e50 <HAL_GPIO_Init+0x2b8>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6193      	str	r3, [r2, #24]
 8002d24:	4b4a      	ldr	r3, [pc, #296]	; (8002e50 <HAL_GPIO_Init+0x2b8>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d30:	4a48      	ldr	r2, [pc, #288]	; (8002e54 <HAL_GPIO_Init+0x2bc>)
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	3302      	adds	r3, #2
 8002d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	220f      	movs	r2, #15
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4013      	ands	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a40      	ldr	r2, [pc, #256]	; (8002e58 <HAL_GPIO_Init+0x2c0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d013      	beq.n	8002d84 <HAL_GPIO_Init+0x1ec>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3f      	ldr	r2, [pc, #252]	; (8002e5c <HAL_GPIO_Init+0x2c4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00d      	beq.n	8002d80 <HAL_GPIO_Init+0x1e8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3e      	ldr	r2, [pc, #248]	; (8002e60 <HAL_GPIO_Init+0x2c8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d007      	beq.n	8002d7c <HAL_GPIO_Init+0x1e4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a3d      	ldr	r2, [pc, #244]	; (8002e64 <HAL_GPIO_Init+0x2cc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_GPIO_Init+0x1e0>
 8002d74:	2303      	movs	r3, #3
 8002d76:	e006      	b.n	8002d86 <HAL_GPIO_Init+0x1ee>
 8002d78:	2304      	movs	r3, #4
 8002d7a:	e004      	b.n	8002d86 <HAL_GPIO_Init+0x1ee>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e002      	b.n	8002d86 <HAL_GPIO_Init+0x1ee>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_GPIO_Init+0x1ee>
 8002d84:	2300      	movs	r3, #0
 8002d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d88:	f002 0203 	and.w	r2, r2, #3
 8002d8c:	0092      	lsls	r2, r2, #2
 8002d8e:	4093      	lsls	r3, r2
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d96:	492f      	ldr	r1, [pc, #188]	; (8002e54 <HAL_GPIO_Init+0x2bc>)
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002db0:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	492c      	ldr	r1, [pc, #176]	; (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]
 8002dbc:	e006      	b.n	8002dcc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002dbe:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	4928      	ldr	r1, [pc, #160]	; (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d006      	beq.n	8002de6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dd8:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	4922      	ldr	r1, [pc, #136]	; (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60cb      	str	r3, [r1, #12]
 8002de4:	e006      	b.n	8002df4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	491e      	ldr	r1, [pc, #120]	; (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d006      	beq.n	8002e0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4918      	ldr	r1, [pc, #96]	; (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
 8002e0c:	e006      	b.n	8002e1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	4914      	ldr	r1, [pc, #80]	; (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d021      	beq.n	8002e6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	490e      	ldr	r1, [pc, #56]	; (8002e68 <HAL_GPIO_Init+0x2d0>)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]
 8002e34:	e021      	b.n	8002e7a <HAL_GPIO_Init+0x2e2>
 8002e36:	bf00      	nop
 8002e38:	10320000 	.word	0x10320000
 8002e3c:	10310000 	.word	0x10310000
 8002e40:	10220000 	.word	0x10220000
 8002e44:	10210000 	.word	0x10210000
 8002e48:	10120000 	.word	0x10120000
 8002e4c:	10110000 	.word	0x10110000
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40010800 	.word	0x40010800
 8002e5c:	40010c00 	.word	0x40010c00
 8002e60:	40011000 	.word	0x40011000
 8002e64:	40011400 	.word	0x40011400
 8002e68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_GPIO_Init+0x304>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	4909      	ldr	r1, [pc, #36]	; (8002e9c <HAL_GPIO_Init+0x304>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f47f ae8e 	bne.w	8002bac <HAL_GPIO_Init+0x14>
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	372c      	adds	r7, #44	; 0x2c
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	40010400 	.word	0x40010400

08002ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	807b      	strh	r3, [r7, #2]
 8002eac:	4613      	mov	r3, r2
 8002eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eb0:	787b      	ldrb	r3, [r7, #1]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ebc:	e003      	b.n	8002ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ebe:	887b      	ldrh	r3, [r7, #2]
 8002ec0:	041a      	lsls	r2, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	611a      	str	r2, [r3, #16]
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e272      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8087 	beq.w	8002ffe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef0:	4b92      	ldr	r3, [pc, #584]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d00c      	beq.n	8002f16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002efc:	4b8f      	ldr	r3, [pc, #572]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d112      	bne.n	8002f2e <HAL_RCC_OscConfig+0x5e>
 8002f08:	4b8c      	ldr	r3, [pc, #560]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d10b      	bne.n	8002f2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f16:	4b89      	ldr	r3, [pc, #548]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d06c      	beq.n	8002ffc <HAL_RCC_OscConfig+0x12c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d168      	bne.n	8002ffc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e24c      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f36:	d106      	bne.n	8002f46 <HAL_RCC_OscConfig+0x76>
 8002f38:	4b80      	ldr	r3, [pc, #512]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a7f      	ldr	r2, [pc, #508]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	e02e      	b.n	8002fa4 <HAL_RCC_OscConfig+0xd4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x98>
 8002f4e:	4b7b      	ldr	r3, [pc, #492]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a7a      	ldr	r2, [pc, #488]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b78      	ldr	r3, [pc, #480]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a77      	ldr	r2, [pc, #476]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e01d      	b.n	8002fa4 <HAL_RCC_OscConfig+0xd4>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0xbc>
 8002f72:	4b72      	ldr	r3, [pc, #456]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a71      	ldr	r2, [pc, #452]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4b6f      	ldr	r3, [pc, #444]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a6e      	ldr	r2, [pc, #440]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCC_OscConfig+0xd4>
 8002f8c:	4b6b      	ldr	r3, [pc, #428]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a6a      	ldr	r2, [pc, #424]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b68      	ldr	r3, [pc, #416]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a67      	ldr	r2, [pc, #412]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7ff fa16 	bl	80023dc <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7ff fa12 	bl	80023dc <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e200      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	4b5d      	ldr	r3, [pc, #372]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0xe4>
 8002fd2:	e014      	b.n	8002ffe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7ff fa02 	bl	80023dc <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7ff f9fe 	bl	80023dc <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	; 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e1ec      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fee:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x10c>
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d063      	beq.n	80030d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800300a:	4b4c      	ldr	r3, [pc, #304]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003016:	4b49      	ldr	r3, [pc, #292]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b08      	cmp	r3, #8
 8003020:	d11c      	bne.n	800305c <HAL_RCC_OscConfig+0x18c>
 8003022:	4b46      	ldr	r3, [pc, #280]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d116      	bne.n	800305c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302e:	4b43      	ldr	r3, [pc, #268]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_RCC_OscConfig+0x176>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d001      	beq.n	8003046 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e1c0      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003046:	4b3d      	ldr	r3, [pc, #244]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4939      	ldr	r1, [pc, #228]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305a:	e03a      	b.n	80030d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d020      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003064:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8003066:	2201      	movs	r2, #1
 8003068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306a:	f7ff f9b7 	bl	80023dc <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003072:	f7ff f9b3 	bl	80023dc <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e1a1      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003084:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003090:	4b2a      	ldr	r3, [pc, #168]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4927      	ldr	r1, [pc, #156]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]
 80030a4:	e015      	b.n	80030d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a6:	4b26      	ldr	r3, [pc, #152]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7ff f996 	bl	80023dc <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b4:	f7ff f992 	bl	80023dc <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e180      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	4b1d      	ldr	r3, [pc, #116]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d03a      	beq.n	8003154 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d019      	beq.n	800311a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e6:	4b17      	ldr	r3, [pc, #92]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ec:	f7ff f976 	bl	80023dc <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f4:	f7ff f972 	bl	80023dc <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e160      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003106:	4b0d      	ldr	r3, [pc, #52]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003112:	2001      	movs	r0, #1
 8003114:	f000 face 	bl	80036b4 <RCC_Delay>
 8003118:	e01c      	b.n	8003154 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003120:	f7ff f95c 	bl	80023dc <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003126:	e00f      	b.n	8003148 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003128:	f7ff f958 	bl	80023dc <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d908      	bls.n	8003148 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e146      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
 8003140:	42420000 	.word	0x42420000
 8003144:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003148:	4b92      	ldr	r3, [pc, #584]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e9      	bne.n	8003128 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80a6 	beq.w	80032ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003162:	2300      	movs	r3, #0
 8003164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003166:	4b8b      	ldr	r3, [pc, #556]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	4b88      	ldr	r3, [pc, #544]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	4a87      	ldr	r2, [pc, #540]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317c:	61d3      	str	r3, [r2, #28]
 800317e:	4b85      	ldr	r3, [pc, #532]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318a:	2301      	movs	r3, #1
 800318c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	4b82      	ldr	r3, [pc, #520]	; (8003398 <HAL_RCC_OscConfig+0x4c8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d118      	bne.n	80031cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319a:	4b7f      	ldr	r3, [pc, #508]	; (8003398 <HAL_RCC_OscConfig+0x4c8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a7e      	ldr	r2, [pc, #504]	; (8003398 <HAL_RCC_OscConfig+0x4c8>)
 80031a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a6:	f7ff f919 	bl	80023dc <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ae:	f7ff f915 	bl	80023dc <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b64      	cmp	r3, #100	; 0x64
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e103      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	4b75      	ldr	r3, [pc, #468]	; (8003398 <HAL_RCC_OscConfig+0x4c8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x312>
 80031d4:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4a6e      	ldr	r2, [pc, #440]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6213      	str	r3, [r2, #32]
 80031e0:	e02d      	b.n	800323e <HAL_RCC_OscConfig+0x36e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x334>
 80031ea:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a69      	ldr	r2, [pc, #420]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6213      	str	r3, [r2, #32]
 80031f6:	4b67      	ldr	r3, [pc, #412]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4a66      	ldr	r2, [pc, #408]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	f023 0304 	bic.w	r3, r3, #4
 8003200:	6213      	str	r3, [r2, #32]
 8003202:	e01c      	b.n	800323e <HAL_RCC_OscConfig+0x36e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b05      	cmp	r3, #5
 800320a:	d10c      	bne.n	8003226 <HAL_RCC_OscConfig+0x356>
 800320c:	4b61      	ldr	r3, [pc, #388]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	4a60      	ldr	r2, [pc, #384]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003212:	f043 0304 	orr.w	r3, r3, #4
 8003216:	6213      	str	r3, [r2, #32]
 8003218:	4b5e      	ldr	r3, [pc, #376]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4a5d      	ldr	r2, [pc, #372]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6213      	str	r3, [r2, #32]
 8003224:	e00b      	b.n	800323e <HAL_RCC_OscConfig+0x36e>
 8003226:	4b5b      	ldr	r3, [pc, #364]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4a5a      	ldr	r2, [pc, #360]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	6213      	str	r3, [r2, #32]
 8003232:	4b58      	ldr	r3, [pc, #352]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	4a57      	ldr	r2, [pc, #348]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	f023 0304 	bic.w	r3, r3, #4
 800323c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d015      	beq.n	8003272 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003246:	f7ff f8c9 	bl	80023dc <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7ff f8c5 	bl	80023dc <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	; 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e0b1      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003264:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ee      	beq.n	800324e <HAL_RCC_OscConfig+0x37e>
 8003270:	e014      	b.n	800329c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003272:	f7ff f8b3 	bl	80023dc <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7ff f8af 	bl	80023dc <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e09b      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003290:	4b40      	ldr	r3, [pc, #256]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1ee      	bne.n	800327a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a2:	4b3c      	ldr	r3, [pc, #240]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	4a3b      	ldr	r2, [pc, #236]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8087 	beq.w	80033c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b8:	4b36      	ldr	r3, [pc, #216]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d061      	beq.n	8003388 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d146      	bne.n	800335a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032cc:	4b33      	ldr	r3, [pc, #204]	; (800339c <HAL_RCC_OscConfig+0x4cc>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7ff f883 	bl	80023dc <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032da:	f7ff f87f 	bl	80023dc <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e06d      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ec:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f0      	bne.n	80032da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d108      	bne.n	8003314 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003302:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	4921      	ldr	r1, [pc, #132]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003314:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a19      	ldr	r1, [r3, #32]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	430b      	orrs	r3, r1
 8003326:	491b      	ldr	r1, [pc, #108]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x4cc>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7ff f853 	bl	80023dc <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333a:	f7ff f84f 	bl	80023dc <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e03d      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x46a>
 8003358:	e035      	b.n	80033c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <HAL_RCC_OscConfig+0x4cc>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7ff f83c 	bl	80023dc <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003368:	f7ff f838 	bl	80023dc <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e026      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x498>
 8003386:	e01e      	b.n	80033c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e019      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
 8003394:	40021000 	.word	0x40021000
 8003398:	40007000 	.word	0x40007000
 800339c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_OscConfig+0x500>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d106      	bne.n	80033c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000

080033d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0d0      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e8:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d910      	bls.n	8003418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b67      	ldr	r3, [pc, #412]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4965      	ldr	r1, [pc, #404]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b63      	ldr	r3, [pc, #396]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0b8      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d020      	beq.n	8003466 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003430:	4b59      	ldr	r3, [pc, #356]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a58      	ldr	r2, [pc, #352]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800343a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003448:	4b53      	ldr	r3, [pc, #332]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4a52      	ldr	r2, [pc, #328]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003452:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003454:	4b50      	ldr	r3, [pc, #320]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	494d      	ldr	r1, [pc, #308]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d040      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b47      	ldr	r3, [pc, #284]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d115      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e07f      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003492:	4b41      	ldr	r3, [pc, #260]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e073      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a2:	4b3d      	ldr	r3, [pc, #244]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e06b      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b2:	4b39      	ldr	r3, [pc, #228]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f023 0203 	bic.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4936      	ldr	r1, [pc, #216]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c4:	f7fe ff8a 	bl	80023dc <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f7fe ff86 	bl	80023dc <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e053      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 020c 	and.w	r2, r3, #12
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d1eb      	bne.n	80034cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d210      	bcs.n	8003524 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 0207 	bic.w	r2, r3, #7
 800350a:	4922      	ldr	r1, [pc, #136]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e032      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4916      	ldr	r1, [pc, #88]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	490e      	ldr	r1, [pc, #56]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003562:	f000 f821 	bl	80035a8 <HAL_RCC_GetSysClockFreq>
 8003566:	4602      	mov	r2, r0
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	490a      	ldr	r1, [pc, #40]	; (800359c <HAL_RCC_ClockConfig+0x1c8>)
 8003574:	5ccb      	ldrb	r3, [r1, r3]
 8003576:	fa22 f303 	lsr.w	r3, r2, r3
 800357a:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <HAL_RCC_ClockConfig+0x1cc>)
 800357c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe fee8 	bl	8002358 <HAL_InitTick>

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40022000 	.word	0x40022000
 8003598:	40021000 	.word	0x40021000
 800359c:	08004c2c 	.word	0x08004c2c
 80035a0:	20000000 	.word	0x20000000
 80035a4:	20000004 	.word	0x20000004

080035a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <HAL_RCC_GetSysClockFreq+0x94>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d002      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x30>
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d003      	beq.n	80035de <HAL_RCC_GetSysClockFreq+0x36>
 80035d6:	e027      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_RCC_GetSysClockFreq+0x98>)
 80035da:	613b      	str	r3, [r7, #16]
      break;
 80035dc:	e027      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	0c9b      	lsrs	r3, r3, #18
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	4a17      	ldr	r2, [pc, #92]	; (8003644 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035e8:	5cd3      	ldrb	r3, [r2, r3]
 80035ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d010      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_GetSysClockFreq+0x94>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	0c5b      	lsrs	r3, r3, #17
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	4a11      	ldr	r2, [pc, #68]	; (8003648 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003602:	5cd3      	ldrb	r3, [r2, r3]
 8003604:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <HAL_RCC_GetSysClockFreq+0x98>)
 800360a:	fb03 f202 	mul.w	r2, r3, r2
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e004      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a0c      	ldr	r2, [pc, #48]	; (800364c <HAL_RCC_GetSysClockFreq+0xa4>)
 800361c:	fb02 f303 	mul.w	r3, r2, r3
 8003620:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	613b      	str	r3, [r7, #16]
      break;
 8003626:	e002      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_RCC_GetSysClockFreq+0x98>)
 800362a:	613b      	str	r3, [r7, #16]
      break;
 800362c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800362e:	693b      	ldr	r3, [r7, #16]
}
 8003630:	4618      	mov	r0, r3
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	007a1200 	.word	0x007a1200
 8003644:	08004c44 	.word	0x08004c44
 8003648:	08004c54 	.word	0x08004c54
 800364c:	003d0900 	.word	0x003d0900

08003650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003654:	4b02      	ldr	r3, [pc, #8]	; (8003660 <HAL_RCC_GetHCLKFreq+0x10>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	20000000 	.word	0x20000000

08003664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003668:	f7ff fff2 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4903      	ldr	r1, [pc, #12]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	08004c3c 	.word	0x08004c3c

0800368c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003690:	f7ff ffde 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	0adb      	lsrs	r3, r3, #11
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	4903      	ldr	r1, [pc, #12]	; (80036b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000
 80036b0:	08004c3c 	.word	0x08004c3c

080036b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <RCC_Delay+0x34>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <RCC_Delay+0x38>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	0a5b      	lsrs	r3, r3, #9
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036d0:	bf00      	nop
  }
  while (Delay --);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1e5a      	subs	r2, r3, #1
 80036d6:	60fa      	str	r2, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f9      	bne.n	80036d0 <RCC_Delay+0x1c>
}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr
 80036e8:	20000000 	.word	0x20000000
 80036ec:	10624dd3 	.word	0x10624dd3

080036f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e042      	b.n	8003788 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fe fc98 	bl	800204c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	; 0x24
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 ff2f 	bl	8004598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08c      	sub	sp, #48	; 0x30
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d156      	bne.n	8003858 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_UART_Transmit_DMA+0x26>
 80037b0:	88fb      	ldrh	r3, [r7, #6]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e04f      	b.n	800385a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	88fa      	ldrh	r2, [r7, #6]
 80037c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2221      	movs	r2, #33	; 0x21
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	4a21      	ldr	r2, [pc, #132]	; (8003864 <HAL_UART_Transmit_DMA+0xd4>)
 80037e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	4a20      	ldr	r2, [pc, #128]	; (8003868 <HAL_UART_Transmit_DMA+0xd8>)
 80037e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	4a1f      	ldr	r2, [pc, #124]	; (800386c <HAL_UART_Transmit_DMA+0xdc>)
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	2200      	movs	r2, #0
 80037f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80037fa:	f107 0308 	add.w	r3, r7, #8
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	6819      	ldr	r1, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3304      	adds	r3, #4
 800380e:	461a      	mov	r2, r3
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	f7fe ff79 	bl	8002708 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800381e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3314      	adds	r3, #20
 8003826:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	617b      	str	r3, [r7, #20]
   return(result);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3314      	adds	r3, #20
 800383e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003840:	627a      	str	r2, [r7, #36]	; 0x24
 8003842:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	6a39      	ldr	r1, [r7, #32]
 8003846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	61fb      	str	r3, [r7, #28]
   return(result);
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e5      	bne.n	8003820 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	e000      	b.n	800385a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003858:	2302      	movs	r3, #2
  }
}
 800385a:	4618      	mov	r0, r3
 800385c:	3730      	adds	r7, #48	; 0x30
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	08003e2d 	.word	0x08003e2d
 8003868:	08003ec7 	.word	0x08003ec7
 800386c:	0800404b 	.word	0x0800404b

08003870 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b20      	cmp	r3, #32
 8003888:	d112      	bne.n	80038b0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_UART_Receive_DMA+0x26>
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e00b      	b.n	80038b2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fc1a 	bl	80040e0 <UART_Start_Receive_DMA>
 80038ac:	4603      	mov	r3, r0
 80038ae:	e000      	b.n	80038b2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
  }
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b0ba      	sub	sp, #232	; 0xe8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10f      	bne.n	8003922 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_UART_IRQHandler+0x66>
 800390e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fd7e 	bl	800441c <UART_Receive_IT>
      return;
 8003920:	e25b      	b.n	8003dda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80de 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x22c>
 800392c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d106      	bne.n	8003946 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800393c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80d1 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_UART_IRQHandler+0xae>
 8003952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	f043 0201 	orr.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800396a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_UART_IRQHandler+0xd2>
 8003976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f043 0202 	orr.w	r2, r3, #2
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800398e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00b      	beq.n	80039b2 <HAL_UART_IRQHandler+0xf6>
 800399a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	f043 0204 	orr.w	r2, r3, #4
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d011      	beq.n	80039e2 <HAL_UART_IRQHandler+0x126>
 80039be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d105      	bne.n	80039d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	f043 0208 	orr.w	r2, r3, #8
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 81f2 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_UART_IRQHandler+0x14e>
 80039f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fd09 	bl	800441c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <HAL_UART_IRQHandler+0x17a>
 8003a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d04f      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fc13 	bl	8004262 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d041      	beq.n	8003ace <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3314      	adds	r3, #20
 8003a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3314      	adds	r3, #20
 8003a72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1d9      	bne.n	8003a4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d013      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	4a7e      	ldr	r2, [pc, #504]	; (8003c9c <HAL_UART_IRQHandler+0x3e0>)
 8003aa4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe fec8 	bl	8002840 <HAL_DMA_Abort_IT>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d016      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac4:	e00e      	b.n	8003ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f99c 	bl	8003e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	e00a      	b.n	8003ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f998 	bl	8003e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad4:	e006      	b.n	8003ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f994 	bl	8003e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003ae2:	e175      	b.n	8003dd0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae4:	bf00      	nop
    return;
 8003ae6:	e173      	b.n	8003dd0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	f040 814f 	bne.w	8003d90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8148 	beq.w	8003d90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8141 	beq.w	8003d90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 80b6 	beq.w	8003ca0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8145 	beq.w	8003dd4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b52:	429a      	cmp	r2, r3
 8003b54:	f080 813e 	bcs.w	8003dd4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	f000 8088 	beq.w	8003c7c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	330c      	adds	r3, #12
 8003b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	330c      	adds	r3, #12
 8003b94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b98:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ba4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1d9      	bne.n	8003b6c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3314      	adds	r3, #20
 8003bbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3314      	adds	r3, #20
 8003bd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bdc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003be0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003be4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e1      	bne.n	8003bb8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3314      	adds	r3, #20
 8003bfa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3314      	adds	r3, #20
 8003c14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c18:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e3      	bne.n	8003bf4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4c:	f023 0310 	bic.w	r3, r3, #16
 8003c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c60:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e3      	bne.n	8003c3a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe fda6 	bl	80027c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	4619      	mov	r1, r3
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f8bf 	bl	8003e16 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c98:	e09c      	b.n	8003dd4 <HAL_UART_IRQHandler+0x518>
 8003c9a:	bf00      	nop
 8003c9c:	08004327 	.word	0x08004327
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 808e 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8089 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003cea:	647a      	str	r2, [r7, #68]	; 0x44
 8003cec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e3      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3314      	adds	r3, #20
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3314      	adds	r3, #20
 8003d1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d22:	633a      	str	r2, [r7, #48]	; 0x30
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e3      	bne.n	8003cfe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0310 	bic.w	r3, r3, #16
 8003d5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d68:	61fa      	str	r2, [r7, #28]
 8003d6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	69b9      	ldr	r1, [r7, #24]
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	617b      	str	r3, [r7, #20]
   return(result);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e3      	bne.n	8003d44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f844 	bl	8003e16 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d8e:	e023      	b.n	8003dd8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d009      	beq.n	8003db0 <HAL_UART_IRQHandler+0x4f4>
 8003d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fad0 	bl	800434e <UART_Transmit_IT>
    return;
 8003dae:	e014      	b.n	8003dda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00e      	beq.n	8003dda <HAL_UART_IRQHandler+0x51e>
 8003dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fb0f 	bl	80043ec <UART_EndTransmit_IT>
    return;
 8003dce:	e004      	b.n	8003dda <HAL_UART_IRQHandler+0x51e>
    return;
 8003dd0:	bf00      	nop
 8003dd2:	e002      	b.n	8003dda <HAL_UART_IRQHandler+0x51e>
      return;
 8003dd4:	bf00      	nop
 8003dd6:	e000      	b.n	8003dda <HAL_UART_IRQHandler+0x51e>
      return;
 8003dd8:	bf00      	nop
  }
}
 8003dda:	37e8      	adds	r7, #232	; 0xe8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr

08003e16 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b090      	sub	sp, #64	; 0x40
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d137      	bne.n	8003eb8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3314      	adds	r3, #20
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e64:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3314      	adds	r3, #20
 8003e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e6e:	633a      	str	r2, [r7, #48]	; 0x30
 8003e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e5      	bne.n	8003e4e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea2:	61fa      	str	r2, [r7, #28]
 8003ea4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	69b9      	ldr	r1, [r7, #24]
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e5      	bne.n	8003e82 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003eb6:	e002      	b.n	8003ebe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003eb8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003eba:	f7fd faf7 	bl	80014ac <HAL_UART_TxCpltCallback>
}
 8003ebe:	bf00      	nop
 8003ec0:	3740      	adds	r7, #64	; 0x40
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff ff83 	bl	8003de0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b09c      	sub	sp, #112	; 0x70
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d172      	bne.n	8003fe4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f00:	2200      	movs	r2, #0
 8003f02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	330c      	adds	r3, #12
 8003f22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f24:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e5      	bne.n	8003f04 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	667b      	str	r3, [r7, #100]	; 0x64
 8003f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3314      	adds	r3, #20
 8003f56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f58:	647a      	str	r2, [r7, #68]	; 0x44
 8003f5a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3314      	adds	r3, #20
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	623b      	str	r3, [r7, #32]
   return(result);
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f82:	663b      	str	r3, [r7, #96]	; 0x60
 8003f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f8c:	633a      	str	r2, [r7, #48]	; 0x30
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e5      	bne.n	8003f6c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d119      	bne.n	8003fe4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0310 	bic.w	r3, r3, #16
 8003fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fd0:	61fa      	str	r2, [r7, #28]
 8003fd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	69b9      	ldr	r1, [r7, #24]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e5      	bne.n	8003fb0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d106      	bne.n	8004000 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003ffa:	f7ff ff0c 	bl	8003e16 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ffe:	e002      	b.n	8004006 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004000:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004002:	f7fd fa65 	bl	80014d0 <HAL_UART_RxCpltCallback>
}
 8004006:	bf00      	nop
 8004008:	3770      	adds	r7, #112	; 0x70
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	2b01      	cmp	r3, #1
 8004028:	d108      	bne.n	800403c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	b29b      	uxth	r3, r3
 8004032:	4619      	mov	r1, r3
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f7ff feee 	bl	8003e16 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800403a:	e002      	b.n	8004042 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff fed8 	bl	8003df2 <HAL_UART_RxHalfCpltCallback>
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b21      	cmp	r3, #33	; 0x21
 800407c:	d108      	bne.n	8004090 <UART_DMAError+0x46>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2200      	movs	r2, #0
 8004088:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800408a:	68b8      	ldr	r0, [r7, #8]
 800408c:	f000 f8c2 	bl	8004214 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf14      	ite	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	2300      	moveq	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b22      	cmp	r3, #34	; 0x22
 80040b0:	d108      	bne.n	80040c4 <UART_DMAError+0x7a>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2200      	movs	r2, #0
 80040bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80040be:	68b8      	ldr	r0, [r7, #8]
 80040c0:	f000 f8cf 	bl	8004262 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c8:	f043 0210 	orr.w	r2, r3, #16
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040d0:	68b8      	ldr	r0, [r7, #8]
 80040d2:	f7ff fe97 	bl	8003e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b098      	sub	sp, #96	; 0x60
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2222      	movs	r2, #34	; 0x22
 8004104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410c:	4a3e      	ldr	r2, [pc, #248]	; (8004208 <UART_Start_Receive_DMA+0x128>)
 800410e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004114:	4a3d      	ldr	r2, [pc, #244]	; (800420c <UART_Start_Receive_DMA+0x12c>)
 8004116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	4a3c      	ldr	r2, [pc, #240]	; (8004210 <UART_Start_Receive_DMA+0x130>)
 800411e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004124:	2200      	movs	r2, #0
 8004126:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004128:	f107 0308 	add.w	r3, r7, #8
 800412c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3304      	adds	r3, #4
 8004138:	4619      	mov	r1, r3
 800413a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	f7fe fae2 	bl	8002708 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d019      	beq.n	8004196 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004178:	65bb      	str	r3, [r7, #88]	; 0x58
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	330c      	adds	r3, #12
 8004180:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004182:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004184:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e5      	bne.n	8004162 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3314      	adds	r3, #20
 800419c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	657b      	str	r3, [r7, #84]	; 0x54
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3314      	adds	r3, #20
 80041b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80041bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e5      	bne.n	8004196 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3314      	adds	r3, #20
 80041d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	617b      	str	r3, [r7, #20]
   return(result);
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041e0:	653b      	str	r3, [r7, #80]	; 0x50
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3314      	adds	r3, #20
 80041e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80041ea:	627a      	str	r2, [r7, #36]	; 0x24
 80041ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6a39      	ldr	r1, [r7, #32]
 80041f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e5      	bne.n	80041ca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3760      	adds	r7, #96	; 0x60
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	08003ee3 	.word	0x08003ee3
 800420c:	0800400f 	.word	0x0800400f
 8004210:	0800404b 	.word	0x0800404b

08004214 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	; 0x24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	60bb      	str	r3, [r7, #8]
   return(result);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	330c      	adds	r3, #12
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	61ba      	str	r2, [r7, #24]
 800423e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	6979      	ldr	r1, [r7, #20]
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	613b      	str	r3, [r7, #16]
   return(result);
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e5      	bne.n	800421c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004258:	bf00      	nop
 800425a:	3724      	adds	r7, #36	; 0x24
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr

08004262 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004262:	b480      	push	{r7}
 8004264:	b095      	sub	sp, #84	; 0x54
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	330c      	adds	r3, #12
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004280:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	330c      	adds	r3, #12
 8004288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800428a:	643a      	str	r2, [r7, #64]	; 0x40
 800428c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004290:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e5      	bne.n	800426a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3314      	adds	r3, #20
 80042a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3314      	adds	r3, #20
 80042bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e5      	bne.n	800429e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d119      	bne.n	800430e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	330c      	adds	r3, #12
 80042e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f023 0310 	bic.w	r3, r3, #16
 80042f0:	647b      	str	r3, [r7, #68]	; 0x44
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042fa:	61ba      	str	r2, [r7, #24]
 80042fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	6979      	ldr	r1, [r7, #20]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	613b      	str	r3, [r7, #16]
   return(result);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e5      	bne.n	80042da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800431c:	bf00      	nop
 800431e:	3754      	adds	r7, #84	; 0x54
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr

08004326 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7ff fd5f 	bl	8003e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800434e:	b480      	push	{r7}
 8004350:	b085      	sub	sp, #20
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b21      	cmp	r3, #33	; 0x21
 8004360:	d13e      	bne.n	80043e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436a:	d114      	bne.n	8004396 <UART_Transmit_IT+0x48>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d110      	bne.n	8004396 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004388:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	1c9a      	adds	r2, r3, #2
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	621a      	str	r2, [r3, #32]
 8004394:	e008      	b.n	80043a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	1c59      	adds	r1, r3, #1
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6211      	str	r1, [r2, #32]
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4619      	mov	r1, r3
 80043b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10f      	bne.n	80043dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e000      	b.n	80043e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004402:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7fd f84d 	bl	80014ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08c      	sub	sp, #48	; 0x30
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b22      	cmp	r3, #34	; 0x22
 800442e:	f040 80ae 	bne.w	800458e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800443a:	d117      	bne.n	800446c <UART_Receive_IT+0x50>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d113      	bne.n	800446c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004444:	2300      	movs	r3, #0
 8004446:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	b29a      	uxth	r2, r3
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	1c9a      	adds	r2, r3, #2
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	629a      	str	r2, [r3, #40]	; 0x28
 800446a:	e026      	b.n	80044ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447e:	d007      	beq.n	8004490 <UART_Receive_IT+0x74>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <UART_Receive_IT+0x82>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	b2da      	uxtb	r2, r3
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e008      	b.n	80044b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	4619      	mov	r1, r3
 80044c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d15d      	bne.n	800458a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0220 	bic.w	r2, r2, #32
 80044dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	2b01      	cmp	r3, #1
 8004512:	d135      	bne.n	8004580 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	613b      	str	r3, [r7, #16]
   return(result);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f023 0310 	bic.w	r3, r3, #16
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453a:	623a      	str	r2, [r7, #32]
 800453c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	69f9      	ldr	r1, [r7, #28]
 8004540:	6a3a      	ldr	r2, [r7, #32]
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	61bb      	str	r3, [r7, #24]
   return(result);
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e5      	bne.n	800451a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d10a      	bne.n	8004572 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fc4c 	bl	8003e16 <HAL_UARTEx_RxEventCallback>
 800457e:	e002      	b.n	8004586 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fc ffa5 	bl	80014d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e002      	b.n	8004590 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3730      	adds	r7, #48	; 0x30
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045d2:	f023 030c 	bic.w	r3, r3, #12
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	430b      	orrs	r3, r1
 80045de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a2c      	ldr	r2, [pc, #176]	; (80046ac <UART_SetConfig+0x114>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d103      	bne.n	8004608 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004600:	f7ff f844 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	e002      	b.n	800460e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004608:	f7ff f82c 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 800460c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009a      	lsls	r2, r3, #2
 8004618:	441a      	add	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	4a22      	ldr	r2, [pc, #136]	; (80046b0 <UART_SetConfig+0x118>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	0119      	lsls	r1, r3, #4
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009a      	lsls	r2, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	fbb2 f2f3 	udiv	r2, r2, r3
 8004644:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <UART_SetConfig+0x118>)
 8004646:	fba3 0302 	umull	r0, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	2064      	movs	r0, #100	; 0x64
 800464e:	fb00 f303 	mul.w	r3, r0, r3
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	3332      	adds	r3, #50	; 0x32
 8004658:	4a15      	ldr	r2, [pc, #84]	; (80046b0 <UART_SetConfig+0x118>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004664:	4419      	add	r1, r3
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	009a      	lsls	r2, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	fbb2 f2f3 	udiv	r2, r2, r3
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <UART_SetConfig+0x118>)
 800467e:	fba3 0302 	umull	r0, r3, r3, r2
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2064      	movs	r0, #100	; 0x64
 8004686:	fb00 f303 	mul.w	r3, r0, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	3332      	adds	r3, #50	; 0x32
 8004690:	4a07      	ldr	r2, [pc, #28]	; (80046b0 <UART_SetConfig+0x118>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	f003 020f 	and.w	r2, r3, #15
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	440a      	add	r2, r1
 80046a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40013800 	.word	0x40013800
 80046b0:	51eb851f 	.word	0x51eb851f

080046b4 <realloc>:
 80046b4:	4b02      	ldr	r3, [pc, #8]	; (80046c0 <realloc+0xc>)
 80046b6:	460a      	mov	r2, r1
 80046b8:	4601      	mov	r1, r0
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	f000 b802 	b.w	80046c4 <_realloc_r>
 80046c0:	20000058 	.word	0x20000058

080046c4 <_realloc_r>:
 80046c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c8:	4680      	mov	r8, r0
 80046ca:	4614      	mov	r4, r2
 80046cc:	460e      	mov	r6, r1
 80046ce:	b921      	cbnz	r1, 80046da <_realloc_r+0x16>
 80046d0:	4611      	mov	r1, r2
 80046d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046d6:	f000 b8cf 	b.w	8004878 <_malloc_r>
 80046da:	b92a      	cbnz	r2, 80046e8 <_realloc_r+0x24>
 80046dc:	f000 f864 	bl	80047a8 <_free_r>
 80046e0:	4625      	mov	r5, r4
 80046e2:	4628      	mov	r0, r5
 80046e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e8:	f000 f952 	bl	8004990 <_malloc_usable_size_r>
 80046ec:	4284      	cmp	r4, r0
 80046ee:	4607      	mov	r7, r0
 80046f0:	d802      	bhi.n	80046f8 <_realloc_r+0x34>
 80046f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046f6:	d812      	bhi.n	800471e <_realloc_r+0x5a>
 80046f8:	4621      	mov	r1, r4
 80046fa:	4640      	mov	r0, r8
 80046fc:	f000 f8bc 	bl	8004878 <_malloc_r>
 8004700:	4605      	mov	r5, r0
 8004702:	2800      	cmp	r0, #0
 8004704:	d0ed      	beq.n	80046e2 <_realloc_r+0x1e>
 8004706:	42bc      	cmp	r4, r7
 8004708:	4622      	mov	r2, r4
 800470a:	4631      	mov	r1, r6
 800470c:	bf28      	it	cs
 800470e:	463a      	movcs	r2, r7
 8004710:	f000 f83c 	bl	800478c <memcpy>
 8004714:	4631      	mov	r1, r6
 8004716:	4640      	mov	r0, r8
 8004718:	f000 f846 	bl	80047a8 <_free_r>
 800471c:	e7e1      	b.n	80046e2 <_realloc_r+0x1e>
 800471e:	4635      	mov	r5, r6
 8004720:	e7df      	b.n	80046e2 <_realloc_r+0x1e>

08004722 <memset>:
 8004722:	4603      	mov	r3, r0
 8004724:	4402      	add	r2, r0
 8004726:	4293      	cmp	r3, r2
 8004728:	d100      	bne.n	800472c <memset+0xa>
 800472a:	4770      	bx	lr
 800472c:	f803 1b01 	strb.w	r1, [r3], #1
 8004730:	e7f9      	b.n	8004726 <memset+0x4>
	...

08004734 <__errno>:
 8004734:	4b01      	ldr	r3, [pc, #4]	; (800473c <__errno+0x8>)
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000058 	.word	0x20000058

08004740 <__libc_init_array>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	2600      	movs	r6, #0
 8004744:	4d0c      	ldr	r5, [pc, #48]	; (8004778 <__libc_init_array+0x38>)
 8004746:	4c0d      	ldr	r4, [pc, #52]	; (800477c <__libc_init_array+0x3c>)
 8004748:	1b64      	subs	r4, r4, r5
 800474a:	10a4      	asrs	r4, r4, #2
 800474c:	42a6      	cmp	r6, r4
 800474e:	d109      	bne.n	8004764 <__libc_init_array+0x24>
 8004750:	f000 f936 	bl	80049c0 <_init>
 8004754:	2600      	movs	r6, #0
 8004756:	4d0a      	ldr	r5, [pc, #40]	; (8004780 <__libc_init_array+0x40>)
 8004758:	4c0a      	ldr	r4, [pc, #40]	; (8004784 <__libc_init_array+0x44>)
 800475a:	1b64      	subs	r4, r4, r5
 800475c:	10a4      	asrs	r4, r4, #2
 800475e:	42a6      	cmp	r6, r4
 8004760:	d105      	bne.n	800476e <__libc_init_array+0x2e>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	f855 3b04 	ldr.w	r3, [r5], #4
 8004768:	4798      	blx	r3
 800476a:	3601      	adds	r6, #1
 800476c:	e7ee      	b.n	800474c <__libc_init_array+0xc>
 800476e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004772:	4798      	blx	r3
 8004774:	3601      	adds	r6, #1
 8004776:	e7f2      	b.n	800475e <__libc_init_array+0x1e>
 8004778:	08004c58 	.word	0x08004c58
 800477c:	08004c58 	.word	0x08004c58
 8004780:	08004c58 	.word	0x08004c58
 8004784:	08004c60 	.word	0x08004c60

08004788 <__retarget_lock_acquire_recursive>:
 8004788:	4770      	bx	lr

0800478a <__retarget_lock_release_recursive>:
 800478a:	4770      	bx	lr

0800478c <memcpy>:
 800478c:	440a      	add	r2, r1
 800478e:	4291      	cmp	r1, r2
 8004790:	f100 33ff 	add.w	r3, r0, #4294967295
 8004794:	d100      	bne.n	8004798 <memcpy+0xc>
 8004796:	4770      	bx	lr
 8004798:	b510      	push	{r4, lr}
 800479a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800479e:	4291      	cmp	r1, r2
 80047a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047a4:	d1f9      	bne.n	800479a <memcpy+0xe>
 80047a6:	bd10      	pop	{r4, pc}

080047a8 <_free_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4605      	mov	r5, r0
 80047ac:	2900      	cmp	r1, #0
 80047ae:	d040      	beq.n	8004832 <_free_r+0x8a>
 80047b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b4:	1f0c      	subs	r4, r1, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bfb8      	it	lt
 80047ba:	18e4      	addlt	r4, r4, r3
 80047bc:	f000 f8dc 	bl	8004978 <__malloc_lock>
 80047c0:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <_free_r+0x8c>)
 80047c2:	6813      	ldr	r3, [r2, #0]
 80047c4:	b933      	cbnz	r3, 80047d4 <_free_r+0x2c>
 80047c6:	6063      	str	r3, [r4, #4]
 80047c8:	6014      	str	r4, [r2, #0]
 80047ca:	4628      	mov	r0, r5
 80047cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047d0:	f000 b8d8 	b.w	8004984 <__malloc_unlock>
 80047d4:	42a3      	cmp	r3, r4
 80047d6:	d908      	bls.n	80047ea <_free_r+0x42>
 80047d8:	6820      	ldr	r0, [r4, #0]
 80047da:	1821      	adds	r1, r4, r0
 80047dc:	428b      	cmp	r3, r1
 80047de:	bf01      	itttt	eq
 80047e0:	6819      	ldreq	r1, [r3, #0]
 80047e2:	685b      	ldreq	r3, [r3, #4]
 80047e4:	1809      	addeq	r1, r1, r0
 80047e6:	6021      	streq	r1, [r4, #0]
 80047e8:	e7ed      	b.n	80047c6 <_free_r+0x1e>
 80047ea:	461a      	mov	r2, r3
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	b10b      	cbz	r3, 80047f4 <_free_r+0x4c>
 80047f0:	42a3      	cmp	r3, r4
 80047f2:	d9fa      	bls.n	80047ea <_free_r+0x42>
 80047f4:	6811      	ldr	r1, [r2, #0]
 80047f6:	1850      	adds	r0, r2, r1
 80047f8:	42a0      	cmp	r0, r4
 80047fa:	d10b      	bne.n	8004814 <_free_r+0x6c>
 80047fc:	6820      	ldr	r0, [r4, #0]
 80047fe:	4401      	add	r1, r0
 8004800:	1850      	adds	r0, r2, r1
 8004802:	4283      	cmp	r3, r0
 8004804:	6011      	str	r1, [r2, #0]
 8004806:	d1e0      	bne.n	80047ca <_free_r+0x22>
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	4408      	add	r0, r1
 800480e:	6010      	str	r0, [r2, #0]
 8004810:	6053      	str	r3, [r2, #4]
 8004812:	e7da      	b.n	80047ca <_free_r+0x22>
 8004814:	d902      	bls.n	800481c <_free_r+0x74>
 8004816:	230c      	movs	r3, #12
 8004818:	602b      	str	r3, [r5, #0]
 800481a:	e7d6      	b.n	80047ca <_free_r+0x22>
 800481c:	6820      	ldr	r0, [r4, #0]
 800481e:	1821      	adds	r1, r4, r0
 8004820:	428b      	cmp	r3, r1
 8004822:	bf01      	itttt	eq
 8004824:	6819      	ldreq	r1, [r3, #0]
 8004826:	685b      	ldreq	r3, [r3, #4]
 8004828:	1809      	addeq	r1, r1, r0
 800482a:	6021      	streq	r1, [r4, #0]
 800482c:	6063      	str	r3, [r4, #4]
 800482e:	6054      	str	r4, [r2, #4]
 8004830:	e7cb      	b.n	80047ca <_free_r+0x22>
 8004832:	bd38      	pop	{r3, r4, r5, pc}
 8004834:	20000bec 	.word	0x20000bec

08004838 <sbrk_aligned>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	4e0e      	ldr	r6, [pc, #56]	; (8004874 <sbrk_aligned+0x3c>)
 800483c:	460c      	mov	r4, r1
 800483e:	6831      	ldr	r1, [r6, #0]
 8004840:	4605      	mov	r5, r0
 8004842:	b911      	cbnz	r1, 800484a <sbrk_aligned+0x12>
 8004844:	f000 f8ac 	bl	80049a0 <_sbrk_r>
 8004848:	6030      	str	r0, [r6, #0]
 800484a:	4621      	mov	r1, r4
 800484c:	4628      	mov	r0, r5
 800484e:	f000 f8a7 	bl	80049a0 <_sbrk_r>
 8004852:	1c43      	adds	r3, r0, #1
 8004854:	d00a      	beq.n	800486c <sbrk_aligned+0x34>
 8004856:	1cc4      	adds	r4, r0, #3
 8004858:	f024 0403 	bic.w	r4, r4, #3
 800485c:	42a0      	cmp	r0, r4
 800485e:	d007      	beq.n	8004870 <sbrk_aligned+0x38>
 8004860:	1a21      	subs	r1, r4, r0
 8004862:	4628      	mov	r0, r5
 8004864:	f000 f89c 	bl	80049a0 <_sbrk_r>
 8004868:	3001      	adds	r0, #1
 800486a:	d101      	bne.n	8004870 <sbrk_aligned+0x38>
 800486c:	f04f 34ff 	mov.w	r4, #4294967295
 8004870:	4620      	mov	r0, r4
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	20000bf0 	.word	0x20000bf0

08004878 <_malloc_r>:
 8004878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800487c:	1ccd      	adds	r5, r1, #3
 800487e:	f025 0503 	bic.w	r5, r5, #3
 8004882:	3508      	adds	r5, #8
 8004884:	2d0c      	cmp	r5, #12
 8004886:	bf38      	it	cc
 8004888:	250c      	movcc	r5, #12
 800488a:	2d00      	cmp	r5, #0
 800488c:	4607      	mov	r7, r0
 800488e:	db01      	blt.n	8004894 <_malloc_r+0x1c>
 8004890:	42a9      	cmp	r1, r5
 8004892:	d905      	bls.n	80048a0 <_malloc_r+0x28>
 8004894:	230c      	movs	r3, #12
 8004896:	2600      	movs	r6, #0
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	4630      	mov	r0, r6
 800489c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004974 <_malloc_r+0xfc>
 80048a4:	f000 f868 	bl	8004978 <__malloc_lock>
 80048a8:	f8d8 3000 	ldr.w	r3, [r8]
 80048ac:	461c      	mov	r4, r3
 80048ae:	bb5c      	cbnz	r4, 8004908 <_malloc_r+0x90>
 80048b0:	4629      	mov	r1, r5
 80048b2:	4638      	mov	r0, r7
 80048b4:	f7ff ffc0 	bl	8004838 <sbrk_aligned>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	4604      	mov	r4, r0
 80048bc:	d155      	bne.n	800496a <_malloc_r+0xf2>
 80048be:	f8d8 4000 	ldr.w	r4, [r8]
 80048c2:	4626      	mov	r6, r4
 80048c4:	2e00      	cmp	r6, #0
 80048c6:	d145      	bne.n	8004954 <_malloc_r+0xdc>
 80048c8:	2c00      	cmp	r4, #0
 80048ca:	d048      	beq.n	800495e <_malloc_r+0xe6>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	4631      	mov	r1, r6
 80048d0:	4638      	mov	r0, r7
 80048d2:	eb04 0903 	add.w	r9, r4, r3
 80048d6:	f000 f863 	bl	80049a0 <_sbrk_r>
 80048da:	4581      	cmp	r9, r0
 80048dc:	d13f      	bne.n	800495e <_malloc_r+0xe6>
 80048de:	6821      	ldr	r1, [r4, #0]
 80048e0:	4638      	mov	r0, r7
 80048e2:	1a6d      	subs	r5, r5, r1
 80048e4:	4629      	mov	r1, r5
 80048e6:	f7ff ffa7 	bl	8004838 <sbrk_aligned>
 80048ea:	3001      	adds	r0, #1
 80048ec:	d037      	beq.n	800495e <_malloc_r+0xe6>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	442b      	add	r3, r5
 80048f2:	6023      	str	r3, [r4, #0]
 80048f4:	f8d8 3000 	ldr.w	r3, [r8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d038      	beq.n	800496e <_malloc_r+0xf6>
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	42a2      	cmp	r2, r4
 8004900:	d12b      	bne.n	800495a <_malloc_r+0xe2>
 8004902:	2200      	movs	r2, #0
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	e00f      	b.n	8004928 <_malloc_r+0xb0>
 8004908:	6822      	ldr	r2, [r4, #0]
 800490a:	1b52      	subs	r2, r2, r5
 800490c:	d41f      	bmi.n	800494e <_malloc_r+0xd6>
 800490e:	2a0b      	cmp	r2, #11
 8004910:	d917      	bls.n	8004942 <_malloc_r+0xca>
 8004912:	1961      	adds	r1, r4, r5
 8004914:	42a3      	cmp	r3, r4
 8004916:	6025      	str	r5, [r4, #0]
 8004918:	bf18      	it	ne
 800491a:	6059      	strne	r1, [r3, #4]
 800491c:	6863      	ldr	r3, [r4, #4]
 800491e:	bf08      	it	eq
 8004920:	f8c8 1000 	streq.w	r1, [r8]
 8004924:	5162      	str	r2, [r4, r5]
 8004926:	604b      	str	r3, [r1, #4]
 8004928:	4638      	mov	r0, r7
 800492a:	f104 060b 	add.w	r6, r4, #11
 800492e:	f000 f829 	bl	8004984 <__malloc_unlock>
 8004932:	f026 0607 	bic.w	r6, r6, #7
 8004936:	1d23      	adds	r3, r4, #4
 8004938:	1af2      	subs	r2, r6, r3
 800493a:	d0ae      	beq.n	800489a <_malloc_r+0x22>
 800493c:	1b9b      	subs	r3, r3, r6
 800493e:	50a3      	str	r3, [r4, r2]
 8004940:	e7ab      	b.n	800489a <_malloc_r+0x22>
 8004942:	42a3      	cmp	r3, r4
 8004944:	6862      	ldr	r2, [r4, #4]
 8004946:	d1dd      	bne.n	8004904 <_malloc_r+0x8c>
 8004948:	f8c8 2000 	str.w	r2, [r8]
 800494c:	e7ec      	b.n	8004928 <_malloc_r+0xb0>
 800494e:	4623      	mov	r3, r4
 8004950:	6864      	ldr	r4, [r4, #4]
 8004952:	e7ac      	b.n	80048ae <_malloc_r+0x36>
 8004954:	4634      	mov	r4, r6
 8004956:	6876      	ldr	r6, [r6, #4]
 8004958:	e7b4      	b.n	80048c4 <_malloc_r+0x4c>
 800495a:	4613      	mov	r3, r2
 800495c:	e7cc      	b.n	80048f8 <_malloc_r+0x80>
 800495e:	230c      	movs	r3, #12
 8004960:	4638      	mov	r0, r7
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	f000 f80e 	bl	8004984 <__malloc_unlock>
 8004968:	e797      	b.n	800489a <_malloc_r+0x22>
 800496a:	6025      	str	r5, [r4, #0]
 800496c:	e7dc      	b.n	8004928 <_malloc_r+0xb0>
 800496e:	605b      	str	r3, [r3, #4]
 8004970:	deff      	udf	#255	; 0xff
 8004972:	bf00      	nop
 8004974:	20000bec 	.word	0x20000bec

08004978 <__malloc_lock>:
 8004978:	4801      	ldr	r0, [pc, #4]	; (8004980 <__malloc_lock+0x8>)
 800497a:	f7ff bf05 	b.w	8004788 <__retarget_lock_acquire_recursive>
 800497e:	bf00      	nop
 8004980:	20000be8 	.word	0x20000be8

08004984 <__malloc_unlock>:
 8004984:	4801      	ldr	r0, [pc, #4]	; (800498c <__malloc_unlock+0x8>)
 8004986:	f7ff bf00 	b.w	800478a <__retarget_lock_release_recursive>
 800498a:	bf00      	nop
 800498c:	20000be8 	.word	0x20000be8

08004990 <_malloc_usable_size_r>:
 8004990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004994:	1f18      	subs	r0, r3, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	bfbc      	itt	lt
 800499a:	580b      	ldrlt	r3, [r1, r0]
 800499c:	18c0      	addlt	r0, r0, r3
 800499e:	4770      	bx	lr

080049a0 <_sbrk_r>:
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	2300      	movs	r3, #0
 80049a4:	4d05      	ldr	r5, [pc, #20]	; (80049bc <_sbrk_r+0x1c>)
 80049a6:	4604      	mov	r4, r0
 80049a8:	4608      	mov	r0, r1
 80049aa:	602b      	str	r3, [r5, #0]
 80049ac:	f7fd fc30 	bl	8002210 <_sbrk>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d102      	bne.n	80049ba <_sbrk_r+0x1a>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	b103      	cbz	r3, 80049ba <_sbrk_r+0x1a>
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	20000be4 	.word	0x20000be4

080049c0 <_init>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	bf00      	nop
 80049c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c6:	bc08      	pop	{r3}
 80049c8:	469e      	mov	lr, r3
 80049ca:	4770      	bx	lr

080049cc <_fini>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	bf00      	nop
 80049d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d2:	bc08      	pop	{r3}
 80049d4:	469e      	mov	lr, r3
 80049d6:	4770      	bx	lr
